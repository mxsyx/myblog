{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"source/assets/images/00tx.jpg","path":"assets/images/00tx.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/favicon-16x16.ico","path":"assets/images/favicon-16x16.ico","modified":0,"renderable":0},{"_id":"source/assets/images/favicon-32x32.ico","path":"assets/images/favicon-32x32.ico","modified":0,"renderable":0},{"_id":"source/assets/images/bg.jpg","path":"assets/images/bg.jpg","modified":0,"renderable":0},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/logo-stun.svg","path":"images/icons/logo-stun.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1574683579173},{"_id":"themes/stun/_config.yml","hash":"50802ed9aa9e94e483e67100df9a421203ccf937","modified":1575291720829},{"_id":"source/_posts/张麻子.md","hash":"2ed7cec4eff730f484dae4a1f9c433e6ee28755c","modified":1575558830036},{"_id":"themes/stun/README.md","hash":"89e78a952439afe249fe37e55681271347a313d1","modified":1574683579173},{"_id":"themes/stun/package.json","hash":"84c541c754ef20b9286c723bf5aeba46a9d6ee65","modified":1574683579177},{"_id":"source/categories/index.md","hash":"a0c91a4666dd2689393d9f14edc9b01047d29458","modified":1574769507302},{"_id":"source/_posts/C++标准线程库.md","hash":"c5933ad0d5cfa1e9b70dd3ff03123d6552504585","modified":1574780393130},{"_id":"source/_posts/解决Debina系统自动更新软件包的问题.md","hash":"5a4bb2737767e78d9bb8474f406edd088b5225e1","modified":1575368760151},{"_id":"themes/stun/docs/README.md","hash":"3772f09fe926b9d165132e51b8b239fe25d9d73b","modified":1574683579173},{"_id":"themes/stun/languages/zh-CN.yml","hash":"f28ea2577a45a79c739dc40e1b473a7c981d43a9","modified":1574769438710},{"_id":"themes/stun/languages/en.yml","hash":"cf8264da5259914723e0a017c0c92a92c3e15333","modified":1574683579177},{"_id":"themes/stun/layout/_layout.pug","hash":"c30cdb7b93c3cbd3bfbac61d6ad5e93ad90cf840","modified":1574683579177},{"_id":"source/tags/index.md","hash":"88507f6d8e57212e83b94827d115f818f72bfce5","modified":1574769501274},{"_id":"themes/stun/layout/archive.pug","hash":"9559118e9f0ec1acb8698b4306cc4dfe80f64cc2","modified":1574683579177},{"_id":"themes/stun/layout/category.pug","hash":"7bb46b10497c7612fc54f236be34fdc47e57ebb8","modified":1574683579177},{"_id":"themes/stun/layout/index.pug","hash":"5ac5d46f04e2077d7ca46b14672b817bced2648d","modified":1574683579177},{"_id":"themes/stun/scripts/engine.js","hash":"bcf01de9714fb52c3ca877796d9dd7a9ba876777","modified":1574683579177},{"_id":"themes/stun/layout/page.pug","hash":"b094fe48d80351fdc350f36343f1dfbadbc1aced","modified":1574683579177},{"_id":"themes/stun/scripts/merge-config.js","hash":"48c2828c1f42dd269e90d654e41ed5357b411d21","modified":1574683579177},{"_id":"themes/stun/layout/post.pug","hash":"8d7c9ebfdd3bd421a2fdb51a5d104f5f1dd61e18","modified":1574683579177},{"_id":"themes/stun/layout/tag.pug","hash":"6f1b9eaa41784417f720a70fbbc4db098da88255","modified":1574683579177},{"_id":"themes/stun/docs/advanced/advanced-setting.md","hash":"e30dfd24cadcd7bb0257e845c9b8d62f1815c1cf","modified":1574683579173},{"_id":"themes/stun/docs/advanced/assist.md","hash":"65cbe89bb3ae0ddb161f0fae50c799d5a15d9b6b","modified":1574683579173},{"_id":"themes/stun/docs/advanced/optimize.md","hash":"0d45bbc7be20642f59f4d47110029c4511f5b7dc","modified":1574683579173},{"_id":"themes/stun/docs/guide/primary-setting.md","hash":"f94e8e33ece158d085b1ac1f8ea458c378163f46","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/config.js","hash":"5da190af3f543e0be95e5e39823eaab68b494e99","modified":1574683579173},{"_id":"themes/stun/docs/guide/quick-start.md","hash":"4090974b9b3925d95f952a521ba24999332e0f8b","modified":1574683579173},{"_id":"themes/stun/docs/advanced/third-part.md","hash":"815563ea213c1fde294c9e4543cb4f98c96ac4a1","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/README.md","hash":"91253b9fbb2255c80980175c7ee79140fde6a18c","modified":1574683579173},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8e75490fe98ef767b7fe221ded4e1eaee42af411","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"cc415d0b24413a952e507c47b6f34a3ebf0a7487","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"e14cd77ffad4064b3b61a50b08208abe2ddff321","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/post-timeline.pug","hash":"5a51ae94bb55b9051737c9dc0a59424cfe75a6e4","modified":1574683579177},{"_id":"themes/stun/layout/_partials/config.pug","hash":"9ef37494e022f817a94899c86ca7153b83fd731d","modified":1574683579177},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"058de00c983f9e00ef3e08ac2362dac2ad6650bc","modified":1574683579177},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"25cd4e42bc035a0bf186ba40f77aa779b01cfad8","modified":1574683579177},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"06aa76a85adf6e43350534507ed46a105728ee27","modified":1574683579177},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"f2d7d8f2f82e81ac04862aff865ec7fde7384e00","modified":1574683579177},{"_id":"themes/stun/scripts/filters/resize-img.js","hash":"b49da7c91e0ecab1bf14494c6a47afaeab22cdb6","modified":1574683579177},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"0f1ab8e558204f233f9382579fa5f74fddca0bd2","modified":1574683579177},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"6435099bf6d09d4c416c3323219e757cba4da73d","modified":1574683579177},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"96f83c84b5c10ccff0d41b7610599fdfa191bff6","modified":1574683579177},{"_id":"themes/stun/scripts/tags/friends.js","hash":"5ec0a0d826add4390ba52755663986e6b9092109","modified":1574683579177},{"_id":"themes/stun/scripts/tags/table.js","hash":"796a7fd93e2fe88991c5178e18a8a9143f7e5d53","modified":1574683579177},{"_id":"themes/stun/scripts/tags/note.js","hash":"476b838998f570ffb4a6ec707ee3d8daa57ca5b8","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"f34755ac6011c59c796846a95f224d043a121102","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"f501bd611dcc48bdf9b1f989dafef4a477c894c8","modified":1574683579177},{"_id":"themes/stun/source/images/algolia.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1574683579181},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1574754800158},{"_id":"themes/stun/source/images/avatar.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1574683579181},{"_id":"themes/stun/source/images/loading.svg","hash":"6a8b47b10430b0df8be6b70e7915961462464c32","modified":1574683579181},{"_id":"themes/stun/source/js/scroll.js","hash":"37c9a663d31b736a26f13b62911b0ed6ea5f4f28","modified":1574683579181},{"_id":"themes/stun/source/js/header.js","hash":"e5f141bdfbfb2496fc14df58d56a3f2e405a9e4a","modified":1574683579181},{"_id":"source/assets/images/00tx.jpg","hash":"da49633f8cfbf4823d1bdb4b22e7da382a8156a4","modified":1548043728000},{"_id":"source/assets/images/favicon-16x16.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1574780090550},{"_id":"source/assets/images/favicon-32x32.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1574780090550},{"_id":"source/assets/images/bg.jpg","hash":"c26df46935a330740f562b773f94fdf8a8415691","modified":1574755274062},{"_id":"themes/stun/source/js/stun-boot.js","hash":"a20bbfa85be4368cad46f5e0a03b54706cff40f5","modified":1574683579181},{"_id":"themes/stun/source/js/sidebar.js","hash":"6463df06250ebc0aa2c38625c5ff76575e6dc145","modified":1574683579181},{"_id":"themes/stun/docs/.vuepress/public/logo.png","hash":"55ddfe951fe8d8c7491cc72572933c964c44cad6","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/manifest.json","hash":"e730aa0b537f8ff15d705a11022448b32bef7b67","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/advanced/optimize.md","hash":"6bd6cd4ea9c22f12b5bea2f959eb12ee2cbd3a18","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/advanced/assist.md","hash":"62513e0501d49ddad47d652d71155a142b02d421","modified":1574683579177},{"_id":"themes/stun/source/js/utils.js","hash":"ee941d4230d38351f814cd7563148b5a90125b36","modified":1574778979318},{"_id":"themes/stun/docs/zh-CN/advanced/advanced-setting.md","hash":"73ef4fdbeac63062fbdecbc8bf692d59c67c9cb4","modified":1574739459735},{"_id":"themes/stun/docs/zh-CN/advanced/third-part.md","hash":"2a1e5f70a1d35176c3d908a103934d6c69dec617","modified":1574683579177},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"5dada662a32fb492fafb892039cd76591c75fcfd","modified":1574775721406},{"_id":"themes/stun/docs/zh-CN/guide/primary-setting.md","hash":"bef28e2fb460f487f5c97daa8663ccb7ece90225","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/guide/quick-start.md","hash":"8b8d6d42b353c519104f3adc3acdad8741c39b87","modified":1574683579177},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"c96da7d5420bc77cee10b16be277af64b45f7b6b","modified":1574772716014},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"a147632c51b2d29f6fbcc471bb00d0acac2b5f54","modified":1574683579177},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"0aedb786145205b7f06aad5fa9ae002309eaf3ef","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"8e46a49b0012598e679158507bd56b6ee43aa248","modified":1574683579177},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"af57bcd4a3a46861ab33b614a1ebb8455274d8c5","modified":1574778333002},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"e3174ad809d308328cc65bad914fa1c7cb67a781","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"fa26e2cfec7a150cbd7186b00d8ee8d3ada099d6","modified":1574683579177},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"8412ca45bc65d019811f0c1318216bc3e8570187","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"cbda7755e48aacf03fe292b47c43b1737e6a01ce","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"e67010da58321b170e435600d84107ac45d43343","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"cf7eb5ab4af863a0115dcc338316d2f837c02b88","modified":1574737976543},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c6ef7ad1862dd1e974b94a0dea46028e945a16a9","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/pagination.pug","hash":"840c87cc0313ac196dc9485dfa52baad40fa6883","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"54a28818b72049ef5a40f003327980ad1d8d0047","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"859b8d21b3706843bb6524ee504de1a2741264ec","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"9729e8fd70e52e2400bf27a46a1ad1ec57190f1f","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"264e608d3d484ea7090019749b8579473e4978c8","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"72bcfb8a331cd90e6078a7498af0c1ee28cfdead","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"a24f48c7f11394b326dad461cdabb05c7e865953","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"6734598670b04ce0b8be6e29987b3d5e4a624259","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"63a6b9ff12e7c93274bde68e7a9ff04d90a5ac11","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"245996057e1c1b2429c0dbbc225cc8a1d512393a","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"f840dde52e1ed2de54e64f13b7449d0b91106df1","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"2c501a7a05270da16521bf3e0bdb54bbbb4c01c6","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"9e4157d8f5f8d30cac74315aeb927a4236d6407c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"2ef20ef49b56b5af3a38abd5d3f00d72e6b1c141","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"25fb884962c5470ff191e1439631a96e6452fe08","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"a4c1f1c3c99bb2c775b937bda6b9a0e80daa3da5","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"13c52ed7e8a822c98d8604145cc8a5baaaa4354f","modified":1574683579177},{"_id":"themes/stun/source/css/_common/index.styl","hash":"72095b34ac846dfc234aa3c0e3b7be874779407a","modified":1574779456414},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"33b7522c1c1492df611e5dc18ab6fa14a7c61a57","modified":1574683579181},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"0d1adc70250941074c742f94f7801b3b43a7f1db","modified":1574755951018},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"4164575e6603918c3613d1aac259744ff22e9a2a","modified":1574683579181},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"9636f5b90da22e48fc952f4ac49339d076570937","modified":1574683579181},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","hash":"c7550f6349ec41c218b681c27cb878c255d8d041","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","hash":"88785838fd99fa4960ae204b6941eeed6ac29a4e","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574683579181},{"_id":"themes/stun/source/images/icons/logo-stun.svg","hash":"f76267c87f14a6469460f53f8af5f8fcd1edb7eb","modified":1574683579181},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-192x192.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-120x120.png","hash":"2c0b3a3466b805ec623729a5b441856babf63d33","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-512x512.png","hash":"abfb5db9ee449bd12a01f2b4376ea6b461c47135","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-152x152.png","hash":"121195939946b3f8f3fffa9687dcc50bc02dbbfa","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-180x180.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-60x60.png","hash":"73d7f206772c1cd53392e3733cd801060b59a82a","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-76x76.png","hash":"c60f4b519f7a7afa79cef37a7cc4008b164e53cd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-16x16.png","hash":"0a9004baf650a72d447c822d44cecce69394cd89","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-32x32.png","hash":"2bfdd221b5948f22204844100fe643e89b83eeb7","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/msapplication-icon-144x144.png","hash":"c2a8dd8156416f7b3f830aeef661a6cd8aeb7b22","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/mstile-150x150.png","hash":"7ef42fd46d8aae3cb8660f42733ec9ecf6a5c616","modified":1574683579173},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"0ea977a1e0c8a371db9a4f0f685714311aba7dad","modified":1574779061678},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1574683579181},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"b8e0dbc9a93d28f338036126fe236e958289808f","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"f8023efaa8070ffead4782160a9e0185261750b4","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"7c56b41a5ce38c9009ead11bc6d30f27c6faca05","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"6aae948e3da892f05520ff7e12ce34ba5d785643","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"33798f75a60178aff9786e6f2d973e35af51f430","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"b47897cab855fa56428c393ba4c9f71de57b69e1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"15b757937ab39cd711d088c2a7e55bc4707b9ba1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"d78ff14befde3d437149c920bed173b4107e2f80","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"dcfa7ab739774bbcb39c5ee3c477dd280bd9c733","modified":1574771076122},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"5b01f17df157f0718f962decabe636b36f898148","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"d5c8e5954210c19af712e1dd2992bb69023b51c3","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"abda30b143a60faef6827892afa47c3ad96d0a5b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"e2ce1e41ddac3772eab674cb2259d5ed1cc1e7d9","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"91fdf9e2e588f41e7818abb885c6433a3dc37122","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"fc6867eeeb9b0011d8ad7ba9bdef387e7e8ead3c","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"92f37483f28bb371d60c66263e40929274c610fb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"1d8c1fd9f63e96a1ff8909c7ae42a5f33b1bee0a","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-timeline.styl","hash":"abaebea0e3a83a8e2611840fb46f2a91ba7a2b30","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"f377cb8a9b1ab729d22e4656ee9a31e96780949b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"08cce8268cdd604cdaf643ba64c71bc29052bb31","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"9c297104a3185668b5edd3e2a8b69dec9cf4cba4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"aa149efb2244066ad594351837d2c5ab64633116","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"40804aab280566879620b4acef4062608990aacb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"e09369d520442b34f115c1907cc0e5872d98843e","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"df0c6ee8c38ebe9254db5c606a8395a7f38cccc2","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"8d462affa1e594cc939710cb96bb564fc9af6548","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"d4dadbc2b78c87649f84bf8bc1eb8363f4748881","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/external-link.styl","hash":"1fa4d38f0c3467eb46941b97050e5d6dddadfee2","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"b478e892e48bbc2179c99d875930ac0eb92a5916","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"372836c3e0e64aa62ed7b794921280d810641aed","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"07ec6c1c9c716a3d92e931cd23b1d9cd07325f7b","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"fe0c497bf842aba4e887e46d369073ebf1d8a324","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/pagination.styl","hash":"d896638f0fb5acb3338748ca19557a49479fcacc","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"51a7f578f384f48c2562b9b55916efcb819e1e25","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"7cb7f0629a2f91dfb5547e356f0036fed102c183","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"085c024604447a213bf5634de1b7acf921dd0d75","modified":1574683579181},{"_id":"public/atom.xml","hash":"4c7dd7064043c2c2dc1f4fde6e374ca1b9916afc","modified":1575559334454},{"_id":"public/search.json","hash":"68e02c3f9a9730b95bf4bebc8e69bd8315212c25","modified":1575559334454},{"_id":"public/categories/index.html","hash":"13ba68fa5189a6a407b4b0e917dd47312716fbaa","modified":1575559334454},{"_id":"public/tags/index.html","hash":"5cc5217391c59299f235ad26b5f30b5386242091","modified":1575559334454},{"_id":"public/archives/2/index.html","hash":"8f1bc1779c54e7b2e667733cc97aeac0a8baba52","modified":1575559334454},{"_id":"public/archives/1/index.html","hash":"a8a7ff23e3613efae435a36042486739964952ea","modified":1575559334454},{"_id":"public/archives/index.html","hash":"5d61dc4973b33f3c256a41923d45239b056864a9","modified":1575559334454},{"_id":"public/archives/2019/index.html","hash":"5d61dc4973b33f3c256a41923d45239b056864a9","modified":1575559334454},{"_id":"public/archives/2019/11/index.html","hash":"5d61dc4973b33f3c256a41923d45239b056864a9","modified":1575559334454},{"_id":"public/archives/2019/12/index.html","hash":"5d61dc4973b33f3c256a41923d45239b056864a9","modified":1575559334454},{"_id":"public/categories/Linux/index.html","hash":"44899b8572d9cabe02776f3c215233ee9115af84","modified":1575559334454},{"_id":"public/categories/编程语言/index.html","hash":"2b89769e28bb1a6b6bff9129f93f7efc046ad7e2","modified":1575559334454},{"_id":"public/index.html","hash":"3b125a582c572dfe4804bda3257188ac1ffe2564","modified":1575559334454},{"_id":"public/tags/Linux/index.html","hash":"a239f91a13e970761e302d32c59cdf77588d61b1","modified":1575559334454},{"_id":"public/tags/C/index.html","hash":"a2c5e9e98bab16aada6458642f8dfdfe65c772e1","modified":1575559334454},{"_id":"public/archives/张麻子/index.html","hash":"e37ea0f5ad5cab812610b10d28b627fb54e32a74","modified":1575558833874},{"_id":"public/images/algolia.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1575558833874},{"_id":"public/images/avatar.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1575558833874},{"_id":"public/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1575558833874},{"_id":"public/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1575558833874},{"_id":"public/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1575558833874},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1575558833874},{"_id":"public/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1575558833874},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1575558833874},{"_id":"public/images/loading.svg","hash":"6a8b47b10430b0df8be6b70e7915961462464c32","modified":1575558833874},{"_id":"public/assets/images/bg.jpg","hash":"c26df46935a330740f562b773f94fdf8a8415691","modified":1575558833874},{"_id":"public/images/icons/apple-touch-icon.png","hash":"c7550f6349ec41c218b681c27cb878c255d8d041","modified":1575558833874},{"_id":"public/images/icons/favicon-144x144.png","hash":"88785838fd99fa4960ae204b6941eeed6ac29a4e","modified":1575558833874},{"_id":"public/images/icons/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1575558833874},{"_id":"public/images/icons/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1575558833874},{"_id":"public/images/icons/logo-stun.svg","hash":"f76267c87f14a6469460f53f8af5f8fcd1edb7eb","modified":1575558833874},{"_id":"public/assets/images/00tx.jpg","hash":"da49633f8cfbf4823d1bdb4b22e7da382a8156a4","modified":1575558833874},{"_id":"public/assets/images/favicon-16x16.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1575558833874},{"_id":"public/assets/images/favicon-32x32.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1575558833874},{"_id":"public/js/scroll.js","hash":"37c9a663d31b736a26f13b62911b0ed6ea5f4f28","modified":1575558833874},{"_id":"public/js/header.js","hash":"e5f141bdfbfb2496fc14df58d56a3f2e405a9e4a","modified":1575558833874},{"_id":"public/js/stun-boot.js","hash":"a20bbfa85be4368cad46f5e0a03b54706cff40f5","modified":1575558833874},{"_id":"public/js/sidebar.js","hash":"6463df06250ebc0aa2c38625c5ff76575e6dc145","modified":1575558833874},{"_id":"public/js/utils.js","hash":"ee941d4230d38351f814cd7563148b5a90125b36","modified":1575558833874},{"_id":"public/css/index.css","hash":"07d7dd5c84c5ec1f2f358154e9bac367b7c6e207","modified":1575558833874},{"_id":"source/_posts/看懂了《让子弹飞》就理解了毛泽东和文革(转载).md","hash":"a0124135cdce33ccc978606614c093385af4ef65","modified":1575559328744},{"_id":"public/archives/3/index.html","hash":"1a2081ee4df178a4d1a8d275af2a16e77d739583","modified":1575559334454},{"_id":"public/categories/转载/index.html","hash":"f490c28f2e7fe446cc0f5d9d0bf42c1b8793ddd3","modified":1575559334454},{"_id":"public/tags/那年夏夜/index.html","hash":"6356224434d472441a8b0676c72b9d5b4dee4718","modified":1575559334454}],"Category":[{"name":"Linux","_id":"ck3sv1tk40005p7fwa6eahseu"},{"name":"编程语言","_id":"ck3sv1tk80007p7fw3dja8vdd"},{"name":"转载","_id":"ck3svcjj90001bdfw6g7t82jl"}],"Data":[],"Page":[{"title":"categories","date":"2019-11-25T13:53:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-25 21:53:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-11-26T11:58:27.302Z","path":"categories/index.html","layout":"page","_id":"ck3sv1tjx0001p7fwe0h27qtk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-11-25T13:55:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-25 21:55:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-11-26T11:58:21.274Z","path":"tags/index.html","layout":"page","_id":"ck3sv1tk00003p7fwbqv75h6y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"解决Debina系统自动更新软件包的问题","date":"2019-12-02T15:09:23.000Z","reward":true,"_content":"\n　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。\n\n　　首先我利用一款名为`nethogs`的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。\n\nAPT关于自动更新的配置文件位于\"/etc/apt/apt.conf.d/20auto-upgrades\", 将其中的\n```shell\nAPT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n```\n更改为\n```shell\nAPT::Periodic::Update-Package-Lists \"0\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n```\n其中\n- APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。\n- APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。\n  \n　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 `packagekit` 的父进程，我查了一下 `packagekit` 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。\n\n　　我的系统默认在开机时启动packgekit服务，查看 `packagekit` 的启动单元: \n`cat /lib/systemd/system/packagekit.service`\n```shell\n[Unit]\nDescription=PackageKit Daemon\n# PK does not know how to do anything on ostree-managed systems;\n# currently the design is to have dedicated daemons like\n# eos-updater and rpm-ostree, and gnome-software talks to those.\nConditionPathExists=!/run/ostree-booted\n\n[Service]\nType=dbus\nBusName=org.freedesktop.PackageKit\nUser=root\nExecStart=/usr/lib/packagekit/packagekitd\n```\n*系统每次开机时都会启动这个单元，执行 `/usr/lib/packagekit/packagekitd` 命令，而 `packagekit` 又将在运行期间调起APT下载需要更新的软件包。*\n\n　　知道了这些问题自然也就解决了，禁用此服务: `systemctl disable packagekit.service`.\n　　或者干脆删除 `/lib/systemd/system/` 目录下的 `packagekit.service` (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)\n\n　　在那之后，系统便再也没有执行过自动更新了。\n　　\n[附]\n>[nethohs](https://github.com/raboof/nethogs)是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。\n\n在 Debian/Ubuntu 下，使用`apt-get install nethogs` 安装它。\n或编译安装:\n```shell\nwget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz\ntar xf v0.8.5.tar.gz \ncd ./nethogs-0.8.5/\nmake && make install\n```\n如果编译失败需要安装依赖库\n```\napt-get install libncurses5-dev libpcap-dev\n```\n\n使用\n\n```shell\nroot@zsimline$ nethogs\nNetHogs version 0.8.5-2+b1\nPID  USER    PROGRAM                   DEV  SENT      RECEIVED  \n2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec\n1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec\n?    root   unknown TCP                     0.000   0.000 KB/sec\n\n  TOTAL                                     0.480       0.917 KB/se\n```\n\n指定网卡\n```shell\nroot@zsimline$ nethogs wlan0 # 监听wlan0\nroot@zsimline$ nethogs -a    # 监听所有网卡\n```\n\n指定刷新频率 -d seconds (默认为1)\n```shell\nroot@zsimline$ nethogs -d 2\n```\n\n指定刷新次数 -c number (默认不限)\n```shell\nroot@zsimline$ nethogs -c 10\n```\n\n交互模式\n在进入 nethogs 之后，可以使用如下的交互命令:\n```shell\nq: 退出\ns: 按照发送流量排序\nr: 按照流量排序\nm: 修改网速单位 (KB, B, MB) and KB/s\n```","source":"_posts/解决Debina系统自动更新软件包的问题.md","raw":"---\ntitle: 解决Debina系统自动更新软件包的问题\ndate: 2019-12-02 23:09:23\ntags: Linux\nreward: true\npermalink: 2\ncategories: Linux\n---\n\n　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。\n\n　　首先我利用一款名为`nethogs`的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。\n\nAPT关于自动更新的配置文件位于\"/etc/apt/apt.conf.d/20auto-upgrades\", 将其中的\n```shell\nAPT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n```\n更改为\n```shell\nAPT::Periodic::Update-Package-Lists \"0\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n```\n其中\n- APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。\n- APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。\n  \n　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 `packagekit` 的父进程，我查了一下 `packagekit` 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。\n\n　　我的系统默认在开机时启动packgekit服务，查看 `packagekit` 的启动单元: \n`cat /lib/systemd/system/packagekit.service`\n```shell\n[Unit]\nDescription=PackageKit Daemon\n# PK does not know how to do anything on ostree-managed systems;\n# currently the design is to have dedicated daemons like\n# eos-updater and rpm-ostree, and gnome-software talks to those.\nConditionPathExists=!/run/ostree-booted\n\n[Service]\nType=dbus\nBusName=org.freedesktop.PackageKit\nUser=root\nExecStart=/usr/lib/packagekit/packagekitd\n```\n*系统每次开机时都会启动这个单元，执行 `/usr/lib/packagekit/packagekitd` 命令，而 `packagekit` 又将在运行期间调起APT下载需要更新的软件包。*\n\n　　知道了这些问题自然也就解决了，禁用此服务: `systemctl disable packagekit.service`.\n　　或者干脆删除 `/lib/systemd/system/` 目录下的 `packagekit.service` (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)\n\n　　在那之后，系统便再也没有执行过自动更新了。\n　　\n[附]\n>[nethohs](https://github.com/raboof/nethogs)是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。\n\n在 Debian/Ubuntu 下，使用`apt-get install nethogs` 安装它。\n或编译安装:\n```shell\nwget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz\ntar xf v0.8.5.tar.gz \ncd ./nethogs-0.8.5/\nmake && make install\n```\n如果编译失败需要安装依赖库\n```\napt-get install libncurses5-dev libpcap-dev\n```\n\n使用\n\n```shell\nroot@zsimline$ nethogs\nNetHogs version 0.8.5-2+b1\nPID  USER    PROGRAM                   DEV  SENT      RECEIVED  \n2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec\n1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec\n?    root   unknown TCP                     0.000   0.000 KB/sec\n\n  TOTAL                                     0.480       0.917 KB/se\n```\n\n指定网卡\n```shell\nroot@zsimline$ nethogs wlan0 # 监听wlan0\nroot@zsimline$ nethogs -a    # 监听所有网卡\n```\n\n指定刷新频率 -d seconds (默认为1)\n```shell\nroot@zsimline$ nethogs -d 2\n```\n\n指定刷新次数 -c number (默认不限)\n```shell\nroot@zsimline$ nethogs -c 10\n```\n\n交互模式\n在进入 nethogs 之后，可以使用如下的交互命令:\n```shell\nq: 退出\ns: 按照发送流量排序\nr: 按照流量排序\nm: 修改网速单位 (KB, B, MB) and KB/s\n```","slug":"2","published":1,"updated":"2019-12-03T10:26:00.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3sv1tjz0002p7fwee849we6","content":"<p>　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。</p>\n<p>　　首先我利用一款名为<code>nethogs</code>的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。</p>\n<p>APT关于自动更新的配置文件位于”/etc/apt/apt.conf.d/20auto-upgrades”, 将其中的</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"1\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"1\";</span><br></pre></td></tr></table></div></figure>\n<p>更改为</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"0\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"0\";</span><br></pre></td></tr></table></div></figure>\n<p>其中</p>\n<ul>\n<li>APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。</li>\n<li>APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。</li>\n</ul>\n<p>　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 <code>packagekit</code> 的父进程，我查了一下 <code>packagekit</code> 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。</p>\n<p>　　我的系统默认在开机时启动packgekit服务，查看 <code>packagekit</code> 的启动单元:<br><code>cat /lib/systemd/system/packagekit.service</code></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=PackageKit Daemon</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> PK does not know how to <span class=\"keyword\">do</span> anything on ostree-managed systems;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> currently the design is to have dedicated daemons like</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> eos-updater and rpm-ostree, and gnome-software talks to those.</span></span><br><span class=\"line\">ConditionPathExists=!/run/ostree-booted</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=dbus</span><br><span class=\"line\">BusName=org.freedesktop.PackageKit</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/lib/packagekit/packagekitd</span><br></pre></td></tr></table></div></figure>\n<p><em>系统每次开机时都会启动这个单元，执行 <code>/usr/lib/packagekit/packagekitd</code> 命令，而 <code>packagekit</code> 又将在运行期间调起APT下载需要更新的软件包。</em></p>\n<p>　　知道了这些问题自然也就解决了，禁用此服务: <code>systemctl disable packagekit.service</code>.<br>　　或者干脆删除 <code>/lib/systemd/system/</code> 目录下的 <code>packagekit.service</code> (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)</p>\n<p>　　在那之后，系统便再也没有执行过自动更新了。<br>　　<br>[附]</p>\n<blockquote>\n<p><span class=\"external-link\"><a href=\"https://github.com/raboof/nethogs\" target=\"_blank\" rel=\"noopener\">nethohs</a><i class=\"fa fa-external-link\"></i></span>是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。</p>\n</blockquote>\n<p>在 Debian/Ubuntu 下，使用<code>apt-get install nethogs</code> 安装它。<br>或编译安装:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz</span><br><span class=\"line\">tar xf v0.8.5.tar.gz </span><br><span class=\"line\">cd ./nethogs-0.8.5/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></div></figure>\n<p>如果编译失败需要安装依赖库</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libncurses5-dev libpcap-dev</span><br></pre></td></tr></table></div></figure>\n\n<p>使用</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs</span></span><br><span class=\"line\">NetHogs version 0.8.5-2+b1</span><br><span class=\"line\">PID  USER    PROGRAM                   DEV  SENT      RECEIVED  </span><br><span class=\"line\">2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec</span><br><span class=\"line\">1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec</span><br><span class=\"line\">?    root   unknown TCP                     0.000   0.000 KB/sec</span><br><span class=\"line\"></span><br><span class=\"line\">  TOTAL                                     0.480       0.917 KB/se</span><br></pre></td></tr></table></div></figure>\n\n<p>指定网卡</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs wlan0 <span class=\"comment\"># 监听wlan0</span></span></span><br><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -a    <span class=\"comment\"># 监听所有网卡</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新频率 -d seconds (默认为1)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -d 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新次数 -c number (默认不限)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -c 10</span></span><br></pre></td></tr></table></div></figure>\n\n<p>交互模式<br>在进入 nethogs 之后，可以使用如下的交互命令:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q: 退出</span><br><span class=\"line\">s: 按照发送流量排序</span><br><span class=\"line\">r: 按照流量排序</span><br><span class=\"line\">m: 修改网速单位 (KB, B, MB) and KB/s</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。</p>\n<p>　　首先我利用一款名为<code>nethogs</code>的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。</p>\n<p>APT关于自动更新的配置文件位于”/etc/apt/apt.conf.d/20auto-upgrades”, 将其中的</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"1\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"1\";</span><br></pre></td></tr></table></div></figure>\n<p>更改为</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"0\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"0\";</span><br></pre></td></tr></table></div></figure>\n<p>其中</p>\n<ul>\n<li>APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。</li>\n<li>APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。</li>\n</ul>\n<p>　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 <code>packagekit</code> 的父进程，我查了一下 <code>packagekit</code> 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。</p>\n<p>　　我的系统默认在开机时启动packgekit服务，查看 <code>packagekit</code> 的启动单元:<br><code>cat /lib/systemd/system/packagekit.service</code></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=PackageKit Daemon</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> PK does not know how to <span class=\"keyword\">do</span> anything on ostree-managed systems;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> currently the design is to have dedicated daemons like</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> eos-updater and rpm-ostree, and gnome-software talks to those.</span></span><br><span class=\"line\">ConditionPathExists=!/run/ostree-booted</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=dbus</span><br><span class=\"line\">BusName=org.freedesktop.PackageKit</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/lib/packagekit/packagekitd</span><br></pre></td></tr></table></div></figure>\n<p><em>系统每次开机时都会启动这个单元，执行 <code>/usr/lib/packagekit/packagekitd</code> 命令，而 <code>packagekit</code> 又将在运行期间调起APT下载需要更新的软件包。</em></p>\n<p>　　知道了这些问题自然也就解决了，禁用此服务: <code>systemctl disable packagekit.service</code>.<br>　　或者干脆删除 <code>/lib/systemd/system/</code> 目录下的 <code>packagekit.service</code> (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)</p>\n<p>　　在那之后，系统便再也没有执行过自动更新了。<br>　　<br>[附]</p>\n<blockquote>\n<p><span class=\"external-link\"><a href=\"https://github.com/raboof/nethogs\" target=\"_blank\" rel=\"noopener\">nethohs</a><i class=\"fa fa-external-link\"></i></span>是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。</p>\n</blockquote>\n<p>在 Debian/Ubuntu 下，使用<code>apt-get install nethogs</code> 安装它。<br>或编译安装:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz</span><br><span class=\"line\">tar xf v0.8.5.tar.gz </span><br><span class=\"line\">cd ./nethogs-0.8.5/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></div></figure>\n<p>如果编译失败需要安装依赖库</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libncurses5-dev libpcap-dev</span><br></pre></td></tr></table></div></figure>\n\n<p>使用</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs</span></span><br><span class=\"line\">NetHogs version 0.8.5-2+b1</span><br><span class=\"line\">PID  USER    PROGRAM                   DEV  SENT      RECEIVED  </span><br><span class=\"line\">2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec</span><br><span class=\"line\">1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec</span><br><span class=\"line\">?    root   unknown TCP                     0.000   0.000 KB/sec</span><br><span class=\"line\"></span><br><span class=\"line\">  TOTAL                                     0.480       0.917 KB/se</span><br></pre></td></tr></table></div></figure>\n\n<p>指定网卡</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs wlan0 <span class=\"comment\"># 监听wlan0</span></span></span><br><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -a    <span class=\"comment\"># 监听所有网卡</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新频率 -d seconds (默认为1)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -d 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新次数 -c number (默认不限)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -c 10</span></span><br></pre></td></tr></table></div></figure>\n\n<p>交互模式<br>在进入 nethogs 之后，可以使用如下的交互命令:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q: 退出</span><br><span class=\"line\">s: 按照发送流量排序</span><br><span class=\"line\">r: 按照流量排序</span><br><span class=\"line\">m: 修改网速单位 (KB, B, MB) and KB/s</span><br></pre></td></tr></table></div></figure>"},{"title":"C++ 标准线程库","date":"2019-11-25T07:50:29.000Z","reward":true,"_content":"\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","source":"_posts/C++标准线程库.md","raw":"---\ntitle: C++ 标准线程库\ndate: 2019-11-25 15:50:29\ntags: C++\nreward: true\npermalink: 1\ncategories: 编程语言\n---\n\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","slug":"1","published":1,"updated":"2019-11-26T14:59:53.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3sv1tk20004p7fw1llr9jel","content":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"看懂了《让子弹飞》就理解了毛泽东和文革(转载)","date":"2019-12-05T15:08:41.000Z","reward":true,"_content":"\n　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性......我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了......现在太多的恩怨，对他，会扭曲了他的精神。”\n\n　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙...马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套...上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻...\n\n　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！\n\n　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路...\n\n　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！\n\n　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一...\n\n　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）\n\n　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的...\n\n　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！\n\n　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……\n\n　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！\n\n　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！\n\n　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——\n　　张麻子问众人：“不跟我回山里了？”\n　　兄弟们道：“你腿脚都不利落了，还回山里啊。”\n　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”\n　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”\n　　张不甘心有问到：“和我在一起不高心吗？”\n　　众人道：“高兴，但不轻松、不轻松……”\n\n　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！\n\n　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！\n\n　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……\n\n　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——\n\n　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！\n\n　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:\n　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服\n过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。\n\n　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。\n\n　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。\n\n　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。\n\n　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。\n\n　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？\n\n　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”\n\n　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。\n\n　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……\n\n　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。\n\n　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：\n\n　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……\n","source":"_posts/看懂了《让子弹飞》就理解了毛泽东和文革(转载).md","raw":"---\ntitle: 看懂了《让子弹飞》就理解了毛泽东和文革(转载)\ndate: 2019-12-05 23:08:41\ntags: 那年夏夜\nreward: true\npermalink: 3\ncategories: 转载\n---\n\n　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性......我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了......现在太多的恩怨，对他，会扭曲了他的精神。”\n\n　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙...马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套...上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻...\n\n　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！\n\n　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路...\n\n　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！\n\n　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一...\n\n　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）\n\n　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的...\n\n　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！\n\n　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……\n\n　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！\n\n　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！\n\n　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——\n　　张麻子问众人：“不跟我回山里了？”\n　　兄弟们道：“你腿脚都不利落了，还回山里啊。”\n　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”\n　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”\n　　张不甘心有问到：“和我在一起不高心吗？”\n　　众人道：“高兴，但不轻松、不轻松……”\n\n　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！\n\n　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！\n\n　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……\n\n　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——\n\n　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！\n\n　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:\n　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服\n过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。\n\n　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。\n\n　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。\n\n　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。\n\n　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。\n\n　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？\n\n　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”\n\n　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。\n\n　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……\n\n　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。\n\n　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：\n\n　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……\n","slug":"3","published":1,"updated":"2019-12-05T15:22:08.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3svcjj30000bdfw83r23gcn","content":"<p>　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性……我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了……现在太多的恩怨，对他，会扭曲了他的精神。”</p>\n<p>　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙…马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套…上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻…</p>\n<p>　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！</p>\n<p>　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路…</p>\n<p>　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！</p>\n<p>　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一…</p>\n<p>　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）</p>\n<p>　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的…</p>\n<p>　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！</p>\n<p>　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……</p>\n<p>　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！</p>\n<p>　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！</p>\n<p>　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——<br>　　张麻子问众人：“不跟我回山里了？”<br>　　兄弟们道：“你腿脚都不利落了，还回山里啊。”<br>　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”<br>　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”<br>　　张不甘心有问到：“和我在一起不高心吗？”<br>　　众人道：“高兴，但不轻松、不轻松……”</p>\n<p>　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！</p>\n<p>　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！</p>\n<p>　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……</p>\n<p>　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——</p>\n<p>　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！</p>\n<p>　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:<br>　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服<br>过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。</p>\n<p>　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？</p>\n<p>　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”</p>\n<p>　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。</p>\n<p>　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……</p>\n<p>　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。</p>\n<p>　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：</p>\n<p>　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性……我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了……现在太多的恩怨，对他，会扭曲了他的精神。”</p>\n<p>　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙…马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套…上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻…</p>\n<p>　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！</p>\n<p>　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路…</p>\n<p>　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！</p>\n<p>　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一…</p>\n<p>　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）</p>\n<p>　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的…</p>\n<p>　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！</p>\n<p>　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……</p>\n<p>　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！</p>\n<p>　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！</p>\n<p>　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——<br>　　张麻子问众人：“不跟我回山里了？”<br>　　兄弟们道：“你腿脚都不利落了，还回山里啊。”<br>　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”<br>　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”<br>　　张不甘心有问到：“和我在一起不高心吗？”<br>　　众人道：“高兴，但不轻松、不轻松……”</p>\n<p>　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！</p>\n<p>　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！</p>\n<p>　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……</p>\n<p>　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——</p>\n<p>　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！</p>\n<p>　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:<br>　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服<br>过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。</p>\n<p>　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？</p>\n<p>　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”</p>\n<p>　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。</p>\n<p>　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……</p>\n<p>　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。</p>\n<p>　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：</p>\n<p>　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3sv1tjz0002p7fwee849we6","category_id":"ck3sv1tk40005p7fwa6eahseu","_id":"ck3sv1tkb000ap7fwgpy43hkc"},{"post_id":"ck3sv1tk20004p7fw1llr9jel","category_id":"ck3sv1tk80007p7fw3dja8vdd","_id":"ck3sv1tkc000cp7fwcxsug4vz"},{"post_id":"ck3svcjj30000bdfw83r23gcn","category_id":"ck3svcjj90001bdfw6g7t82jl","_id":"ck3svcjjg0004bdfw7qdw7cse"}],"PostTag":[{"post_id":"ck3sv1tjz0002p7fwee849we6","tag_id":"ck3sv1tk60006p7fw5grj9bjc","_id":"ck3sv1tk90009p7fw41npadf8"},{"post_id":"ck3sv1tk20004p7fw1llr9jel","tag_id":"ck3sv1tk80008p7fwc66dacf7","_id":"ck3sv1tkb000bp7fwbon77d9i"},{"post_id":"ck3svcjj30000bdfw83r23gcn","tag_id":"ck3svcjje0002bdfwf7v17jcm","_id":"ck3svcjjg0003bdfwbwwd6927"}],"Tag":[{"name":"Linux","_id":"ck3sv1tk60006p7fw5grj9bjc"},{"name":"C++","_id":"ck3sv1tk80008p7fwc66dacf7"},{"name":"那年夏夜","_id":"ck3svcjje0002bdfwf7v17jcm"}]}}