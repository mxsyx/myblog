{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/assets/images/bg.jpg","path":"assets/images/bg.jpg","modified":1,"renderable":0},{"_id":"source/assets/images/favicon-16x16.png","path":"assets/images/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/assets/images/favicon-32x32.png","path":"assets/images/favicon-32x32.png","modified":1,"renderable":0},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/assets/images/00tx.jpg","path":"assets/images/00tx.jpg","modified":1,"renderable":0},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/logo-stun.svg","path":"images/icons/logo-stun.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/stun/.commitlintrc.js","hash":"b71d539d172ab29f511d632b42c36f8da5401810","modified":1574683579173},{"_id":"themes/stun/.cz-config.js","hash":"4fd1999ebda9b42993d421af0d4058984ca250d7","modified":1574683579173},{"_id":"themes/stun/.editorconfig","hash":"3036325288c2bdf484691e761250264acdf9916c","modified":1574683579173},{"_id":"themes/stun/.eslintignore","hash":"b3798fe42f1a6b0fd01b7c27ce38ac7810272965","modified":1574683579173},{"_id":"themes/stun/.eslintrc","hash":"7381e731aa924780d339abaf6621aad98cd7ca3d","modified":1574683579173},{"_id":"themes/stun/.gitignore","hash":"90e5fbffa0b4fc94ca2abdccaa9e5cb16a67fc51","modified":1574683579173},{"_id":"themes/stun/.prettierrc","hash":"c41465d937c3d20898c3f3dd551b165ffdfbb83e","modified":1574683579173},{"_id":"themes/stun/.stylintrc","hash":"3305c42a95c986341d7c7dd03ed9f37a42da343c","modified":1574683579173},{"_id":"themes/stun/.travis.yml","hash":"d5b940a8229391468ad5edaec1ec32d6a9b288f6","modified":1574683579173},{"_id":"themes/stun/CHANGELOG.md","hash":"70c2b069b7fc845def543c3e676077f519a02efe","modified":1574683579173},{"_id":"themes/stun/FAQ.md","hash":"836b04216a560c4e0fa278f78a1e8d89ba33b0fe","modified":1574683579173},{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1574683579173},{"_id":"themes/stun/README.md","hash":"89e78a952439afe249fe37e55681271347a313d1","modified":1574683579173},{"_id":"themes/stun/README_en_US.md","hash":"32075ffe1f1f9cf26c0d773045bd655991db3c63","modified":1574683579173},{"_id":"themes/stun/_config.yml","hash":"77dfbdca9011f901753f915cd5d2c8d497323125","modified":1574758235982},{"_id":"themes/stun/package.json","hash":"84c541c754ef20b9286c723bf5aeba46a9d6ee65","modified":1574683579177},{"_id":"source/_posts/C++标准线程库.md","hash":"91bfa744f1f538689d0030c78f03ccb1ea68b381","modified":1574756663622},{"_id":"source/categories/index.md","hash":"acf1409da72dc78c587176b3aaf41575160ed26b","modified":1574756815878},{"_id":"source/tags/index.md","hash":"b0a2aa942a48d8c0d51e1283f96cd31d31224f1e","modified":1574756812450},{"_id":"themes/stun/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1574683579169},{"_id":"themes/stun/.git/config","hash":"85fe007126292e211da62377c7853371ac93402f","modified":1574683579169},{"_id":"themes/stun/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1574683556485},{"_id":"themes/stun/.git/index","hash":"9bd4aa07b378b00b8c349d67e59b45560b0dce4a","modified":1574683579181},{"_id":"themes/stun/.git/packed-refs","hash":"24ced750ac5669acfedec2ed7db5ef5329f63aba","modified":1574683579169},{"_id":"themes/stun/.github/ISSUE_TEMPLATE.md","hash":"715fc0b0dd525c92ba22f7de0cde2690897e9c4b","modified":1574683579173},{"_id":"themes/stun/.vscode/settings.json","hash":"1aef4211e91d3dfa8e8b5a75068274bf977f561c","modified":1574683579173},{"_id":"themes/stun/docs/README.md","hash":"3772f09fe926b9d165132e51b8b239fe25d9d73b","modified":1574683579173},{"_id":"themes/stun/languages/en.yml","hash":"cf8264da5259914723e0a017c0c92a92c3e15333","modified":1574683579177},{"_id":"themes/stun/languages/zh-CN.yml","hash":"f28ea2577a45a79c739dc40e1b473a7c981d43a9","modified":1574757960270},{"_id":"themes/stun/layout/_layout.pug","hash":"c30cdb7b93c3cbd3bfbac61d6ad5e93ad90cf840","modified":1574683579177},{"_id":"themes/stun/layout/archive.pug","hash":"9559118e9f0ec1acb8698b4306cc4dfe80f64cc2","modified":1574683579177},{"_id":"themes/stun/layout/category.pug","hash":"7bb46b10497c7612fc54f236be34fdc47e57ebb8","modified":1574683579177},{"_id":"themes/stun/layout/index.pug","hash":"5ac5d46f04e2077d7ca46b14672b817bced2648d","modified":1574683579177},{"_id":"themes/stun/layout/page.pug","hash":"b094fe48d80351fdc350f36343f1dfbadbc1aced","modified":1574683579177},{"_id":"themes/stun/layout/post.pug","hash":"8d7c9ebfdd3bd421a2fdb51a5d104f5f1dd61e18","modified":1574683579177},{"_id":"themes/stun/layout/tag.pug","hash":"6f1b9eaa41784417f720a70fbbc4db098da88255","modified":1574683579177},{"_id":"themes/stun/scripts/engine.js","hash":"bcf01de9714fb52c3ca877796d9dd7a9ba876777","modified":1574683579177},{"_id":"themes/stun/scripts/merge-config.js","hash":"48c2828c1f42dd269e90d654e41ed5357b411d21","modified":1574683579177},{"_id":"source/assets/images/bg.jpg","hash":"c26df46935a330740f562b773f94fdf8a8415691","modified":1574755274062},{"_id":"source/assets/images/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574683579181},{"_id":"source/assets/images/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574683579181},{"_id":"themes/stun/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1574683556485},{"_id":"themes/stun/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1574683556485},{"_id":"themes/stun/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1574683556485},{"_id":"themes/stun/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1574683556485},{"_id":"themes/stun/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1574683556485},{"_id":"themes/stun/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1574683556485},{"_id":"themes/stun/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1574683556485},{"_id":"themes/stun/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1574683556485},{"_id":"themes/stun/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1574683556485},{"_id":"themes/stun/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1574683556485},{"_id":"themes/stun/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1574683556485},{"_id":"themes/stun/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1574683556485},{"_id":"themes/stun/.git/logs/HEAD","hash":"7fa028099e5245194a52ccca9ea99479f1886577","modified":1574683579169},{"_id":"themes/stun/docs/.vuepress/config.js","hash":"5da190af3f543e0be95e5e39823eaab68b494e99","modified":1574683579173},{"_id":"themes/stun/docs/advanced/advanced-setting.md","hash":"e30dfd24cadcd7bb0257e845c9b8d62f1815c1cf","modified":1574683579173},{"_id":"themes/stun/docs/advanced/assist.md","hash":"65cbe89bb3ae0ddb161f0fae50c799d5a15d9b6b","modified":1574683579173},{"_id":"themes/stun/docs/advanced/optimize.md","hash":"0d45bbc7be20642f59f4d47110029c4511f5b7dc","modified":1574683579173},{"_id":"themes/stun/docs/advanced/third-part.md","hash":"815563ea213c1fde294c9e4543cb4f98c96ac4a1","modified":1574683579173},{"_id":"themes/stun/docs/guide/primary-setting.md","hash":"f94e8e33ece158d085b1ac1f8ea458c378163f46","modified":1574683579173},{"_id":"themes/stun/docs/guide/quick-start.md","hash":"4090974b9b3925d95f952a521ba24999332e0f8b","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/README.md","hash":"91253b9fbb2255c80980175c7ee79140fde6a18c","modified":1574683579173},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"e14cd77ffad4064b3b61a50b08208abe2ddff321","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"cc415d0b24413a952e507c47b6f34a3ebf0a7487","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8e75490fe98ef767b7fe221ded4e1eaee42af411","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/post-timeline.pug","hash":"5a51ae94bb55b9051737c9dc0a59424cfe75a6e4","modified":1574683579177},{"_id":"themes/stun/layout/_partials/config.pug","hash":"9ef37494e022f817a94899c86ca7153b83fd731d","modified":1574683579177},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"0f1ab8e558204f233f9382579fa5f74fddca0bd2","modified":1574683579177},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"058de00c983f9e00ef3e08ac2362dac2ad6650bc","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"f34755ac6011c59c796846a95f224d043a121102","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"f501bd611dcc48bdf9b1f989dafef4a477c894c8","modified":1574683579177},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"25cd4e42bc035a0bf186ba40f77aa779b01cfad8","modified":1574683579177},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"f2d7d8f2f82e81ac04862aff865ec7fde7384e00","modified":1574683579177},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"06aa76a85adf6e43350534507ed46a105728ee27","modified":1574683579177},{"_id":"themes/stun/scripts/filters/resize-img.js","hash":"b49da7c91e0ecab1bf14494c6a47afaeab22cdb6","modified":1574683579177},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"6435099bf6d09d4c416c3323219e757cba4da73d","modified":1574683579177},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"96f83c84b5c10ccff0d41b7610599fdfa191bff6","modified":1574683579177},{"_id":"themes/stun/scripts/tags/friends.js","hash":"5ec0a0d826add4390ba52755663986e6b9092109","modified":1574683579177},{"_id":"themes/stun/scripts/tags/note.js","hash":"476b838998f570ffb4a6ec707ee3d8daa57ca5b8","modified":1574683579177},{"_id":"themes/stun/scripts/tags/table.js","hash":"796a7fd93e2fe88991c5178e18a8a9143f7e5d53","modified":1574683579177},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1574754800158},{"_id":"themes/stun/source/images/algolia.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1574683579181},{"_id":"themes/stun/source/images/avatar.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1574683579181},{"_id":"themes/stun/source/images/loading.svg","hash":"6a8b47b10430b0df8be6b70e7915961462464c32","modified":1574683579181},{"_id":"themes/stun/source/js/header.js","hash":"e5f141bdfbfb2496fc14df58d56a3f2e405a9e4a","modified":1574683579181},{"_id":"themes/stun/source/js/scroll.js","hash":"37c9a663d31b736a26f13b62911b0ed6ea5f4f28","modified":1574683579181},{"_id":"themes/stun/source/js/sidebar.js","hash":"6463df06250ebc0aa2c38625c5ff76575e6dc145","modified":1574683579181},{"_id":"themes/stun/source/js/stun-boot.js","hash":"a20bbfa85be4368cad46f5e0a03b54706cff40f5","modified":1574683579181},{"_id":"themes/stun/source/js/utils.js","hash":"ee941d4230d38351f814cd7563148b5a90125b36","modified":1574683579181},{"_id":"source/assets/images/00tx.jpg","hash":"da49633f8cfbf4823d1bdb4b22e7da382a8156a4","modified":1548043728000},{"_id":"themes/stun/.git/refs/heads/master","hash":"67f5ec0726a8773455ca8e1110fb065a82b77fdc","modified":1574683579169},{"_id":"themes/stun/docs/.vuepress/public/logo.png","hash":"55ddfe951fe8d8c7491cc72572933c964c44cad6","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/manifest.json","hash":"e730aa0b537f8ff15d705a11022448b32bef7b67","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/advanced/advanced-setting.md","hash":"73ef4fdbeac63062fbdecbc8bf692d59c67c9cb4","modified":1574739459735},{"_id":"themes/stun/docs/zh-CN/advanced/assist.md","hash":"62513e0501d49ddad47d652d71155a142b02d421","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/advanced/optimize.md","hash":"6bd6cd4ea9c22f12b5bea2f959eb12ee2cbd3a18","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/advanced/third-part.md","hash":"2a1e5f70a1d35176c3d908a103934d6c69dec617","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/guide/primary-setting.md","hash":"bef28e2fb460f487f5c97daa8663ccb7ece90225","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/guide/quick-start.md","hash":"8b8d6d42b353c519104f3adc3acdad8741c39b87","modified":1574683579177},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"e3174ad809d308328cc65bad914fa1c7cb67a781","modified":1574683579177},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"5dada662a32fb492fafb892039cd76591c75fcfd","modified":1574683579177},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"6d390cce4deb2043830bb31883250a8418da4d20","modified":1574683579177},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"c96da7d5420bc77cee10b16be277af64b45f7b6b","modified":1574683579177},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"0aedb786145205b7f06aad5fa9ae002309eaf3ef","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"a147632c51b2d29f6fbcc471bb00d0acac2b5f54","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"8e46a49b0012598e679158507bd56b6ee43aa248","modified":1574683579177},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"8412ca45bc65d019811f0c1318216bc3e8570187","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"fa26e2cfec7a150cbd7186b00d8ee8d3ada099d6","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"cbda7755e48aacf03fe292b47c43b1737e6a01ce","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"cf7eb5ab4af863a0115dcc338316d2f837c02b88","modified":1574737976543},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"e67010da58321b170e435600d84107ac45d43343","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/pagination.pug","hash":"840c87cc0313ac196dc9485dfa52baad40fa6883","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c6ef7ad1862dd1e974b94a0dea46028e945a16a9","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"54a28818b72049ef5a40f003327980ad1d8d0047","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"859b8d21b3706843bb6524ee504de1a2741264ec","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"9729e8fd70e52e2400bf27a46a1ad1ec57190f1f","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"264e608d3d484ea7090019749b8579473e4978c8","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"72bcfb8a331cd90e6078a7498af0c1ee28cfdead","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"a24f48c7f11394b326dad461cdabb05c7e865953","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"6734598670b04ce0b8be6e29987b3d5e4a624259","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"245996057e1c1b2429c0dbbc225cc8a1d512393a","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"63a6b9ff12e7c93274bde68e7a9ff04d90a5ac11","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"f840dde52e1ed2de54e64f13b7449d0b91106df1","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"2c501a7a05270da16521bf3e0bdb54bbbb4c01c6","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"9e4157d8f5f8d30cac74315aeb927a4236d6407c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"2ef20ef49b56b5af3a38abd5d3f00d72e6b1c141","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"25fb884962c5470ff191e1439631a96e6452fe08","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"a4c1f1c3c99bb2c775b937bda6b9a0e80daa3da5","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"13c52ed7e8a822c98d8604145cc8a5baaaa4354f","modified":1574683579177},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1574683579181},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"4164575e6603918c3613d1aac259744ff22e9a2a","modified":1574683579181},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"0d1adc70250941074c742f94f7801b3b43a7f1db","modified":1574755951018},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"9636f5b90da22e48fc952f4ac49339d076570937","modified":1574683579181},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"33b7522c1c1492df611e5dc18ab6fa14a7c61a57","modified":1574683579181},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","hash":"c7550f6349ec41c218b681c27cb878c255d8d041","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","hash":"88785838fd99fa4960ae204b6941eeed6ac29a4e","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574683579181},{"_id":"themes/stun/source/images/icons/logo-stun.svg","hash":"f76267c87f14a6469460f53f8af5f8fcd1edb7eb","modified":1574683579181},{"_id":"themes/stun/.git/logs/refs/heads/master","hash":"7fa028099e5245194a52ccca9ea99479f1886577","modified":1574683579169},{"_id":"themes/stun/.git/objects/pack/pack-17b1ccb79e91c0f716bc12bbf425dbc259de0931.idx","hash":"9404bc4719e90a3871a758d589191a15ef9871ac","modified":1574683579045},{"_id":"themes/stun/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1574683579169},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-192x192.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-512x512.png","hash":"abfb5db9ee449bd12a01f2b4376ea6b461c47135","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-120x120.png","hash":"2c0b3a3466b805ec623729a5b441856babf63d33","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-152x152.png","hash":"121195939946b3f8f3fffa9687dcc50bc02dbbfa","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-180x180.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-60x60.png","hash":"73d7f206772c1cd53392e3733cd801060b59a82a","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-76x76.png","hash":"c60f4b519f7a7afa79cef37a7cc4008b164e53cd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-16x16.png","hash":"0a9004baf650a72d447c822d44cecce69394cd89","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-32x32.png","hash":"2bfdd221b5948f22204844100fe643e89b83eeb7","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/msapplication-icon-144x144.png","hash":"c2a8dd8156416f7b3f830aeef661a6cd8aeb7b22","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/mstile-150x150.png","hash":"7ef42fd46d8aae3cb8660f42733ec9ecf6a5c616","modified":1574683579173},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"a54720db94121efd1a34ac88d344197c8206837e","modified":1574683579177},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1574683579181},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"b8e0dbc9a93d28f338036126fe236e958289808f","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"f8023efaa8070ffead4782160a9e0185261750b4","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"7c56b41a5ce38c9009ead11bc6d30f27c6faca05","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"6aae948e3da892f05520ff7e12ce34ba5d785643","modified":1574683579181},{"_id":"themes/stun/.git/logs/refs/remotes/origin/HEAD","hash":"7fa028099e5245194a52ccca9ea99479f1886577","modified":1574683579169},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"33798f75a60178aff9786e6f2d973e35af51f430","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"b47897cab855fa56428c393ba4c9f71de57b69e1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"15b757937ab39cd711d088c2a7e55bc4707b9ba1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"d78ff14befde3d437149c920bed173b4107e2f80","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"dcfa7ab739774bbcb39c5ee3c477dd280bd9c733","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"5b01f17df157f0718f962decabe636b36f898148","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"d5c8e5954210c19af712e1dd2992bb69023b51c3","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"abda30b143a60faef6827892afa47c3ad96d0a5b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"e2ce1e41ddac3772eab674cb2259d5ed1cc1e7d9","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"91fdf9e2e588f41e7818abb885c6433a3dc37122","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"92f37483f28bb371d60c66263e40929274c610fb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"fc6867eeeb9b0011d8ad7ba9bdef387e7e8ead3c","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"1d8c1fd9f63e96a1ff8909c7ae42a5f33b1bee0a","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-timeline.styl","hash":"abaebea0e3a83a8e2611840fb46f2a91ba7a2b30","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"f377cb8a9b1ab729d22e4656ee9a31e96780949b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"9c297104a3185668b5edd3e2a8b69dec9cf4cba4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"08cce8268cdd604cdaf643ba64c71bc29052bb31","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"aa149efb2244066ad594351837d2c5ab64633116","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"40804aab280566879620b4acef4062608990aacb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"e09369d520442b34f115c1907cc0e5872d98843e","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"df0c6ee8c38ebe9254db5c606a8395a7f38cccc2","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"8d462affa1e594cc939710cb96bb564fc9af6548","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"d4dadbc2b78c87649f84bf8bc1eb8363f4748881","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/external-link.styl","hash":"1fa4d38f0c3467eb46941b97050e5d6dddadfee2","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"b478e892e48bbc2179c99d875930ac0eb92a5916","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"372836c3e0e64aa62ed7b794921280d810641aed","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"07ec6c1c9c716a3d92e931cd23b1d9cd07325f7b","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"fe0c497bf842aba4e887e46d369073ebf1d8a324","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/pagination.styl","hash":"d896638f0fb5acb3338748ca19557a49479fcacc","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"51a7f578f384f48c2562b9b55916efcb819e1e25","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"7cb7f0629a2f91dfb5547e356f0036fed102c183","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"085c024604447a213bf5634de1b7acf921dd0d75","modified":1574683579181},{"_id":"themes/stun/.git/objects/pack/pack-17b1ccb79e91c0f716bc12bbf425dbc259de0931.pack","hash":"86a84643c1e7b9abd29f533606ce9febf9fdb3c1","modified":1574683579041},{"_id":"public/atom.xml","hash":"bf58d38405fd1df7fff75d6bad7e844104b848c0","modified":1574758240518},{"_id":"public/search.json","hash":"e44c8d748e76e385546426316f431baa1e0ceb42","modified":1574758240518},{"_id":"public/categories/index.html","hash":"d186512b4d075cf8b2db3ff6a630a29f14aa05bd","modified":1574758240518},{"_id":"public/tags/index.html","hash":"512362f7f6a53444a0341682db3e32241082c22b","modified":1574758240518},{"_id":"public/archives/1/index.html","hash":"2188cc82407bda28344819189bba0be305aa5d24","modified":1574758240518},{"_id":"public/archives/index.html","hash":"1035fe1a38b96302238b75b518eb6112921b6489","modified":1574758240518},{"_id":"public/archives/2019/index.html","hash":"1035fe1a38b96302238b75b518eb6112921b6489","modified":1574758240518},{"_id":"public/archives/2019/11/index.html","hash":"1035fe1a38b96302238b75b518eb6112921b6489","modified":1574758240518},{"_id":"public/categories/基础知识/index.html","hash":"24f825d0ebfab6a2174d49d8c353244214e5c391","modified":1574758240518},{"_id":"public/index.html","hash":"3a1b8fc9a1605a7eb075b0ac0239dc46155b1e32","modified":1574758240518},{"_id":"public/tags/测试/index.html","hash":"07a33d5b69e40311d64c76c6e9ee9ea5fa14c604","modified":1574758240518},{"_id":"public/assets/images/bg.jpg","hash":"c26df46935a330740f562b773f94fdf8a8415691","modified":1574758240518},{"_id":"public/assets/images/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574758240518},{"_id":"public/assets/images/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574758240518},{"_id":"public/images/algolia.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1574758240518},{"_id":"public/images/avatar.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574758240518},{"_id":"public/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1574758240518},{"_id":"public/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1574758240518},{"_id":"public/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1574758240518},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1574758240518},{"_id":"public/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1574758240518},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1574758240518},{"_id":"public/images/loading.svg","hash":"6a8b47b10430b0df8be6b70e7915961462464c32","modified":1574758240518},{"_id":"public/images/icons/apple-touch-icon.png","hash":"c7550f6349ec41c218b681c27cb878c255d8d041","modified":1574758240518},{"_id":"public/images/icons/favicon-144x144.png","hash":"88785838fd99fa4960ae204b6941eeed6ac29a4e","modified":1574758240518},{"_id":"public/images/icons/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574758240518},{"_id":"public/images/icons/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574758240518},{"_id":"public/images/icons/logo-stun.svg","hash":"f76267c87f14a6469460f53f8af5f8fcd1edb7eb","modified":1574758240518},{"_id":"public/assets/images/00tx.jpg","hash":"da49633f8cfbf4823d1bdb4b22e7da382a8156a4","modified":1574758240518},{"_id":"public/js/header.js","hash":"e5f141bdfbfb2496fc14df58d56a3f2e405a9e4a","modified":1574758240518},{"_id":"public/js/scroll.js","hash":"37c9a663d31b736a26f13b62911b0ed6ea5f4f28","modified":1574758240518},{"_id":"public/js/sidebar.js","hash":"6463df06250ebc0aa2c38625c5ff76575e6dc145","modified":1574758240518},{"_id":"public/js/stun-boot.js","hash":"a20bbfa85be4368cad46f5e0a03b54706cff40f5","modified":1574758240518},{"_id":"public/js/utils.js","hash":"ee941d4230d38351f814cd7563148b5a90125b36","modified":1574758240518},{"_id":"public/css/index.css","hash":"febf50d8f46b0ebbb30b837abd1df9cf668c1cf2","modified":1574758240518}],"Category":[{"name":"基础知识","_id":"ck3fmebit0002rnfw9lpx3v4j"}],"Data":[],"Page":[{"title":"categories","date":"2019-11-25T13:53:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-25 21:53:04\ntype: \"categories\"\n---\n","updated":"2019-11-26T08:26:55.878Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck3fmebis0001rnfw6e4t0cxi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-11-25T13:55:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-25 21:55:19\ntype: \"tags\"\n---\n","updated":"2019-11-26T08:26:52.450Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3fmebj80006rnfwb80wdo78","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"测试","date":"2019-11-25T07:50:29.000Z","reward":true,"_content":"\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","source":"_posts/C++标准线程库.md","raw":"---\ntitle: 测试\ndate: 2019-11-25 15:50:29\ntags: 测试\nreward: true\npermalink: 1\ncategories: 基础知识\n---\n\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","slug":"1","published":1,"updated":"2019-11-26T08:24:23.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3fmebim0000rnfw2t53a87n","content":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3fmebim0000rnfw2t53a87n","category_id":"ck3fmebit0002rnfw9lpx3v4j","_id":"ck3fmebiw0005rnfw3bsr68bu"}],"PostTag":[{"post_id":"ck3fmebim0000rnfw2t53a87n","tag_id":"ck3fmebiv0003rnfw6l6l9wiv","_id":"ck3fmebiw0004rnfw22l8gs8h"}],"Tag":[{"name":"测试","_id":"ck3fmebiv0003rnfw6l6l9wiv"}]}}