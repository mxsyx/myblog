{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"source/assets/images/00tx.jpg","path":"assets/images/00tx.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/favicon-32x32.ico","path":"assets/images/favicon-32x32.ico","modified":0,"renderable":0},{"_id":"source/assets/images/bg.jpg","path":"assets/images/bg.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/favicon-16x16.ico","path":"assets/images/favicon-16x16.ico","modified":0,"renderable":0},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"source/assets/images/paycode/wxpay.png","path":"assets/images/paycode/wxpay.png","modified":0,"renderable":0},{"_id":"themes/stun/source/images/icons/logo-stun.svg","path":"images/icons/logo-stun.svg","modified":0,"renderable":1},{"_id":"source/assets/images/map/4/ar4-1.png","path":"assets/images/map/4/ar4-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/paycode/alipay.jpg","path":"assets/images/paycode/alipay.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/map/4/ar4-2.png","path":"assets/images/map/4/ar4-2.png","modified":0,"renderable":0},{"_id":"source/assets/images/map/4/ar4-3.png","path":"assets/images/map/4/ar4-3.png","modified":0,"renderable":0},{"_id":"source/assets/images/map/4/ar4-4.png","path":"assets/images/map/4/ar4-4.png","modified":0,"renderable":0},{"_id":"source/assets/images/map/4/ar4-5.png","path":"assets/images/map/4/ar4-5.png","modified":0,"renderable":0},{"_id":"source/assets/images/map/4/ar4-6.png","path":"assets/images/map/4/ar4-6.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/stun/_config.yml","hash":"67646bbe89a2aedb76c77a20bf285c21660eb496","modified":1575985810472},{"_id":"themes/stun/package.json","hash":"84c541c754ef20b9286c723bf5aeba46a9d6ee65","modified":1574683579177},{"_id":"source/_posts/Vue自适应高度的输入框.md","hash":"32d9dd1eb8bf5df0677eefaa3063033ef5797fce","modified":1576160302886},{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1574683579173},{"_id":"themes/stun/README.md","hash":"89e78a952439afe249fe37e55681271347a313d1","modified":1574683579173},{"_id":"source/_posts/bdtrans-一个命令行下的翻译工具.md","hash":"5a437ffa21d053f1255b416d634775602d75c69a","modified":1575984581636},{"_id":"source/_posts/C++标准线程库.md","hash":"0c391efd69532f5c93e97cd2b4ef02f7a0cd2fb7","modified":1575903082371},{"_id":"source/_posts/flex布局中flex-grow与flex-shrink的计算方式.md","hash":"64d3c5d4351e63cadd85eebc862396df9a11fb2b","modified":1576423095444},{"_id":"source/_posts/看懂了《让子弹飞》就理解了毛泽东和文革(转载).md","hash":"c7f8a3fc40e883a2f350d9788c124954575091ea","modified":1575984750728},{"_id":"source/_posts/拉勾网企业招聘信息分析报告.md","hash":"79477f27cf5c96bb7ae34a0d9a208b9a098e1710","modified":1575985253784},{"_id":"source/_posts/绕过校园网Web认证.md","hash":"69d391261a02f40f9edb0cf7acc058c4076986ec","modified":1575985037968},{"_id":"source/_posts/那年夏夜.md","hash":"e0d545eda78cf781a64c7c83958169ff2256b17d","modified":1575984819544},{"_id":"source/_posts/名言摘抄.md","hash":"5e2159f521ca653fc9eb4179a0048cad27b672a8","modified":1575984829532},{"_id":"source/_posts/解决Debina系统自动更新软件包的问题.md","hash":"5fee48c95cffd78a57a241514677811a57a94e90","modified":1575903106891},{"_id":"source/categories/index.md","hash":"a0c91a4666dd2689393d9f14edc9b01047d29458","modified":1574769507302},{"_id":"themes/stun/languages/en.yml","hash":"cf8264da5259914723e0a017c0c92a92c3e15333","modified":1574683579177},{"_id":"themes/stun/languages/zh-CN.yml","hash":"f28ea2577a45a79c739dc40e1b473a7c981d43a9","modified":1574769438710},{"_id":"themes/stun/layout/_layout.pug","hash":"c30cdb7b93c3cbd3bfbac61d6ad5e93ad90cf840","modified":1574683579177},{"_id":"themes/stun/layout/archive.pug","hash":"9559118e9f0ec1acb8698b4306cc4dfe80f64cc2","modified":1574683579177},{"_id":"themes/stun/layout/category.pug","hash":"7bb46b10497c7612fc54f236be34fdc47e57ebb8","modified":1574683579177},{"_id":"themes/stun/layout/index.pug","hash":"5ac5d46f04e2077d7ca46b14672b817bced2648d","modified":1574683579177},{"_id":"themes/stun/layout/page.pug","hash":"b094fe48d80351fdc350f36343f1dfbadbc1aced","modified":1574683579177},{"_id":"themes/stun/layout/post.pug","hash":"8d7c9ebfdd3bd421a2fdb51a5d104f5f1dd61e18","modified":1574683579177},{"_id":"themes/stun/layout/tag.pug","hash":"6f1b9eaa41784417f720a70fbbc4db098da88255","modified":1574683579177},{"_id":"themes/stun/scripts/engine.js","hash":"bcf01de9714fb52c3ca877796d9dd7a9ba876777","modified":1574683579177},{"_id":"themes/stun/scripts/merge-config.js","hash":"48c2828c1f42dd269e90d654e41ed5357b411d21","modified":1574683579177},{"_id":"source/about/index.md","hash":"4c2e4c68850d2e97deafdd2e42d8dc9bf862e05c","modified":1575902570347},{"_id":"themes/stun/docs/README.md","hash":"3772f09fe926b9d165132e51b8b239fe25d9d73b","modified":1574683579173},{"_id":"source/tags/index.md","hash":"88507f6d8e57212e83b94827d115f818f72bfce5","modified":1574769501274},{"_id":"themes/stun/docs/.vuepress/config.js","hash":"5da190af3f543e0be95e5e39823eaab68b494e99","modified":1574683579173},{"_id":"themes/stun/docs/advanced/advanced-setting.md","hash":"e30dfd24cadcd7bb0257e845c9b8d62f1815c1cf","modified":1574683579173},{"_id":"themes/stun/docs/advanced/assist.md","hash":"65cbe89bb3ae0ddb161f0fae50c799d5a15d9b6b","modified":1574683579173},{"_id":"themes/stun/docs/advanced/optimize.md","hash":"0d45bbc7be20642f59f4d47110029c4511f5b7dc","modified":1574683579173},{"_id":"themes/stun/docs/advanced/third-part.md","hash":"815563ea213c1fde294c9e4543cb4f98c96ac4a1","modified":1574683579173},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"e14cd77ffad4064b3b61a50b08208abe2ddff321","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"cc415d0b24413a952e507c47b6f34a3ebf0a7487","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8e75490fe98ef767b7fe221ded4e1eaee42af411","modified":1574683579177},{"_id":"themes/stun/layout/_mixins/post-timeline.pug","hash":"5a51ae94bb55b9051737c9dc0a59424cfe75a6e4","modified":1574683579177},{"_id":"themes/stun/layout/_partials/config.pug","hash":"9ef37494e022f817a94899c86ca7153b83fd731d","modified":1574683579177},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"0f1ab8e558204f233f9382579fa5f74fddca0bd2","modified":1574683579177},{"_id":"themes/stun/docs/guide/quick-start.md","hash":"4090974b9b3925d95f952a521ba24999332e0f8b","modified":1574683579173},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"058de00c983f9e00ef3e08ac2362dac2ad6650bc","modified":1574683579177},{"_id":"themes/stun/docs/guide/primary-setting.md","hash":"f94e8e33ece158d085b1ac1f8ea458c378163f46","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/README.md","hash":"91253b9fbb2255c80980175c7ee79140fde6a18c","modified":1574683579173},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"f34755ac6011c59c796846a95f224d043a121102","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"f501bd611dcc48bdf9b1f989dafef4a477c894c8","modified":1574683579177},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"25cd4e42bc035a0bf186ba40f77aa779b01cfad8","modified":1574683579177},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"f2d7d8f2f82e81ac04862aff865ec7fde7384e00","modified":1574683579177},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"6435099bf6d09d4c416c3323219e757cba4da73d","modified":1574683579177},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"06aa76a85adf6e43350534507ed46a105728ee27","modified":1574683579177},{"_id":"themes/stun/scripts/filters/resize-img.js","hash":"b49da7c91e0ecab1bf14494c6a47afaeab22cdb6","modified":1574683579177},{"_id":"themes/stun/scripts/tags/friends.js","hash":"5ec0a0d826add4390ba52755663986e6b9092109","modified":1574683579177},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"96f83c84b5c10ccff0d41b7610599fdfa191bff6","modified":1574683579177},{"_id":"themes/stun/scripts/tags/note.js","hash":"476b838998f570ffb4a6ec707ee3d8daa57ca5b8","modified":1574683579177},{"_id":"themes/stun/scripts/tags/table.js","hash":"796a7fd93e2fe88991c5178e18a8a9143f7e5d53","modified":1574683579177},{"_id":"themes/stun/source/images/algolia.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1574683579181},{"_id":"themes/stun/source/images/avatar.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1574683579181},{"_id":"themes/stun/source/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1574683579181},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1574754800158},{"_id":"themes/stun/source/images/loading.svg","hash":"6a8b47b10430b0df8be6b70e7915961462464c32","modified":1574683579181},{"_id":"themes/stun/source/js/scroll.js","hash":"37c9a663d31b736a26f13b62911b0ed6ea5f4f28","modified":1574683579181},{"_id":"themes/stun/source/js/sidebar.js","hash":"6463df06250ebc0aa2c38625c5ff76575e6dc145","modified":1574683579181},{"_id":"source/assets/images/00tx.jpg","hash":"da49633f8cfbf4823d1bdb4b22e7da382a8156a4","modified":1548043728000},{"_id":"source/assets/images/favicon-32x32.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1574780090550},{"_id":"source/assets/images/bg.jpg","hash":"c26df46935a330740f562b773f94fdf8a8415691","modified":1574755274062},{"_id":"source/assets/images/favicon-16x16.ico","hash":"6ed49a2d41a8851e1b0310db74d7b278a6d9f7d0","modified":1574780090550},{"_id":"themes/stun/source/js/stun-boot.js","hash":"a20bbfa85be4368cad46f5e0a03b54706cff40f5","modified":1574683579181},{"_id":"themes/stun/source/js/header.js","hash":"e5f141bdfbfb2496fc14df58d56a3f2e405a9e4a","modified":1574683579181},{"_id":"themes/stun/source/js/utils.js","hash":"ee941d4230d38351f814cd7563148b5a90125b36","modified":1574778979318},{"_id":"themes/stun/docs/.vuepress/public/logo.png","hash":"55ddfe951fe8d8c7491cc72572933c964c44cad6","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/manifest.json","hash":"e730aa0b537f8ff15d705a11022448b32bef7b67","modified":1574683579173},{"_id":"themes/stun/docs/zh-CN/advanced/advanced-setting.md","hash":"73ef4fdbeac63062fbdecbc8bf692d59c67c9cb4","modified":1574739459735},{"_id":"themes/stun/docs/zh-CN/advanced/optimize.md","hash":"6bd6cd4ea9c22f12b5bea2f959eb12ee2cbd3a18","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/advanced/assist.md","hash":"62513e0501d49ddad47d652d71155a142b02d421","modified":1574683579177},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"e3174ad809d308328cc65bad914fa1c7cb67a781","modified":1574683579177},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"5dada662a32fb492fafb892039cd76591c75fcfd","modified":1574775721406},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"04a6902aad8780133ba7ef36ef44a1db0d77c296","modified":1575985977980},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"0aedb786145205b7f06aad5fa9ae002309eaf3ef","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"a147632c51b2d29f6fbcc471bb00d0acac2b5f54","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"8e46a49b0012598e679158507bd56b6ee43aa248","modified":1574683579177},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"c96da7d5420bc77cee10b16be277af64b45f7b6b","modified":1574772716014},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"8412ca45bc65d019811f0c1318216bc3e8570187","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"fa26e2cfec7a150cbd7186b00d8ee8d3ada099d6","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"cbda7755e48aacf03fe292b47c43b1737e6a01ce","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"cf7eb5ab4af863a0115dcc338316d2f837c02b88","modified":1574737976543},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"e67010da58321b170e435600d84107ac45d43343","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/pagination.pug","hash":"840c87cc0313ac196dc9485dfa52baad40fa6883","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c6ef7ad1862dd1e974b94a0dea46028e945a16a9","modified":1574683579177},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"54a28818b72049ef5a40f003327980ad1d8d0047","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"859b8d21b3706843bb6524ee504de1a2741264ec","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"264e608d3d484ea7090019749b8579473e4978c8","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"72bcfb8a331cd90e6078a7498af0c1ee28cfdead","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"6734598670b04ce0b8be6e29987b3d5e4a624259","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"9729e8fd70e52e2400bf27a46a1ad1ec57190f1f","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"245996057e1c1b2429c0dbbc225cc8a1d512393a","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"f840dde52e1ed2de54e64f13b7449d0b91106df1","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"2c501a7a05270da16521bf3e0bdb54bbbb4c01c6","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"a24f48c7f11394b326dad461cdabb05c7e865953","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"9e4157d8f5f8d30cac74315aeb927a4236d6407c","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"2ef20ef49b56b5af3a38abd5d3f00d72e6b1c141","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"25fb884962c5470ff191e1439631a96e6452fe08","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"a4c1f1c3c99bb2c775b937bda6b9a0e80daa3da5","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/advanced/third-part.md","hash":"2a1e5f70a1d35176c3d908a103934d6c69dec617","modified":1574683579177},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"13c52ed7e8a822c98d8604145cc8a5baaaa4354f","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/guide/primary-setting.md","hash":"bef28e2fb460f487f5c97daa8663ccb7ece90225","modified":1574683579177},{"_id":"themes/stun/docs/zh-CN/guide/quick-start.md","hash":"8b8d6d42b353c519104f3adc3acdad8741c39b87","modified":1574683579177},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1575905317275},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"4164575e6603918c3613d1aac259744ff22e9a2a","modified":1574683579181},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"63a6b9ff12e7c93274bde68e7a9ff04d90a5ac11","modified":1574683579177},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"be2122a42bbfb9a9868eb9912ae0352c7eca7d5c","modified":1575984204636},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"9636f5b90da22e48fc952f4ac49339d076570937","modified":1574683579181},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"33b7522c1c1492df611e5dc18ab6fa14a7c61a57","modified":1574683579181},{"_id":"themes/stun/source/images/icons/apple-touch-icon.png","hash":"c7550f6349ec41c218b681c27cb878c255d8d041","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-144x144.png","hash":"88785838fd99fa4960ae204b6941eeed6ac29a4e","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"a2adef31cae61948fbabac7bb3a43eab6563ec67","modified":1574683579181},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"01aa61845349da722718bfe559595d52826024c3","modified":1574683579181},{"_id":"source/assets/images/paycode/wxpay.png","hash":"ccf8d95f016997d2bd6943c76721969a3ea3f095","modified":1575903766223},{"_id":"themes/stun/source/images/icons/logo-stun.svg","hash":"f76267c87f14a6469460f53f8af5f8fcd1edb7eb","modified":1574683579181},{"_id":"source/assets/images/map/4/ar4-1.png","hash":"9caf48dca0b43980a5156ae3c779117c8683a716","modified":1575816667242},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-192x192.png","hash":"22fa74872a0576b415dd3ef22acadee49994052c","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/android-chrome-512x512.png","hash":"abfb5db9ee449bd12a01f2b4376ea6b461c47135","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-120x120.png","hash":"2c0b3a3466b805ec623729a5b441856babf63d33","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-152x152.png","hash":"121195939946b3f8f3fffa9687dcc50bc02dbbfa","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-180x180.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-60x60.png","hash":"73d7f206772c1cd53392e3733cd801060b59a82a","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon-76x76.png","hash":"c60f4b519f7a7afa79cef37a7cc4008b164e53cd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/apple-touch-icon.png","hash":"b6977fd7fef3c76ff6c782afe6882351eeec74dd","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-32x32.png","hash":"2bfdd221b5948f22204844100fe643e89b83eeb7","modified":1574683579173},{"_id":"source/assets/images/paycode/alipay.jpg","hash":"b42971592abd20c8f177f63b9f1317e4a5f0ce16","modified":1575903697075},{"_id":"themes/stun/docs/.vuepress/public/icons/msapplication-icon-144x144.png","hash":"c2a8dd8156416f7b3f830aeef661a6cd8aeb7b22","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/mstile-150x150.png","hash":"7ef42fd46d8aae3cb8660f42733ec9ecf6a5c616","modified":1574683579173},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-16x16.png","hash":"0a9004baf650a72d447c822d44cecce69394cd89","modified":1574683579173},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"0ea977a1e0c8a371db9a4f0f685714311aba7dad","modified":1574779061678},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"b8e0dbc9a93d28f338036126fe236e958289808f","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"f8023efaa8070ffead4782160a9e0185261750b4","modified":1574683579181},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"7c56b41a5ce38c9009ead11bc6d30f27c6faca05","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"6aae948e3da892f05520ff7e12ce34ba5d785643","modified":1574683579181},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"15b757937ab39cd711d088c2a7e55bc4707b9ba1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"33798f75a60178aff9786e6f2d973e35af51f430","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"b47897cab855fa56428c393ba4c9f71de57b69e1","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"d5c8e5954210c19af712e1dd2992bb69023b51c3","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"abda30b143a60faef6827892afa47c3ad96d0a5b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"d78ff14befde3d437149c920bed173b4107e2f80","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"e2ce1e41ddac3772eab674cb2259d5ed1cc1e7d9","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"5b01f17df157f0718f962decabe636b36f898148","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"91fdf9e2e588f41e7818abb885c6433a3dc37122","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"fc6867eeeb9b0011d8ad7ba9bdef387e7e8ead3c","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-timeline.styl","hash":"abaebea0e3a83a8e2611840fb46f2a91ba7a2b30","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"1d8c1fd9f63e96a1ff8909c7ae42a5f33b1bee0a","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"f377cb8a9b1ab729d22e4656ee9a31e96780949b","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"9c297104a3185668b5edd3e2a8b69dec9cf4cba4","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"92f37483f28bb371d60c66263e40929274c610fb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"08cce8268cdd604cdaf643ba64c71bc29052bb31","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"aa149efb2244066ad594351837d2c5ab64633116","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"40804aab280566879620b4acef4062608990aacb","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"e09369d520442b34f115c1907cc0e5872d98843e","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"df0c6ee8c38ebe9254db5c606a8395a7f38cccc2","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"8d462affa1e594cc939710cb96bb564fc9af6548","modified":1574683579177},{"_id":"themes/stun/source/css/_common/components/widgets/external-link.styl","hash":"1fa4d38f0c3467eb46941b97050e5d6dddadfee2","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"d4dadbc2b78c87649f84bf8bc1eb8363f4748881","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"b478e892e48bbc2179c99d875930ac0eb92a5916","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"372836c3e0e64aa62ed7b794921280d810641aed","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"07ec6c1c9c716a3d92e931cd23b1d9cd07325f7b","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"fe0c497bf842aba4e887e46d369073ebf1d8a324","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/pagination.styl","hash":"d896638f0fb5acb3338748ca19557a49479fcacc","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"51a7f578f384f48c2562b9b55916efcb819e1e25","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"7cb7f0629a2f91dfb5547e356f0036fed102c183","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"085c024604447a213bf5634de1b7acf921dd0d75","modified":1574683579181},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"dcfa7ab739774bbcb39c5ee3c477dd280bd9c733","modified":1574771076122},{"_id":"public/search.json","hash":"57f4701629a64171758daac5c82bdca93e0489a8","modified":1576423127739},{"_id":"public/atom.xml","hash":"0675074d40487074b5f0ada2b40cfd530e9bc267","modified":1576423127739},{"_id":"public/categories/index.html","hash":"70f35ccfc66b44654b7de03b962fb4b044d27342","modified":1576419091745},{"_id":"public/about/index.html","hash":"31cc891696d6f2ed1765ab2f77051475becbb713","modified":1576419091745},{"_id":"public/tags/index.html","hash":"30efc92f0aeb7725001bf8165ba03b5ed2df515c","modified":1576419091745},{"_id":"public/archives/9/index.html","hash":"60d87700f73b69a388fee20a7cf74c6285f1dd7b","modified":1576419091745},{"_id":"public/archives/8/index.html","hash":"e9b4aadf3bf8e194114aba56a714ad33a8b9885f","modified":1576419091745},{"_id":"public/archives/10/index.html","hash":"140fd4bd969ceaa871818a7c0a75b16a008d8777","modified":1576419091745},{"_id":"public/archives/7/index.html","hash":"f5193acf06db6e51ea92e3863dcd930429b0d1ff","modified":1576419091745},{"_id":"public/archives/5/index.html","hash":"0df31d9775a40c5470286e7accdd06bb12fc987f","modified":1576419091745},{"_id":"public/archives/6/index.html","hash":"5b8557ebda737f519af584ef64f95d132d0d135a","modified":1576419091745},{"_id":"public/archives/4/index.html","hash":"388088b242ce142a1fdc8de387283f862a5e3d89","modified":1576423127739},{"_id":"public/archives/index.html","hash":"1afd34c99d348f469778e94ce1b941fc53737055","modified":1576419091745},{"_id":"public/archives/3/index.html","hash":"c07190ef818312d16f47b930a3815108e039a8b1","modified":1576419091745},{"_id":"public/archives/2/index.html","hash":"d69af2befd2e0b47a22ae570fe5433ead55738ac","modified":1576419091745},{"_id":"public/archives/2019/index.html","hash":"1afd34c99d348f469778e94ce1b941fc53737055","modified":1576419091745},{"_id":"public/archives/1/index.html","hash":"221edcbfb82457c76ca4081b3487dad63bf7efb7","modified":1576419091745},{"_id":"public/archives/2019/11/index.html","hash":"1afd34c99d348f469778e94ce1b941fc53737055","modified":1576419091745},{"_id":"public/archives/2019/12/index.html","hash":"1afd34c99d348f469778e94ce1b941fc53737055","modified":1576419091745},{"_id":"public/categories/VueJS/index.html","hash":"3578db1447bee744cc7c96ce33a723c490bea273","modified":1576419091745},{"_id":"public/categories/前端/index.html","hash":"2892423637ebcd15196582f1943ffdab9bf8d950","modified":1576419091745},{"_id":"public/categories/编程语言/index.html","hash":"1ebfc8bd66b07b6b07de7c7bf139718c6b3d6b7d","modified":1576419091745},{"_id":"public/categories/工具使用/index.html","hash":"c79f8be4f93b442460f90fdbb04fc1e59baa301b","modified":1576419091745},{"_id":"public/categories/一个人/index.html","hash":"ee19a51df5909b1896b5450ae7a65e583b00dbcc","modified":1576419091745},{"_id":"public/categories/好玩的事/index.html","hash":"88e183bf4e1849084a7214ed8970e2699c927928","modified":1576419091745},{"_id":"public/categories/那年夏夜/index.html","hash":"25d00ec05f4eeee95f621c6ef6fea335926405bc","modified":1576419091745},{"_id":"public/index.html","hash":"dd01d075a235023b1f2c7de527559f27b7e63920","modified":1576423127739},{"_id":"public/categories/其它/index.html","hash":"c4fe113405a27b6319c510420b70c320980feafa","modified":1576419091745},{"_id":"public/categories/Linux/index.html","hash":"09d0a56356bd92338028dcdffa9a8ed37736ab4b","modified":1576419091745},{"_id":"public/categories/前端/CSS/index.html","hash":"02912a6f735901ec38eadcc779f40f3f21597f88","modified":1576419091745},{"_id":"public/tags/工具使用/index.html","hash":"86b9882dcb2f9f9a9977be7a9eef209fadafadad","modified":1576419091745},{"_id":"public/tags/C/index.html","hash":"334ee41cbc505b51f72612f5777c73d114eaf01f","modified":1576419091745},{"_id":"public/tags/CSS/index.html","hash":"9dc37a80c13bcc401958e09f7e39f5807d651a62","modified":1576419091745},{"_id":"public/tags/思考/index.html","hash":"db7112fe1ea53d9c631aff6a7f244048a6ebacce","modified":1576419091745},{"_id":"public/tags/兴趣/index.html","hash":"a66c7d697d0cb3f7eb2d05d42a7149d311953a34","modified":1576419091745},{"_id":"public/tags/生活/index.html","hash":"657452c5ee2251ce04376f72682788c400b581fc","modified":1576419091745},{"_id":"public/tags/Linux/index.html","hash":"e056670303e6f5be14c24f071ad81267a46308d3","modified":1576419091745},{"_id":"source/_posts/自适应高度的输入框.md","hash":"1dca133c9bd3973752b0e296855fd149a1e54901","modified":1576224086309},{"_id":"source/assets/images/map/4/ar4-2.png","hash":"43e77c0ce70edc7519ae79dec5bf4ff734ff7006","modified":1576250214412},{"_id":"source/assets/images/map/4/ar4-3.png","hash":"d37059e1ca0feecea66a4dd8538185df1ee91e05","modified":1576335102592},{"_id":"public/assets/images/map/4/ar4-2.png","hash":"43e77c0ce70edc7519ae79dec5bf4ff734ff7006","modified":1576250975879},{"_id":"public/assets/images/map/4/ar4-3.png","hash":"d37059e1ca0feecea66a4dd8538185df1ee91e05","modified":1576419091745},{"_id":"source/assets/images/map/4/ar4-4.png","hash":"78fbea09ae8b961e35ba83245575c6b0689c8d8f","modified":1576335984008},{"_id":"public/assets/images/map/4/ar4-4.png","hash":"78fbea09ae8b961e35ba83245575c6b0689c8d8f","modified":1576419091745},{"_id":"source/assets/images/map/4/ar4-5.png","hash":"a907bb77deab9efaeaa8cb9d827136c614af54e1","modified":1576421626924},{"_id":"source/assets/images/map/4/ar4-6.png","hash":"6b9ad916a1bdf59383a477e98eed2a12a894fc04","modified":1576422673824},{"_id":"public/assets/images/map/4/ar4-5.png","hash":"a907bb77deab9efaeaa8cb9d827136c614af54e1","modified":1576423127739},{"_id":"public/assets/images/map/4/ar4-6.png","hash":"6b9ad916a1bdf59383a477e98eed2a12a894fc04","modified":1576423127739},{"_id":"source/_posts/JS数组.md","hash":"56a295740e7cad7e68011c446ac33437574d6497","modified":1577692181900},{"_id":"source/_posts/一个毕业生眼中的大学.md","hash":"afc293da93339af20297911960e8b9dc2437e1ac","modified":1577673979816},{"_id":"source/_posts/对于长城防火墙的思考.md","hash":"e893d9060e0879450a4b45853f697d56bea2ff87","modified":1577673979040}],"Category":[{"name":"VueJS","_id":"ck41300tj0003a7fwf6ycdh22"},{"name":"工具使用","_id":"ck41300tr0008a7fw2gew0l34"},{"name":"编程语言","_id":"ck41300tw000ea7fw1u5sgolc"},{"name":"前端","_id":"ck41300u0000ka7fwhfq56jan"},{"name":"一个人","_id":"ck41300u5000pa7fw6xf27xm9"},{"name":"其它","_id":"ck41300u7000sa7fw4xyd8ue5"},{"name":"好玩的事","_id":"ck41300ua000wa7fwgswh798p"},{"name":"那年夏夜","_id":"ck41300uf0013a7fwf6r459c6"},{"name":"Linux","_id":"ck41300uh0017a7fw1svw5ntd"},{"name":"CSS","parent":"ck41300u0000ka7fwhfq56jan","_id":"ck41300uj0019a7fw3qo64icf"},{"name":"JavaScript","parent":"ck41300u0000ka7fwhfq56jan","_id":"ck4s578sq0003r4fw86vs5seq"}],"Data":[],"Page":[{"title":"categories","date":"2019-11-25T13:53:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-25 21:53:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-11-26T11:58:27.302Z","path":"categories/index.html","layout":"page","_id":"ck41300td0001a7fw7is07doo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-12-09T14:28:15.000Z","comments":0,"_content":"\n　　**假如一间铁屋子，是绝无窗户而万难破毁的，里面有许多熟睡的人们，不久都要闷死了，然而是从昏睡入死灭，并不感到就死的悲哀。现在你大嚷起来，惊起了较为清醒的几个人，使这不幸的少数者来受无可挽救的临终的苦楚，你倒以为对得起他们么？**\n\n　　**然而几个人既然起来，你不能说决没有毁坏这铁屋的希望。**","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-09 22:28:15\ncomments: false\n---\n\n　　**假如一间铁屋子，是绝无窗户而万难破毁的，里面有许多熟睡的人们，不久都要闷死了，然而是从昏睡入死灭，并不感到就死的悲哀。现在你大嚷起来，惊起了较为清醒的几个人，使这不幸的少数者来受无可挽救的临终的苦楚，你倒以为对得起他们么？**\n\n　　**然而几个人既然起来，你不能说决没有毁坏这铁屋的希望。**","updated":"2019-12-09T14:42:50.347Z","path":"about/index.html","layout":"page","_id":"ck41300v4001da7fw38mu7ske","content":"<p>　　<strong>假如一间铁屋子，是绝无窗户而万难破毁的，里面有许多熟睡的人们，不久都要闷死了，然而是从昏睡入死灭，并不感到就死的悲哀。现在你大嚷起来，惊起了较为清醒的几个人，使这不幸的少数者来受无可挽救的临终的苦楚，你倒以为对得起他们么？</strong></p>\n<p>　　<strong>然而几个人既然起来，你不能说决没有毁坏这铁屋的希望。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　<strong>假如一间铁屋子，是绝无窗户而万难破毁的，里面有许多熟睡的人们，不久都要闷死了，然而是从昏睡入死灭，并不感到就死的悲哀。现在你大嚷起来，惊起了较为清醒的几个人，使这不幸的少数者来受无可挽救的临终的苦楚，你倒以为对得起他们么？</strong></p>\n<p>　　<strong>然而几个人既然起来，你不能说决没有毁坏这铁屋的希望。</strong></p>\n"},{"title":"tags","date":"2019-11-25T13:55:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-25 21:55:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-11-26T11:58:21.274Z","path":"tags/index.html","layout":"page","_id":"ck41300vd001ea7fw67q28f67","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"bdtrans-一个命令行下的翻译工具","reward":true,"date":"2019-12-09T14:55:45.000Z","_content":"\n　　现如今，机器翻译技术已经越来越成熟了，尽管从整体来看机器翻译的结果还不是特别如意，但是也足以应付一般的翻译需求了。近几年机器翻译平台层出不穷，国外比较出名的翻译平台有Google翻译、必应翻译等，国内比较出名的也有百度翻译、有道翻译等。\n\n　　中国的百度公司在人工智能层面做的还算是蛮不错的（虽然它的搜索一直以来为人所诟病），笔者经常在Linux下做一些工作，当有翻译需求时不得不打开浏览器，进入百度翻译官网去翻译一些句子，这样显然是有些麻烦，我想如果百度翻译肯提供一个API的话就好了，这样我就能做一个在终端下调用API的小工具。\n\n　　笔者尝试登录百度翻译的开发者平台，发现百度翻译果然提供了API，于是笔者便用Python脚本语言写了一个命令行下的调用百度翻译工具，将其命名为 **bdtrans**\n\n　　虽然笔者是在Linux下写的这个工具，但是其它平台也是支持的（前提是你的计算机上安装了一个python3的解释器），它所依赖的第三方包只有setuptools与prompt_toolkit.\n\n　　你可以将其当作一个pyhton包，在自己的脚本文件中导入并使用它，或者在python解释器中使用它，也可以将其完全当作一个命令行下的小工具，甚至启动交互式的翻译环境交互式翻译句子，它也支持从文件中读取翻译内容，并将翻译结果存储进文件中去，下面笔者简要介绍一下工具的使用。\n\n### 安装\n\n你可以使用Python包管理工具来安装它： **`pip install bdtrans`**\n\n你也可以下载源码包，解压后运行安装文件： **`python setup.py insatll`**\n\nGithub开源地址：[https://github.com/zsimline/bdtrans](https://github.com/zsimline/bdtrans)\n\n### 使用方式\n\n>　　首先，你应该去百度翻译的[官网](http://api.fanyi.baidu.com/)上注册一个账户，并按照官网上的指导并申请一个百度翻译API的AppID与秘钥。\n>　　当你首次尝试导入bdtrans包，或者在命令行工具下使用它时，它将会指引你输AppID、秘钥、默认的翻译规则等信息，并在输入完成后在你的用户目录下生成一个名为.bdtrans的配置文件，之后你就可以直接使用它而无需再次输入AppID等相关信息了。\n>　　需要注意的是，百度翻译限制调用API的频率为1s/次，所以请不要在1s内调用多次API\n\n\n### 模块函数\n\n**trans(words, source_lang=None, target_lang=None, reverse=False)**\n\n作用：翻译用户给定的句子，输出翻译结果\n\n|参数|含义|\n|:----|:----|\n|words|你想要翻译的句子|\n|source_lang|源语言代码（非必须）|\n|target_lang|目标语言代码（非必须）|\n|reverse|是否反转源语言与目标语言|\n\n```python\n>>> import bdtrans\n>>> bdtrans.trans('Hello, boy!','en','zh')\n>>> 你好，男孩！\n```\n\n\n**io_trans(input_file, output_file=None, quiet=False)**\n\n作用：从文件中读取翻译内容，如果指定了输出文件，翻译结果将被存储到输出文件中\n\n|参数|含义|\n|:----|:----|\n|input_file|输入的文件名|\n|output_file|输出的文件名|\n|quiet|是否关闭控制台输出|\n\n\n **set_lang(source_lang, target_lang)**\n\n作用：设置源语言代码与目标语言代码\n\n|参数|含义|\n|:----|:----|\n|source_lang|源语言代码|\n|target_lang|目标语言代码|\n\n\n **save(file_name)**\n\n作用：保存翻译结果到文件中\n\n|参数|含义|\n|:----|:----|\n|file_name|保存的文件名|\n\n\n**reverse_lang()**\n\n作用：反转源语言与目标语言\n\n\n**list_langs()**\n\n作用：打印目前支持的语言列表\n\n\n**display_rules**\n\n作用：显示当前的语言翻译规则\n\n\n**change_appid()**\n\n作用：按照向导改变配置文件中的AppID\n\n\n**change_lang()**\n\n作用：按照向导改变配置文件中的默认翻译规则\n\n\n**initialize_app()**\n\n作用：按照向导初始化APP\n\n\n### 命令行工具\n\n>可以直接在命令行下使用它，最重要的是你可以使用 \"bdtrans -S\" 进入交互式的翻译环境。\n\n**bdtrans [选项] 待翻译文本**\n\n#### 选项\n\n|选项|含义|\n|:----|:----|\n|-h, --help|显示帮助消息|\n|-v, --version|显示程序版本|\n|-l, --list|打印语言列表|\n|-S, --shell|启动交互式翻译环境|\n|-s code, --source code|指定源语言|\n|-t code, --target code|指定目标语言|\n|-i filename, --input filename|指定输入文件|\n|-o filename, --output filename|指定输出文件|\n|--init|按照向导初始化APP|\n|--changeinfo|改变配置文件中的AppID|\n|--changelang|改变配置文件中的翻译规则|\n\n#### 交互环境下的选项\n|选项|含义|\n|:----|:----|\n|/reve|反转源语言与目标语言|\n|/rule|显示当前的翻译规则|\n|/list|打印支持的语言列表|\n|/help|显示帮助信息|\n|/quit|退出交互环境|\n|/save filename|保存翻译结果|\n|/setlang source_lang target_lang|设置源语言与目标语言|\n```shell\nuser@host:$ bdtrans 德玛西亚万岁\nuser@host:$ Long live Demasia\nuser@host:$ bdtrans -t ara 德玛西亚万岁\nuser@host:$ فيفا دي مارسيا\nuser@host:$ bdtrans -s zh 德玛西亚万岁\nuser@host:$ 不可以只指定源语言！\n```\n\n>在交互环境下可以使用 =code 来临时的指定目标语言，此时源语言将自动的被指定为auto, 例如 \" =zh hello world \"\n```python\n>=th 你在地球嗑瓜子\nคุณใช้เมล็ดแตงโมบนโลก\n>=jp 我在月球吃西瓜\n月でスイカを食べます\n```\n\n\n### 支持的语言列表\n\n|语言代码|语言|\n|:----|:----|\n|zh|中文|\n|en|英语|\n|yue|粤语|\n|wyw|文言文|\n|jp|日语|\n|kor|韩语|\n|fra|法语|\n|spa|西班牙语|\n|th|泰语|\n|ara|阿拉伯语|\n|ru|俄语|\n|pt|葡萄牙语|\n|de|德语|\n|it|意大利语|\n|el|希腊语|\n|nl|荷兰语|\n|pl|波兰语|\n|bul|保加利亚语|\n|est|爱沙尼亚语|\n|dan|丹麦语|\n|fin|芬兰语|\n|cs|捷克语|\n|rom|罗马尼亚语|\n|slo|斯洛文尼亚语|\n|swe|瑞典语|\n|hu|匈牙利语|\n|cht|繁体中文|\n|vie|越南语|\n|auto|自动检测|\n","source":"_posts/bdtrans-一个命令行下的翻译工具.md","raw":"---\ntitle: bdtrans-一个命令行下的翻译工具\nreward: true\ndate: 2019-12-09 22:55:45\ntags: 工具使用\npermalink: 5\ncategories: 工具使用\n---\n\n　　现如今，机器翻译技术已经越来越成熟了，尽管从整体来看机器翻译的结果还不是特别如意，但是也足以应付一般的翻译需求了。近几年机器翻译平台层出不穷，国外比较出名的翻译平台有Google翻译、必应翻译等，国内比较出名的也有百度翻译、有道翻译等。\n\n　　中国的百度公司在人工智能层面做的还算是蛮不错的（虽然它的搜索一直以来为人所诟病），笔者经常在Linux下做一些工作，当有翻译需求时不得不打开浏览器，进入百度翻译官网去翻译一些句子，这样显然是有些麻烦，我想如果百度翻译肯提供一个API的话就好了，这样我就能做一个在终端下调用API的小工具。\n\n　　笔者尝试登录百度翻译的开发者平台，发现百度翻译果然提供了API，于是笔者便用Python脚本语言写了一个命令行下的调用百度翻译工具，将其命名为 **bdtrans**\n\n　　虽然笔者是在Linux下写的这个工具，但是其它平台也是支持的（前提是你的计算机上安装了一个python3的解释器），它所依赖的第三方包只有setuptools与prompt_toolkit.\n\n　　你可以将其当作一个pyhton包，在自己的脚本文件中导入并使用它，或者在python解释器中使用它，也可以将其完全当作一个命令行下的小工具，甚至启动交互式的翻译环境交互式翻译句子，它也支持从文件中读取翻译内容，并将翻译结果存储进文件中去，下面笔者简要介绍一下工具的使用。\n\n### 安装\n\n你可以使用Python包管理工具来安装它： **`pip install bdtrans`**\n\n你也可以下载源码包，解压后运行安装文件： **`python setup.py insatll`**\n\nGithub开源地址：[https://github.com/zsimline/bdtrans](https://github.com/zsimline/bdtrans)\n\n### 使用方式\n\n>　　首先，你应该去百度翻译的[官网](http://api.fanyi.baidu.com/)上注册一个账户，并按照官网上的指导并申请一个百度翻译API的AppID与秘钥。\n>　　当你首次尝试导入bdtrans包，或者在命令行工具下使用它时，它将会指引你输AppID、秘钥、默认的翻译规则等信息，并在输入完成后在你的用户目录下生成一个名为.bdtrans的配置文件，之后你就可以直接使用它而无需再次输入AppID等相关信息了。\n>　　需要注意的是，百度翻译限制调用API的频率为1s/次，所以请不要在1s内调用多次API\n\n\n### 模块函数\n\n**trans(words, source_lang=None, target_lang=None, reverse=False)**\n\n作用：翻译用户给定的句子，输出翻译结果\n\n|参数|含义|\n|:----|:----|\n|words|你想要翻译的句子|\n|source_lang|源语言代码（非必须）|\n|target_lang|目标语言代码（非必须）|\n|reverse|是否反转源语言与目标语言|\n\n```python\n>>> import bdtrans\n>>> bdtrans.trans('Hello, boy!','en','zh')\n>>> 你好，男孩！\n```\n\n\n**io_trans(input_file, output_file=None, quiet=False)**\n\n作用：从文件中读取翻译内容，如果指定了输出文件，翻译结果将被存储到输出文件中\n\n|参数|含义|\n|:----|:----|\n|input_file|输入的文件名|\n|output_file|输出的文件名|\n|quiet|是否关闭控制台输出|\n\n\n **set_lang(source_lang, target_lang)**\n\n作用：设置源语言代码与目标语言代码\n\n|参数|含义|\n|:----|:----|\n|source_lang|源语言代码|\n|target_lang|目标语言代码|\n\n\n **save(file_name)**\n\n作用：保存翻译结果到文件中\n\n|参数|含义|\n|:----|:----|\n|file_name|保存的文件名|\n\n\n**reverse_lang()**\n\n作用：反转源语言与目标语言\n\n\n**list_langs()**\n\n作用：打印目前支持的语言列表\n\n\n**display_rules**\n\n作用：显示当前的语言翻译规则\n\n\n**change_appid()**\n\n作用：按照向导改变配置文件中的AppID\n\n\n**change_lang()**\n\n作用：按照向导改变配置文件中的默认翻译规则\n\n\n**initialize_app()**\n\n作用：按照向导初始化APP\n\n\n### 命令行工具\n\n>可以直接在命令行下使用它，最重要的是你可以使用 \"bdtrans -S\" 进入交互式的翻译环境。\n\n**bdtrans [选项] 待翻译文本**\n\n#### 选项\n\n|选项|含义|\n|:----|:----|\n|-h, --help|显示帮助消息|\n|-v, --version|显示程序版本|\n|-l, --list|打印语言列表|\n|-S, --shell|启动交互式翻译环境|\n|-s code, --source code|指定源语言|\n|-t code, --target code|指定目标语言|\n|-i filename, --input filename|指定输入文件|\n|-o filename, --output filename|指定输出文件|\n|--init|按照向导初始化APP|\n|--changeinfo|改变配置文件中的AppID|\n|--changelang|改变配置文件中的翻译规则|\n\n#### 交互环境下的选项\n|选项|含义|\n|:----|:----|\n|/reve|反转源语言与目标语言|\n|/rule|显示当前的翻译规则|\n|/list|打印支持的语言列表|\n|/help|显示帮助信息|\n|/quit|退出交互环境|\n|/save filename|保存翻译结果|\n|/setlang source_lang target_lang|设置源语言与目标语言|\n```shell\nuser@host:$ bdtrans 德玛西亚万岁\nuser@host:$ Long live Demasia\nuser@host:$ bdtrans -t ara 德玛西亚万岁\nuser@host:$ فيفا دي مارسيا\nuser@host:$ bdtrans -s zh 德玛西亚万岁\nuser@host:$ 不可以只指定源语言！\n```\n\n>在交互环境下可以使用 =code 来临时的指定目标语言，此时源语言将自动的被指定为auto, 例如 \" =zh hello world \"\n```python\n>=th 你在地球嗑瓜子\nคุณใช้เมล็ดแตงโมบนโลก\n>=jp 我在月球吃西瓜\n月でスイカを食べます\n```\n\n\n### 支持的语言列表\n\n|语言代码|语言|\n|:----|:----|\n|zh|中文|\n|en|英语|\n|yue|粤语|\n|wyw|文言文|\n|jp|日语|\n|kor|韩语|\n|fra|法语|\n|spa|西班牙语|\n|th|泰语|\n|ara|阿拉伯语|\n|ru|俄语|\n|pt|葡萄牙语|\n|de|德语|\n|it|意大利语|\n|el|希腊语|\n|nl|荷兰语|\n|pl|波兰语|\n|bul|保加利亚语|\n|est|爱沙尼亚语|\n|dan|丹麦语|\n|fin|芬兰语|\n|cs|捷克语|\n|rom|罗马尼亚语|\n|slo|斯洛文尼亚语|\n|swe|瑞典语|\n|hu|匈牙利语|\n|cht|繁体中文|\n|vie|越南语|\n|auto|自动检测|\n","slug":"5","published":1,"updated":"2019-12-10T13:29:41.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tf0002a7fwen3malm3","content":"<p>　　现如今，机器翻译技术已经越来越成熟了，尽管从整体来看机器翻译的结果还不是特别如意，但是也足以应付一般的翻译需求了。近几年机器翻译平台层出不穷，国外比较出名的翻译平台有Google翻译、必应翻译等，国内比较出名的也有百度翻译、有道翻译等。</p>\n<p>　　中国的百度公司在人工智能层面做的还算是蛮不错的（虽然它的搜索一直以来为人所诟病），笔者经常在Linux下做一些工作，当有翻译需求时不得不打开浏览器，进入百度翻译官网去翻译一些句子，这样显然是有些麻烦，我想如果百度翻译肯提供一个API的话就好了，这样我就能做一个在终端下调用API的小工具。</p>\n<p>　　笔者尝试登录百度翻译的开发者平台，发现百度翻译果然提供了API，于是笔者便用Python脚本语言写了一个命令行下的调用百度翻译工具，将其命名为 <strong>bdtrans</strong></p>\n<p>　　虽然笔者是在Linux下写的这个工具，但是其它平台也是支持的（前提是你的计算机上安装了一个python3的解释器），它所依赖的第三方包只有setuptools与prompt_toolkit.</p>\n<p>　　你可以将其当作一个pyhton包，在自己的脚本文件中导入并使用它，或者在python解释器中使用它，也可以将其完全当作一个命令行下的小工具，甚至启动交互式的翻译环境交互式翻译句子，它也支持从文件中读取翻译内容，并将翻译结果存储进文件中去，下面笔者简要介绍一下工具的使用。</p>\n<h3 id=\"安装\"><span class=\"heading-link\">安装</span></h3><p>你可以使用Python包管理工具来安装它： <strong><code>pip install bdtrans</code></strong></p>\n<p>你也可以下载源码包，解压后运行安装文件： <strong><code>python setup.py insatll</code></strong></p>\n<p>Github开源地址：<span class=\"external-link\"><a href=\"https://github.com/zsimline/bdtrans\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/bdtrans</a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"使用方式\"><span class=\"heading-link\">使用方式</span></h3><blockquote>\n<p>　　首先，你应该去百度翻译的<span class=\"external-link\"><a href=\"http://api.fanyi.baidu.com/\" target=\"_blank\" rel=\"noopener\">官网</a><i class=\"fa fa-external-link\"></i></span>上注册一个账户，并按照官网上的指导并申请一个百度翻译API的AppID与秘钥。<br>　　当你首次尝试导入bdtrans包，或者在命令行工具下使用它时，它将会指引你输AppID、秘钥、默认的翻译规则等信息，并在输入完成后在你的用户目录下生成一个名为.bdtrans的配置文件，之后你就可以直接使用它而无需再次输入AppID等相关信息了。<br>　　需要注意的是，百度翻译限制调用API的频率为1s/次，所以请不要在1s内调用多次API</p>\n</blockquote>\n<h3 id=\"模块函数\"><span class=\"heading-link\">模块函数</span></h3><p><strong>trans(words, source_lang=None, target_lang=None, reverse=False)</strong></p>\n<p>作用：翻译用户给定的句子，输出翻译结果</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">words</td>\n<td align=\"left\">你想要翻译的句子</td>\n</tr>\n<tr>\n<td align=\"left\">source_lang</td>\n<td align=\"left\">源语言代码（非必须）</td>\n</tr>\n<tr>\n<td align=\"left\">target_lang</td>\n<td align=\"left\">目标语言代码（非必须）</td>\n</tr>\n<tr>\n<td align=\"left\">reverse</td>\n<td align=\"left\">是否反转源语言与目标语言</td>\n</tr>\n</tbody></table></div>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> bdtrans</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bdtrans.trans(<span class=\"string\">'Hello, boy!'</span>,<span class=\"string\">'en'</span>,<span class=\"string\">'zh'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>你好，男孩！</span><br></pre></td></tr></table></div></figure>\n\n\n<p><strong>io_trans(input_file, output_file=None, quiet=False)</strong></p>\n<p>作用：从文件中读取翻译内容，如果指定了输出文件，翻译结果将被存储到输出文件中</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">input_file</td>\n<td align=\"left\">输入的文件名</td>\n</tr>\n<tr>\n<td align=\"left\">output_file</td>\n<td align=\"left\">输出的文件名</td>\n</tr>\n<tr>\n<td align=\"left\">quiet</td>\n<td align=\"left\">是否关闭控制台输出</td>\n</tr>\n</tbody></table></div>\n<p> <strong>set_lang(source_lang, target_lang)</strong></p>\n<p>作用：设置源语言代码与目标语言代码</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">source_lang</td>\n<td align=\"left\">源语言代码</td>\n</tr>\n<tr>\n<td align=\"left\">target_lang</td>\n<td align=\"left\">目标语言代码</td>\n</tr>\n</tbody></table></div>\n<p> <strong>save(file_name)</strong></p>\n<p>作用：保存翻译结果到文件中</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">file_name</td>\n<td align=\"left\">保存的文件名</td>\n</tr>\n</tbody></table></div>\n<p><strong>reverse_lang()</strong></p>\n<p>作用：反转源语言与目标语言</p>\n<p><strong>list_langs()</strong></p>\n<p>作用：打印目前支持的语言列表</p>\n<p><strong>display_rules</strong></p>\n<p>作用：显示当前的语言翻译规则</p>\n<p><strong>change_appid()</strong></p>\n<p>作用：按照向导改变配置文件中的AppID</p>\n<p><strong>change_lang()</strong></p>\n<p>作用：按照向导改变配置文件中的默认翻译规则</p>\n<p><strong>initialize_app()</strong></p>\n<p>作用：按照向导初始化APP</p>\n<h3 id=\"命令行工具\"><span class=\"heading-link\">命令行工具</span></h3><blockquote>\n<p>可以直接在命令行下使用它，最重要的是你可以使用 “bdtrans -S” 进入交互式的翻译环境。</p>\n</blockquote>\n<p><strong>bdtrans [选项] 待翻译文本</strong></p>\n<h4 id=\"选项\"><span class=\"heading-link\">选项</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-h, –help</td>\n<td align=\"left\">显示帮助消息</td>\n</tr>\n<tr>\n<td align=\"left\">-v, –version</td>\n<td align=\"left\">显示程序版本</td>\n</tr>\n<tr>\n<td align=\"left\">-l, –list</td>\n<td align=\"left\">打印语言列表</td>\n</tr>\n<tr>\n<td align=\"left\">-S, –shell</td>\n<td align=\"left\">启动交互式翻译环境</td>\n</tr>\n<tr>\n<td align=\"left\">-s code, –source code</td>\n<td align=\"left\">指定源语言</td>\n</tr>\n<tr>\n<td align=\"left\">-t code, –target code</td>\n<td align=\"left\">指定目标语言</td>\n</tr>\n<tr>\n<td align=\"left\">-i filename, –input filename</td>\n<td align=\"left\">指定输入文件</td>\n</tr>\n<tr>\n<td align=\"left\">-o filename, –output filename</td>\n<td align=\"left\">指定输出文件</td>\n</tr>\n<tr>\n<td align=\"left\">–init</td>\n<td align=\"left\">按照向导初始化APP</td>\n</tr>\n<tr>\n<td align=\"left\">–changeinfo</td>\n<td align=\"left\">改变配置文件中的AppID</td>\n</tr>\n<tr>\n<td align=\"left\">–changelang</td>\n<td align=\"left\">改变配置文件中的翻译规则</td>\n</tr>\n</tbody></table></div>\n<h4 id=\"交互环境下的选项\"><span class=\"heading-link\">交互环境下的选项</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/reve</td>\n<td align=\"left\">反转源语言与目标语言</td>\n</tr>\n<tr>\n<td align=\"left\">/rule</td>\n<td align=\"left\">显示当前的翻译规则</td>\n</tr>\n<tr>\n<td align=\"left\">/list</td>\n<td align=\"left\">打印支持的语言列表</td>\n</tr>\n<tr>\n<td align=\"left\">/help</td>\n<td align=\"left\">显示帮助信息</td>\n</tr>\n<tr>\n<td align=\"left\">/quit</td>\n<td align=\"left\">退出交互环境</td>\n</tr>\n<tr>\n<td align=\"left\">/save filename</td>\n<td align=\"left\">保存翻译结果</td>\n</tr>\n<tr>\n<td align=\"left\">/setlang source_lang target_lang</td>\n<td align=\"left\">设置源语言与目标语言</td>\n</tr>\n<tr>\n<td align=\"left\"><figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@host:$ bdtrans 德玛西亚万岁</span><br><span class=\"line\">user@host:$ Long live Demasia</span><br><span class=\"line\">user@host:$ bdtrans -t ara 德玛西亚万岁</span><br><span class=\"line\">user@host:$ فيفا دي مارسيا</span><br><span class=\"line\">user@host:$ bdtrans -s zh 德玛西亚万岁</span><br><span class=\"line\">user@host:$ 不可以只指定源语言！</span><br></pre></td></tr></table></div></figure></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table></div>\n<blockquote>\n<p>在交互环境下可以使用 =code 来临时的指定目标语言，此时源语言将自动的被指定为auto, 例如 “ =zh hello world “</p>\n</blockquote>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;=th 你在地球嗑瓜子</span><br><span class=\"line\">คุณใช้เมล็ดแตงโมบนโลก</span><br><span class=\"line\">&gt;=jp 我在月球吃西瓜</span><br><span class=\"line\">月でスイカを食べます</span><br></pre></td></tr></table></div></figure>\n\n\n<h3 id=\"支持的语言列表\"><span class=\"heading-link\">支持的语言列表</span></h3><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">语言代码</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">zh</td>\n<td align=\"left\">中文</td>\n</tr>\n<tr>\n<td align=\"left\">en</td>\n<td align=\"left\">英语</td>\n</tr>\n<tr>\n<td align=\"left\">yue</td>\n<td align=\"left\">粤语</td>\n</tr>\n<tr>\n<td align=\"left\">wyw</td>\n<td align=\"left\">文言文</td>\n</tr>\n<tr>\n<td align=\"left\">jp</td>\n<td align=\"left\">日语</td>\n</tr>\n<tr>\n<td align=\"left\">kor</td>\n<td align=\"left\">韩语</td>\n</tr>\n<tr>\n<td align=\"left\">fra</td>\n<td align=\"left\">法语</td>\n</tr>\n<tr>\n<td align=\"left\">spa</td>\n<td align=\"left\">西班牙语</td>\n</tr>\n<tr>\n<td align=\"left\">th</td>\n<td align=\"left\">泰语</td>\n</tr>\n<tr>\n<td align=\"left\">ara</td>\n<td align=\"left\">阿拉伯语</td>\n</tr>\n<tr>\n<td align=\"left\">ru</td>\n<td align=\"left\">俄语</td>\n</tr>\n<tr>\n<td align=\"left\">pt</td>\n<td align=\"left\">葡萄牙语</td>\n</tr>\n<tr>\n<td align=\"left\">de</td>\n<td align=\"left\">德语</td>\n</tr>\n<tr>\n<td align=\"left\">it</td>\n<td align=\"left\">意大利语</td>\n</tr>\n<tr>\n<td align=\"left\">el</td>\n<td align=\"left\">希腊语</td>\n</tr>\n<tr>\n<td align=\"left\">nl</td>\n<td align=\"left\">荷兰语</td>\n</tr>\n<tr>\n<td align=\"left\">pl</td>\n<td align=\"left\">波兰语</td>\n</tr>\n<tr>\n<td align=\"left\">bul</td>\n<td align=\"left\">保加利亚语</td>\n</tr>\n<tr>\n<td align=\"left\">est</td>\n<td align=\"left\">爱沙尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">dan</td>\n<td align=\"left\">丹麦语</td>\n</tr>\n<tr>\n<td align=\"left\">fin</td>\n<td align=\"left\">芬兰语</td>\n</tr>\n<tr>\n<td align=\"left\">cs</td>\n<td align=\"left\">捷克语</td>\n</tr>\n<tr>\n<td align=\"left\">rom</td>\n<td align=\"left\">罗马尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">slo</td>\n<td align=\"left\">斯洛文尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">swe</td>\n<td align=\"left\">瑞典语</td>\n</tr>\n<tr>\n<td align=\"left\">hu</td>\n<td align=\"left\">匈牙利语</td>\n</tr>\n<tr>\n<td align=\"left\">cht</td>\n<td align=\"left\">繁体中文</td>\n</tr>\n<tr>\n<td align=\"left\">vie</td>\n<td align=\"left\">越南语</td>\n</tr>\n<tr>\n<td align=\"left\">auto</td>\n<td align=\"left\">自动检测</td>\n</tr>\n</tbody></table></div>\n","site":{"data":{}},"excerpt":"","more":"<p>　　现如今，机器翻译技术已经越来越成熟了，尽管从整体来看机器翻译的结果还不是特别如意，但是也足以应付一般的翻译需求了。近几年机器翻译平台层出不穷，国外比较出名的翻译平台有Google翻译、必应翻译等，国内比较出名的也有百度翻译、有道翻译等。</p>\n<p>　　中国的百度公司在人工智能层面做的还算是蛮不错的（虽然它的搜索一直以来为人所诟病），笔者经常在Linux下做一些工作，当有翻译需求时不得不打开浏览器，进入百度翻译官网去翻译一些句子，这样显然是有些麻烦，我想如果百度翻译肯提供一个API的话就好了，这样我就能做一个在终端下调用API的小工具。</p>\n<p>　　笔者尝试登录百度翻译的开发者平台，发现百度翻译果然提供了API，于是笔者便用Python脚本语言写了一个命令行下的调用百度翻译工具，将其命名为 <strong>bdtrans</strong></p>\n<p>　　虽然笔者是在Linux下写的这个工具，但是其它平台也是支持的（前提是你的计算机上安装了一个python3的解释器），它所依赖的第三方包只有setuptools与prompt_toolkit.</p>\n<p>　　你可以将其当作一个pyhton包，在自己的脚本文件中导入并使用它，或者在python解释器中使用它，也可以将其完全当作一个命令行下的小工具，甚至启动交互式的翻译环境交互式翻译句子，它也支持从文件中读取翻译内容，并将翻译结果存储进文件中去，下面笔者简要介绍一下工具的使用。</p>\n<h3 id=\"安装\"><span class=\"heading-link\">安装</span></h3><p>你可以使用Python包管理工具来安装它： <strong><code>pip install bdtrans</code></strong></p>\n<p>你也可以下载源码包，解压后运行安装文件： <strong><code>python setup.py insatll</code></strong></p>\n<p>Github开源地址：<span class=\"external-link\"><a href=\"https://github.com/zsimline/bdtrans\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/bdtrans</a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"使用方式\"><span class=\"heading-link\">使用方式</span></h3><blockquote>\n<p>　　首先，你应该去百度翻译的<span class=\"external-link\"><a href=\"http://api.fanyi.baidu.com/\" target=\"_blank\" rel=\"noopener\">官网</a><i class=\"fa fa-external-link\"></i></span>上注册一个账户，并按照官网上的指导并申请一个百度翻译API的AppID与秘钥。<br>　　当你首次尝试导入bdtrans包，或者在命令行工具下使用它时，它将会指引你输AppID、秘钥、默认的翻译规则等信息，并在输入完成后在你的用户目录下生成一个名为.bdtrans的配置文件，之后你就可以直接使用它而无需再次输入AppID等相关信息了。<br>　　需要注意的是，百度翻译限制调用API的频率为1s/次，所以请不要在1s内调用多次API</p>\n</blockquote>\n<h3 id=\"模块函数\"><span class=\"heading-link\">模块函数</span></h3><p><strong>trans(words, source_lang=None, target_lang=None, reverse=False)</strong></p>\n<p>作用：翻译用户给定的句子，输出翻译结果</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">words</td>\n<td align=\"left\">你想要翻译的句子</td>\n</tr>\n<tr>\n<td align=\"left\">source_lang</td>\n<td align=\"left\">源语言代码（非必须）</td>\n</tr>\n<tr>\n<td align=\"left\">target_lang</td>\n<td align=\"left\">目标语言代码（非必须）</td>\n</tr>\n<tr>\n<td align=\"left\">reverse</td>\n<td align=\"left\">是否反转源语言与目标语言</td>\n</tr>\n</tbody></table></div>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> bdtrans</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bdtrans.trans(<span class=\"string\">'Hello, boy!'</span>,<span class=\"string\">'en'</span>,<span class=\"string\">'zh'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>你好，男孩！</span><br></pre></td></tr></table></div></figure>\n\n\n<p><strong>io_trans(input_file, output_file=None, quiet=False)</strong></p>\n<p>作用：从文件中读取翻译内容，如果指定了输出文件，翻译结果将被存储到输出文件中</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">input_file</td>\n<td align=\"left\">输入的文件名</td>\n</tr>\n<tr>\n<td align=\"left\">output_file</td>\n<td align=\"left\">输出的文件名</td>\n</tr>\n<tr>\n<td align=\"left\">quiet</td>\n<td align=\"left\">是否关闭控制台输出</td>\n</tr>\n</tbody></table></div>\n<p> <strong>set_lang(source_lang, target_lang)</strong></p>\n<p>作用：设置源语言代码与目标语言代码</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">source_lang</td>\n<td align=\"left\">源语言代码</td>\n</tr>\n<tr>\n<td align=\"left\">target_lang</td>\n<td align=\"left\">目标语言代码</td>\n</tr>\n</tbody></table></div>\n<p> <strong>save(file_name)</strong></p>\n<p>作用：保存翻译结果到文件中</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">file_name</td>\n<td align=\"left\">保存的文件名</td>\n</tr>\n</tbody></table></div>\n<p><strong>reverse_lang()</strong></p>\n<p>作用：反转源语言与目标语言</p>\n<p><strong>list_langs()</strong></p>\n<p>作用：打印目前支持的语言列表</p>\n<p><strong>display_rules</strong></p>\n<p>作用：显示当前的语言翻译规则</p>\n<p><strong>change_appid()</strong></p>\n<p>作用：按照向导改变配置文件中的AppID</p>\n<p><strong>change_lang()</strong></p>\n<p>作用：按照向导改变配置文件中的默认翻译规则</p>\n<p><strong>initialize_app()</strong></p>\n<p>作用：按照向导初始化APP</p>\n<h3 id=\"命令行工具\"><span class=\"heading-link\">命令行工具</span></h3><blockquote>\n<p>可以直接在命令行下使用它，最重要的是你可以使用 “bdtrans -S” 进入交互式的翻译环境。</p>\n</blockquote>\n<p><strong>bdtrans [选项] 待翻译文本</strong></p>\n<h4 id=\"选项\"><span class=\"heading-link\">选项</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-h, –help</td>\n<td align=\"left\">显示帮助消息</td>\n</tr>\n<tr>\n<td align=\"left\">-v, –version</td>\n<td align=\"left\">显示程序版本</td>\n</tr>\n<tr>\n<td align=\"left\">-l, –list</td>\n<td align=\"left\">打印语言列表</td>\n</tr>\n<tr>\n<td align=\"left\">-S, –shell</td>\n<td align=\"left\">启动交互式翻译环境</td>\n</tr>\n<tr>\n<td align=\"left\">-s code, –source code</td>\n<td align=\"left\">指定源语言</td>\n</tr>\n<tr>\n<td align=\"left\">-t code, –target code</td>\n<td align=\"left\">指定目标语言</td>\n</tr>\n<tr>\n<td align=\"left\">-i filename, –input filename</td>\n<td align=\"left\">指定输入文件</td>\n</tr>\n<tr>\n<td align=\"left\">-o filename, –output filename</td>\n<td align=\"left\">指定输出文件</td>\n</tr>\n<tr>\n<td align=\"left\">–init</td>\n<td align=\"left\">按照向导初始化APP</td>\n</tr>\n<tr>\n<td align=\"left\">–changeinfo</td>\n<td align=\"left\">改变配置文件中的AppID</td>\n</tr>\n<tr>\n<td align=\"left\">–changelang</td>\n<td align=\"left\">改变配置文件中的翻译规则</td>\n</tr>\n</tbody></table></div>\n<h4 id=\"交互环境下的选项\"><span class=\"heading-link\">交互环境下的选项</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/reve</td>\n<td align=\"left\">反转源语言与目标语言</td>\n</tr>\n<tr>\n<td align=\"left\">/rule</td>\n<td align=\"left\">显示当前的翻译规则</td>\n</tr>\n<tr>\n<td align=\"left\">/list</td>\n<td align=\"left\">打印支持的语言列表</td>\n</tr>\n<tr>\n<td align=\"left\">/help</td>\n<td align=\"left\">显示帮助信息</td>\n</tr>\n<tr>\n<td align=\"left\">/quit</td>\n<td align=\"left\">退出交互环境</td>\n</tr>\n<tr>\n<td align=\"left\">/save filename</td>\n<td align=\"left\">保存翻译结果</td>\n</tr>\n<tr>\n<td align=\"left\">/setlang source_lang target_lang</td>\n<td align=\"left\">设置源语言与目标语言</td>\n</tr>\n<tr>\n<td align=\"left\"><figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@host:$ bdtrans 德玛西亚万岁</span><br><span class=\"line\">user@host:$ Long live Demasia</span><br><span class=\"line\">user@host:$ bdtrans -t ara 德玛西亚万岁</span><br><span class=\"line\">user@host:$ فيفا دي مارسيا</span><br><span class=\"line\">user@host:$ bdtrans -s zh 德玛西亚万岁</span><br><span class=\"line\">user@host:$ 不可以只指定源语言！</span><br></pre></td></tr></table></div></figure></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table></div>\n<blockquote>\n<p>在交互环境下可以使用 =code 来临时的指定目标语言，此时源语言将自动的被指定为auto, 例如 “ =zh hello world “</p>\n</blockquote>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;=th 你在地球嗑瓜子</span><br><span class=\"line\">คุณใช้เมล็ดแตงโมบนโลก</span><br><span class=\"line\">&gt;=jp 我在月球吃西瓜</span><br><span class=\"line\">月でスイカを食べます</span><br></pre></td></tr></table></div></figure>\n\n\n<h3 id=\"支持的语言列表\"><span class=\"heading-link\">支持的语言列表</span></h3><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"left\">语言代码</th>\n<th align=\"left\">语言</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">zh</td>\n<td align=\"left\">中文</td>\n</tr>\n<tr>\n<td align=\"left\">en</td>\n<td align=\"left\">英语</td>\n</tr>\n<tr>\n<td align=\"left\">yue</td>\n<td align=\"left\">粤语</td>\n</tr>\n<tr>\n<td align=\"left\">wyw</td>\n<td align=\"left\">文言文</td>\n</tr>\n<tr>\n<td align=\"left\">jp</td>\n<td align=\"left\">日语</td>\n</tr>\n<tr>\n<td align=\"left\">kor</td>\n<td align=\"left\">韩语</td>\n</tr>\n<tr>\n<td align=\"left\">fra</td>\n<td align=\"left\">法语</td>\n</tr>\n<tr>\n<td align=\"left\">spa</td>\n<td align=\"left\">西班牙语</td>\n</tr>\n<tr>\n<td align=\"left\">th</td>\n<td align=\"left\">泰语</td>\n</tr>\n<tr>\n<td align=\"left\">ara</td>\n<td align=\"left\">阿拉伯语</td>\n</tr>\n<tr>\n<td align=\"left\">ru</td>\n<td align=\"left\">俄语</td>\n</tr>\n<tr>\n<td align=\"left\">pt</td>\n<td align=\"left\">葡萄牙语</td>\n</tr>\n<tr>\n<td align=\"left\">de</td>\n<td align=\"left\">德语</td>\n</tr>\n<tr>\n<td align=\"left\">it</td>\n<td align=\"left\">意大利语</td>\n</tr>\n<tr>\n<td align=\"left\">el</td>\n<td align=\"left\">希腊语</td>\n</tr>\n<tr>\n<td align=\"left\">nl</td>\n<td align=\"left\">荷兰语</td>\n</tr>\n<tr>\n<td align=\"left\">pl</td>\n<td align=\"left\">波兰语</td>\n</tr>\n<tr>\n<td align=\"left\">bul</td>\n<td align=\"left\">保加利亚语</td>\n</tr>\n<tr>\n<td align=\"left\">est</td>\n<td align=\"left\">爱沙尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">dan</td>\n<td align=\"left\">丹麦语</td>\n</tr>\n<tr>\n<td align=\"left\">fin</td>\n<td align=\"left\">芬兰语</td>\n</tr>\n<tr>\n<td align=\"left\">cs</td>\n<td align=\"left\">捷克语</td>\n</tr>\n<tr>\n<td align=\"left\">rom</td>\n<td align=\"left\">罗马尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">slo</td>\n<td align=\"left\">斯洛文尼亚语</td>\n</tr>\n<tr>\n<td align=\"left\">swe</td>\n<td align=\"left\">瑞典语</td>\n</tr>\n<tr>\n<td align=\"left\">hu</td>\n<td align=\"left\">匈牙利语</td>\n</tr>\n<tr>\n<td align=\"left\">cht</td>\n<td align=\"left\">繁体中文</td>\n</tr>\n<tr>\n<td align=\"left\">vie</td>\n<td align=\"left\">越南语</td>\n</tr>\n<tr>\n<td align=\"left\">auto</td>\n<td align=\"left\">自动检测</td>\n</tr>\n</tbody></table></div>\n"},{"title":"C++ 标准线程库","date":"2019-11-25T07:50:29.000Z","reward":true,"_content":"\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","source":"_posts/C++标准线程库.md","raw":"---\ntitle: C++ 标准线程库\ndate: 2019-11-25 15:50:29\npermalink: 1\ncategories: 编程语言\ntags: C++\nreward: true\n---\n\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","slug":"1","published":1,"updated":"2019-12-09T14:51:22.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tl0004a7fw40b6e6gj","content":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。</thread></thread></p>\n<p>　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）</thread></p>\n<h3 id=\"创建一个线程\"><span class=\"heading-link\">创建一个线程</span></h3><p>std::thread 类用来创建一个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev01.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;  // 引入线程库头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程 trd 结束</span></span><br><span class=\"line\">  trd.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译dev01.cc （需要动态链接pthread库）</span><br><span class=\"line\">g++ -o dev dev.cc -lpthread &amp;&amp; ./dev</span><br><span class=\"line\">输出：index 的值为 1</span><br></pre></td></tr></table></div></figure>\n<p>　　std::thread 的初始化构造函数原型为<code>template &lt;class Fn, class... Args&gt;</code>, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。<strong>值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。</strong></p>\n<p>　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。</p>\n<p>【拷贝构造函数】<br> std::thread 类不支持拷贝构造 <code>thread (const thread&amp;) = delete;</code></p>\n<p>【移动构造函数】<br>std::thread 类支持移动构造函数 <code>thread (thread&amp;&amp; x) noexcept;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev02.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"index 的值为!\"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程 trd, 传入参数 1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动动构造一个线程对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此时trd对象不再代表任何执行线程</span></span><br><span class=\"line\">  <span class=\"comment\">// trd.join();</span></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>【赋值操作符】<br> 可以使用赋值操作符移动赋值线程对象<code>thread&amp; operator= (thread&amp;&amp; rhs) noexcept;</code><br> 不可以使赋值操作符拷贝赋值线程对象<code>thread&amp; operator= (const thread&amp;) = delete;</code></p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev03.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是线程 \"</span> &lt;&lt; index &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建线程对象数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 调用类的默认构造函数</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用赋值操作符移动赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 该操作不会以任何方式影响被移动线程的执行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等待线程结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">我是线程 2</span><br><span class=\"line\">我是线程 3</span><br><span class=\"line\">我是线程 1</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。<br>而且，输出也并不总是这样顺眼，比如下面的输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是线程 我是线程 21我是线程 3</span><br></pre></td></tr></table></div></figure>\n<p>Display 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。</p>\n<h3 id=\"获取线程ID\"><span class=\"heading-link\">获取线程ID</span></h3><p>每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev04.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trds[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    trds[i] = <span class=\"built_in\">std</span>::thread(Display, i + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程ID 的类型为 std::thread::id</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::thread::id tid = trds[i].get_id();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程\"</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; tid &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trds[i].join();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程1 140121399854848</span><br><span class=\"line\">线程2 140121391462144</span><br><span class=\"line\">线程3 140121383069440</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"检测线程可连接性\"><span class=\"heading-link\">检测线程可连接性</span></h3><p>通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。<br>如果线程对象表示执行线程，则该对象是可连接的。<br>在以下任何情况下，线程对象均不可连接：</p>\n<ol>\n<li>线程对象是由默认构造函数生成的</li>\n<li>线程对象已经被移动（通过移动构造函数或赋值操作符）</li>\n<li>已经调用过线程对象的 join 或 detach 函数</li>\n</ol>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev05.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//std::cout &lt;&lt; \"我是线程 \" &lt;&lt; index &lt;&lt; std::endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认构造 trd1</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::thread trd1;</span><br><span class=\"line\">  <span class=\"comment\">// 正常构造 trd2</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 移动构造 trd3</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd3</span><span class=\"params\">(<span class=\"built_in\">std</span>::move(trd2))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd1.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd1.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd1不可连接，它是默认构造的\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd2.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd2.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd2不可连接，它已经被移动了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3不可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(trd3.joinable()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3可连接\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    trd3.join();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程对象trd3现在不可连接了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">线程对象trd1不可连接，它是默认构造的</span><br><span class=\"line\">线程对象trd2不可连接，它已经被移动了</span><br><span class=\"line\">线程对象trd3可连接</span><br><span class=\"line\">线程对象trd3现在不可连接了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"分离线程\"><span class=\"heading-link\">分离线程</span></h3><p>调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev06.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DelayThread</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// sleep_for函数使线程睡眠s秒</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(s));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\"秒过去了\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(DelayThread, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(DelayThread, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分离线程</span></span><br><span class=\"line\">  trd1.detach();</span><br><span class=\"line\">  trd2.detach();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主线程睡眠5s</span></span><br><span class=\"line\">  DelayThread(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">2秒过去了</span><br><span class=\"line\">5秒过去了</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"交换线程\"><span class=\"heading-link\">交换线程</span></h3><p>通过调用线程对象的swap函数可以交换两个线程</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev07.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(Display, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交换两个线程</span></span><br><span class=\"line\">  trd1.swap(trd2);</span><br><span class=\"line\">  <span class=\"comment\">// 同样可以调用非成员函数交换两个线程</span></span><br><span class=\"line\">  <span class=\"comment\">// swap(trd1, trd2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd1 ID: \"</span> &lt;&lt; trd1.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"trd2 ID: \"</span> &lt;&lt; trd2.get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">交换前：</span><br><span class=\"line\">trd1 ID: 140593231992576</span><br><span class=\"line\">trd2 ID: 140593223599872</span><br><span class=\"line\">交换后：</span><br><span class=\"line\">trd1 ID: 140593223599872</span><br><span class=\"line\">trd2 ID: 140593231992576</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取硬件并发数量\"><span class=\"heading-link\">获取硬件并发数量</span></h3><p>有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。</p>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev08.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::thread::hardware_concurrency();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出（在我的四核心处理器上）</span><br><span class=\"line\">4</span><br><span class=\"line\">编译上面的程序输出（在我的单核心处理器上）</span><br><span class=\"line\">1</span><br></pre></td></tr></table></div></figure>\n<p>值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。</p>\n<h3 id=\"访问当前线程\"><span class=\"heading-link\">访问当前线程</span></h3><p>　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。</p>\n<ul>\n<li>get_id<br><code>thread::id get_id() noexcept;</code><br>获取当先线程ID</li>\n<li>yield<br><code>void yield() noexcept;</code><br>阻塞当先线程的执行</li>\n<li>sleep_for<br><code>template &lt;class Rep, class Period&gt;</code><br><code>void sleep_for (const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</code><br>阻塞当前线程的执行一段时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev09.cc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> ready = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 等待 5 秒钟后设置全局变量 ready 的值为 true</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_for(<span class=\"built_in\">std</span>::chrono::seconds(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Display 函数即将继续执行\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  ready = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞当前线程的执行，直到SetReady 函数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 全局变量 ready 的值为 true 的时候才继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!ready) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::this_thread::yield();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"线程ID: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::this_thread::get_id() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd1</span><span class=\"params\">(SetReady)</span></span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\">thread <span class=\"title\">trd2</span><span class=\"params\">(Display)</span></span>;</span><br><span class=\"line\">  trd1.join();</span><br><span class=\"line\">  trd2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Display 函数即将继续执行</span><br><span class=\"line\">线程ID: 140362842375936</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>sleep_until<br><code>template &lt;class Clock, class Duration&gt;</code><br><code>void sleep_until (const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</code><br>阻塞当前线程的执行直到某个时间</li>\n</ul>\n<figure class=\"highlight cpp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev10.cc</span></span><br><span class=\"line\"><span class=\"comment\">// this_thread::sleep_for example</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;　　// std::put_time</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;　// std::time_t, std::tm, std::localtime, std::mktime</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::chrono::system_clock;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"keyword\">time_t</span> tt = system_clock::<span class=\"keyword\">to_time_t</span>(system_clock::now());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">std</span>:</span>:tm * ptm = <span class=\"built_in\">std</span>::localtime(&amp;tt);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Current time: \"</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Waiting for the next minute to begin...\\n\"</span>;</span><br><span class=\"line\">  ++ptm-&gt;tm_min; ptm-&gt;tm_sec=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::this_thread::sleep_until(system_clock::<span class=\"keyword\">from_time_t</span>(mktime(ptm)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::put_time(ptm,<span class=\"string\">\"%X\"</span>) &lt;&lt; <span class=\"string\">\" reached!\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译上面的程序输出：</span><br><span class=\"line\">Current time: 22:08:36</span><br><span class=\"line\">Waiting for the next minute to begin...</span><br><span class=\"line\">22:09:00 reached!</span><br></pre></td></tr></table></div></figure>\n<p>上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。</p>\n<p>以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：<span class=\"external-link\"><a href=\"https://github.com/zsimline/sweetea/tree/master/code/archives-667\" target=\"_blank\" rel=\"noopener\">https://github.com/zsimline/sweetea/tree/master/code/archives-667</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>参考资料：<br>[1] CPP官网 <span class=\"external-link\"><a href=\"http://www.cplusplus.com/reference/thread/\" target=\"_blank\" rel=\"noopener\">http://www.cplusplus.com/reference/thread/</a><i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"flex布局中flex-grow与flex-shrink的计算方式","date":"2019-12-08T13:57:10.000Z","reward":true,"_content":"\n　　CSS 中的 `Flex(弹性布局)` 可以很灵活的控制网页的布局，其中决定 `Flex` 布局内项目宽度/高度的是三个属性：\n`flex-basis`, `flex-grow`, `flex-shrink`. \n\n\n### flex-basis\n\n　　flex-basis 决定了项目占据主轴的空间，除非使用 `box-sizing` 进行设置，否则它将设置内容框的大小，因此当你指定一个flex项的大小时需要额外小心，因为它很肯能包含内边距与边框。\n\n　　你可以为其指定一个具体的CSS尺寸值，也可以指定其占据父元素的百分比，它的默认值为 `auto`(根据内容自动调整大小)\n\n```html\n  <!-- demo-1 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px</div>\n    <div class=\"child2\">200px</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">10%</div>\n    <div class=\"child2\">20%</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">30%</div>\n    <div class=\"child2\">auto</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 500px;\n      display: flex;\n      margin-bottom: 15px;\n      text-align: center;\n      background-color: #eeeeee;\n    }\n\n    /** 像素值*/\n    .parent:nth-child(1) .child1 {\n      flex-basis: 100px;\n      background-color: #356969\n    }\n    .parent:nth-child(1) .child2 {\n      flex-basis: 200px;\n      background-color: #369925;\n    }\n\n    /** 百分比 */\n    .parent:nth-child(2) .child1 {\n      flex-basis: 10%;\n      background-color: #356969\n    }\n    .parent:nth-child(2) .child2 {\n      flex-basis: 20%;\n      background-color: #369925;\n    }\n\n    /** 自动 */\n    .parent:nth-child(3) .child1 {\n      flex-basis: 30%;\n      background-color: #356969\n    }\n    .parent:nth-child(3) .child2 {\n      flex-basis: auto;\n      background-color: #369925;\n    }\n  </style>\n```\n\n![flex-basis](/assets/images/map/4/ar4-1.png)\n\n### flex-grow\n\n　　flex-grow 设置当 flex 容器存在剩余空间(flex容器的大小减去所有flex项的大小之和)时项目的放大比例，它的默认值为 0 (即使存在剩余空间也不放大)。如果所有项目的 flex-grow 属性值都是相同的，则它们将等分剩余空间，否则，将根据不同的属性值所定义的比率进行分配。\n\n　　例如，主轴长度为600px, 项目1占据50px, 项目2占据100px, 项目3占据150px, 则剩余空间为：600px - (50px + 100px + 150px) = 300px\n\n　　假如每个项目的 `flex-grow` 属性值都相同(例如都为1)，则所有项目分配到相同的剩余空间：\n　　- 项目1: 300px * (1 / (1 + 1 + 1)) = 100px;\n　　- 项目2: 300px * (1 / (1 + 1 + 1)) = 100px;\n　　- 项目3: 300px * (1 / (1 + 1 + 1)) = 100px;\n\n```html\n  <!-- demo-2 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 100px</div>\n    <div class=\"child2\">100px + 100px</div>\n    <div class=\"child3\">150px + 100px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 1;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 1;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-2.png)\n\n　　假设每个项目的 flex-grow 属性的值并不都是相同的，例如项目1为 1, 项目2为 2, 项目3为 3, 则它们分配到的剩余空间分别为：\n　　- 项目1: 300px * (1 / (1 + 2 + 3)) = 50px; \n　　- 项目2: 300px * (2 / (1 + 2 + 3)) = 100px; \n　　- 项目3: 300px * (3 / (1 + 2 + 3)) = 150px; \n\n```html\n  <!-- demo-3 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 50px</div>\n    <div class=\"child2\">100px + 100px</div>\n    <div class=\"child3\">150px + 150px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 2;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 3;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-3.png)\n\n　　要是属性值为小数怎么办呢？这里分两种情况：\n　　1. 所有flex项的 flex-gorw 属性值之和大于1，仍然按照上述方式进行计算；\n　　2. 所有flex项的 flex-gorw 属性值之和小于1，**基值按照1来进行计算**，例如项目1为 0.2, 项目2为 0.3, 项目3为 0.4, 则它们分配到的剩余空间分别为：\n　　- 项目1: 300px * (0.2 / 1) = 60px;\n　　- 项目2: 300px * (0.3 / 1) = 90px; \n　　- 项目3: 300px * (0.4 / 1) = 120px; \n\n```html\n  <!-- demo-4 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 60px</div>\n    <div class=\"child2\">100px + 90px</div>\n    <div class=\"child3\">150px + 120px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 0.2;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 0.3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 0.4;\n      background-color: #CC3300;\n    }\n```\n![flex-grow](/assets/images/map/4/ar4-4.png)\n\n\n### flex-shrink\n\n　　flex-shrink 设置当 flex 容器空间不足时项目的放大比例，它的默认值为 1 (空间不足时该项目将缩小)。\n\n　　flex-shrink 的计算方式与 flex-grow 略有不同，有两个因素影响 flex 项该缩小多少，一个是 flex-shrink 的属性值，另一个是 flex 项本身的大小，它们按各自的权重进行缩小，举例来说：\n\n　　主轴长度为600px, 项目1占据100px, 项目2占据300px, 项目3占据500px, 每个项目的 `flex-shrink` 属性值分别为1,3,2, 则总权重为 100px * 1 + 300px * 3 + 500px *2 = 2000px, 每个项目的权重分别为为：\n　　- 项目1: (100px * 1) / 2000px = 0.05;\n　　- 项目2: (300px * 3) / 2000px = 0.45;\n　　- 项目3: (500px * 2) / 2000px = 0.50;\n　　溢出的空间长度为：100px + 300px + 500px - 600px = 300px;\n　　那么每个项目分别缩小：\n　　- 项目1: 300px * 0.05 = 15px;\n　　- 项目2: 300px * 0.45 = 135px;\n　　- 项目3: 300px * 0.50 = 150px;\n\n```html\n  <!-- demo-5 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px - 15px</div>\n    <div class=\"child2\">300px - 135px</div>\n    <div class=\"child3\">500px - 150px</div>\n  </div>\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 100px;\n      flex-shrink: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 300px;\n      flex-shrink: 3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 500px;\n      flex-shrink: 2;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-5.png)\n\n　　同样的，当 flex-shrink 的值为小数时，也分两种情况：\n　　1. 所有flex项的 flex-shrink 属性值之和大于1，仍然按照上述方式进行计算；\n　　2. 所有flex项的 flex-shrink 属性值之和小于1，**只收缩溢出空间的一部分**，例如项目1为 0.1, 项目2为 0.3, 项目3为 0.2, 则总的收缩空间为：\n　　300px * (0.1 + 0.3 + 0.2) = 180px　　\n　　每个项的权重计算方式是不变的，每个项目分别缩小：\n　　- 项目1: 180px * 0.05 = 9px;\n　　- 项目2: 180px * 0.45 = 81px;\n　　- 项目3: 180px * 0.50 = 90px;\n\n```html\n  <!-- demo-6 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px - 9px</div>\n    <div class=\"child2\">300px - 135px</div>\n    <div class=\"child3\">500px - 90px</div>\n  </div>\n\n    <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 100px;\n      flex-shrink: 0.1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 300px;\n      flex-shrink: 0.3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 500px;\n      flex-shrink: 0.2;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-6.png)\n\n　　由于只收缩了溢出空间的一部分，div 内的元素总宽度实际上是超出 div 的宽度的。\n\n　　以上就是关于使用flex布局中 flex-grow 与 flex-shrink 计算方式的简单介绍。\n\n*该篇博客内的代码已同步到[Github](https://github.com/zsimline/mxsyx-public/tree/master/code/archive-4)*\n\n参考资料：\n  [1]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis\n  [2]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow\n  [3]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink\n","source":"_posts/flex布局中flex-grow与flex-shrink的计算方式.md","raw":"---\ntitle: flex布局中flex-grow与flex-shrink的计算方式\ndate: 2019-12-08 21:57:10\npermalink: 4\ntags: CSS\ncategories: [前端, CSS]\nreward: true\n---\n\n　　CSS 中的 `Flex(弹性布局)` 可以很灵活的控制网页的布局，其中决定 `Flex` 布局内项目宽度/高度的是三个属性：\n`flex-basis`, `flex-grow`, `flex-shrink`. \n\n\n### flex-basis\n\n　　flex-basis 决定了项目占据主轴的空间，除非使用 `box-sizing` 进行设置，否则它将设置内容框的大小，因此当你指定一个flex项的大小时需要额外小心，因为它很肯能包含内边距与边框。\n\n　　你可以为其指定一个具体的CSS尺寸值，也可以指定其占据父元素的百分比，它的默认值为 `auto`(根据内容自动调整大小)\n\n```html\n  <!-- demo-1 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px</div>\n    <div class=\"child2\">200px</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">10%</div>\n    <div class=\"child2\">20%</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">30%</div>\n    <div class=\"child2\">auto</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 500px;\n      display: flex;\n      margin-bottom: 15px;\n      text-align: center;\n      background-color: #eeeeee;\n    }\n\n    /** 像素值*/\n    .parent:nth-child(1) .child1 {\n      flex-basis: 100px;\n      background-color: #356969\n    }\n    .parent:nth-child(1) .child2 {\n      flex-basis: 200px;\n      background-color: #369925;\n    }\n\n    /** 百分比 */\n    .parent:nth-child(2) .child1 {\n      flex-basis: 10%;\n      background-color: #356969\n    }\n    .parent:nth-child(2) .child2 {\n      flex-basis: 20%;\n      background-color: #369925;\n    }\n\n    /** 自动 */\n    .parent:nth-child(3) .child1 {\n      flex-basis: 30%;\n      background-color: #356969\n    }\n    .parent:nth-child(3) .child2 {\n      flex-basis: auto;\n      background-color: #369925;\n    }\n  </style>\n```\n\n![flex-basis](/assets/images/map/4/ar4-1.png)\n\n### flex-grow\n\n　　flex-grow 设置当 flex 容器存在剩余空间(flex容器的大小减去所有flex项的大小之和)时项目的放大比例，它的默认值为 0 (即使存在剩余空间也不放大)。如果所有项目的 flex-grow 属性值都是相同的，则它们将等分剩余空间，否则，将根据不同的属性值所定义的比率进行分配。\n\n　　例如，主轴长度为600px, 项目1占据50px, 项目2占据100px, 项目3占据150px, 则剩余空间为：600px - (50px + 100px + 150px) = 300px\n\n　　假如每个项目的 `flex-grow` 属性值都相同(例如都为1)，则所有项目分配到相同的剩余空间：\n　　- 项目1: 300px * (1 / (1 + 1 + 1)) = 100px;\n　　- 项目2: 300px * (1 / (1 + 1 + 1)) = 100px;\n　　- 项目3: 300px * (1 / (1 + 1 + 1)) = 100px;\n\n```html\n  <!-- demo-2 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 100px</div>\n    <div class=\"child2\">100px + 100px</div>\n    <div class=\"child3\">150px + 100px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 1;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 1;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-2.png)\n\n　　假设每个项目的 flex-grow 属性的值并不都是相同的，例如项目1为 1, 项目2为 2, 项目3为 3, 则它们分配到的剩余空间分别为：\n　　- 项目1: 300px * (1 / (1 + 2 + 3)) = 50px; \n　　- 项目2: 300px * (2 / (1 + 2 + 3)) = 100px; \n　　- 项目3: 300px * (3 / (1 + 2 + 3)) = 150px; \n\n```html\n  <!-- demo-3 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 50px</div>\n    <div class=\"child2\">100px + 100px</div>\n    <div class=\"child3\">150px + 150px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 2;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 3;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-3.png)\n\n　　要是属性值为小数怎么办呢？这里分两种情况：\n　　1. 所有flex项的 flex-gorw 属性值之和大于1，仍然按照上述方式进行计算；\n　　2. 所有flex项的 flex-gorw 属性值之和小于1，**基值按照1来进行计算**，例如项目1为 0.2, 项目2为 0.3, 项目3为 0.4, 则它们分配到的剩余空间分别为：\n　　- 项目1: 300px * (0.2 / 1) = 60px;\n　　- 项目2: 300px * (0.3 / 1) = 90px; \n　　- 项目3: 300px * (0.4 / 1) = 120px; \n\n```html\n  <!-- demo-4 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">50px + 60px</div>\n    <div class=\"child2\">100px + 90px</div>\n    <div class=\"child3\">150px + 120px</div>\n  </div>\n\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 50px;\n      flex-grow: 0.2;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 100px;\n      flex-grow: 0.3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 150px;\n      flex-grow: 0.4;\n      background-color: #CC3300;\n    }\n```\n![flex-grow](/assets/images/map/4/ar4-4.png)\n\n\n### flex-shrink\n\n　　flex-shrink 设置当 flex 容器空间不足时项目的放大比例，它的默认值为 1 (空间不足时该项目将缩小)。\n\n　　flex-shrink 的计算方式与 flex-grow 略有不同，有两个因素影响 flex 项该缩小多少，一个是 flex-shrink 的属性值，另一个是 flex 项本身的大小，它们按各自的权重进行缩小，举例来说：\n\n　　主轴长度为600px, 项目1占据100px, 项目2占据300px, 项目3占据500px, 每个项目的 `flex-shrink` 属性值分别为1,3,2, 则总权重为 100px * 1 + 300px * 3 + 500px *2 = 2000px, 每个项目的权重分别为为：\n　　- 项目1: (100px * 1) / 2000px = 0.05;\n　　- 项目2: (300px * 3) / 2000px = 0.45;\n　　- 项目3: (500px * 2) / 2000px = 0.50;\n　　溢出的空间长度为：100px + 300px + 500px - 600px = 300px;\n　　那么每个项目分别缩小：\n　　- 项目1: 300px * 0.05 = 15px;\n　　- 项目2: 300px * 0.45 = 135px;\n　　- 项目3: 300px * 0.50 = 150px;\n\n```html\n  <!-- demo-5 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px - 15px</div>\n    <div class=\"child2\">300px - 135px</div>\n    <div class=\"child3\">500px - 150px</div>\n  </div>\n  <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 100px;\n      flex-shrink: 1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 300px;\n      flex-shrink: 3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 500px;\n      flex-shrink: 2;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-5.png)\n\n　　同样的，当 flex-shrink 的值为小数时，也分两种情况：\n　　1. 所有flex项的 flex-shrink 属性值之和大于1，仍然按照上述方式进行计算；\n　　2. 所有flex项的 flex-shrink 属性值之和小于1，**只收缩溢出空间的一部分**，例如项目1为 0.1, 项目2为 0.3, 项目3为 0.2, 则总的收缩空间为：\n　　300px * (0.1 + 0.3 + 0.2) = 180px　　\n　　每个项的权重计算方式是不变的，每个项目分别缩小：\n　　- 项目1: 180px * 0.05 = 9px;\n　　- 项目2: 180px * 0.45 = 81px;\n　　- 项目3: 180px * 0.50 = 90px;\n\n```html\n  <!-- demo-6 -->\n\n  <div class=\"parent\">\n    <div class=\"child1\">100px - 9px</div>\n    <div class=\"child2\">300px - 135px</div>\n    <div class=\"child3\">500px - 90px</div>\n  </div>\n\n    <style>\n    .parent {\n      width: 600px;\n      display: flex;\n      text-align: center;\n      color: #eee;\n    }\n\n    .child1 {\n      flex-basis: 100px;\n      flex-shrink: 0.1;\n      background-color: #0066CC;\n    } \n\n    .child2 {\n      flex-basis: 300px;\n      flex-shrink: 0.3;\n      background-color: #009900;\n    }\n\n    .child3 {\n      flex-basis: 500px;\n      flex-shrink: 0.2;\n      background-color: #CC3300;\n    }\n  </style>\n```\n\n![flex-grow](/assets/images/map/4/ar4-6.png)\n\n　　由于只收缩了溢出空间的一部分，div 内的元素总宽度实际上是超出 div 的宽度的。\n\n　　以上就是关于使用flex布局中 flex-grow 与 flex-shrink 计算方式的简单介绍。\n\n*该篇博客内的代码已同步到[Github](https://github.com/zsimline/mxsyx-public/tree/master/code/archive-4)*\n\n参考资料：\n  [1]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis\n  [2]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow\n  [3]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink\n","slug":"4","published":1,"updated":"2019-12-15T15:18:15.444Z","_id":"ck41300to0006a7fw3dlaeieq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　CSS 中的 <code>Flex(弹性布局)</code> 可以很灵活的控制网页的布局，其中决定 <code>Flex</code> 布局内项目宽度/高度的是三个属性：<br><code>flex-basis</code>, <code>flex-grow</code>, <code>flex-shrink</code>. </p>\n<h3 id=\"flex-basis\"><span class=\"heading-link\">flex-basis</span></h3><p>　　flex-basis 决定了项目占据主轴的空间，除非使用 <code>box-sizing</code> 进行设置，否则它将设置内容框的大小，因此当你指定一个flex项的大小时需要额外小心，因为它很肯能包含内边距与边框。</p>\n<p>　　你可以为其指定一个具体的CSS尺寸值，也可以指定其占据父元素的百分比，它的默认值为 <code>auto</code>(根据内容自动调整大小)</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>10%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>20%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>30%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>auto<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    margin-bottom: 15px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#eeeeee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 像素值*/</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(1)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(1)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 200px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 百分比 */</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(2)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 10%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(2)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 20%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 自动 */</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(3)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 30%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(3)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: auto;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-1.png\" alt=\"flex-basis\"></p>\n<h3 id=\"flex-grow\"><span class=\"heading-link\">flex-grow</span></h3><p>　　flex-grow 设置当 flex 容器存在剩余空间(flex容器的大小减去所有flex项的大小之和)时项目的放大比例，它的默认值为 0 (即使存在剩余空间也不放大)。如果所有项目的 flex-grow 属性值都是相同的，则它们将等分剩余空间，否则，将根据不同的属性值所定义的比率进行分配。</p>\n<p>　　例如，主轴长度为600px, 项目1占据50px, 项目2占据100px, 项目3占据150px, 则剩余空间为：600px - (50px + 100px + 150px) = 300px</p>\n<p>　　假如每个项目的 <code>flex-grow</code> 属性值都相同(例如都为1)，则所有项目分配到相同的剩余空间：<br>　　- 项目1: 300px * (1 / (1 + 1 + 1)) = 100px;<br>　　- 项目2: 300px * (1 / (1 + 1 + 1)) = 100px;<br>　　- 项目3: 300px * (1 / (1 + 1 + 1)) = 100px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-2 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-2.png\" alt=\"flex-grow\"></p>\n<p>　　假设每个项目的 flex-grow 属性的值并不都是相同的，例如项目1为 1, 项目2为 2, 项目3为 3, 则它们分配到的剩余空间分别为：<br>　　- 项目1: 300px * (1 / (1 + 2 + 3)) = 50px;<br>　　- 项目2: 300px * (2 / (1 + 2 + 3)) = 100px;<br>　　- 项目3: 300px * (3 / (1 + 2 + 3)) = 150px; </p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-3 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-grow: 2;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\">    flex-grow: 3;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-3.png\" alt=\"flex-grow\"></p>\n<p>　　要是属性值为小数怎么办呢？这里分两种情况：<br>　　1. 所有flex项的 flex-gorw 属性值之和大于1，仍然按照上述方式进行计算；<br>　　2. 所有flex项的 flex-gorw 属性值之和小于1，<strong>基值按照1来进行计算</strong>，例如项目1为 0.2, 项目2为 0.3, 项目3为 0.4, 则它们分配到的剩余空间分别为：<br>　　- 项目1: 300px * (0.2 / 1) = 60px;<br>　　- 项目2: 300px * (0.3 / 1) = 90px;<br>　　- 项目3: 300px * (0.4 / 1) = 120px; </p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-4 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 60px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 90px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 120px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.2</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.4</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/assets/images/map/4/ar4-4.png\" alt=\"flex-grow\"></p>\n<h3 id=\"flex-shrink\"><span class=\"heading-link\">flex-shrink</span></h3><p>　　flex-shrink 设置当 flex 容器空间不足时项目的放大比例，它的默认值为 1 (空间不足时该项目将缩小)。</p>\n<p>　　flex-shrink 的计算方式与 flex-grow 略有不同，有两个因素影响 flex 项该缩小多少，一个是 flex-shrink 的属性值，另一个是 flex 项本身的大小，它们按各自的权重进行缩小，举例来说：</p>\n<p>　　主轴长度为600px, 项目1占据100px, 项目2占据300px, 项目3占据500px, 每个项目的 <code>flex-shrink</code> 属性值分别为1,3,2, 则总权重为 100px * 1 + 300px * 3 + 500px *2 = 2000px, 每个项目的权重分别为为：<br>　　- 项目1: (100px * 1) / 2000px = 0.05;<br>　　- 项目2: (300px * 3) / 2000px = 0.45;<br>　　- 项目3: (500px * 2) / 2000px = 0.50;<br>　　溢出的空间长度为：100px + 300px + 500px - 600px = 300px;<br>　　那么每个项目分别缩小：<br>　　- 项目1: 300px * 0.05 = 15px;<br>　　- 项目2: 300px * 0.45 = 135px;<br>　　- 项目3: 300px * 0.50 = 150px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-5 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px - 15px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>300px - 135px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>500px - 150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 300px;</span><br><span class=\"line\">    flex-shrink: 3;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 500px;</span><br><span class=\"line\">    flex-shrink: 2;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-5.png\" alt=\"flex-grow\"></p>\n<p>　　同样的，当 flex-shrink 的值为小数时，也分两种情况：<br>　　1. 所有flex项的 flex-shrink 属性值之和大于1，仍然按照上述方式进行计算；<br>　　2. 所有flex项的 flex-shrink 属性值之和小于1，<strong>只收缩溢出空间的一部分</strong>，例如项目1为 0.1, 项目2为 0.3, 项目3为 0.2, 则总的收缩空间为：<br>　　300px * (0.1 + 0.3 + 0.2) = 180px　　<br>　　每个项的权重计算方式是不变的，每个项目分别缩小：<br>　　- 项目1: 180px * 0.05 = 9px;<br>　　- 项目2: 180px * 0.45 = 81px;<br>　　- 项目3: 180px * 0.50 = 90px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-6 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px - 9px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>300px - 135px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>500px - 90px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.1</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 300px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 500px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.2</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-6.png\" alt=\"flex-grow\"></p>\n<p>　　由于只收缩了溢出空间的一部分，div 内的元素总宽度实际上是超出 div 的宽度的。</p>\n<p>　　以上就是关于使用flex布局中 flex-grow 与 flex-shrink 计算方式的简单介绍。</p>\n<p><em>该篇博客内的代码已同步到<span class=\"external-link\"><a href=\"https://github.com/zsimline/mxsyx-public/tree/master/code/archive-4\" target=\"_blank\" rel=\"noopener\">Github</a><i class=\"fa fa-external-link\"></i></span></em></p>\n<p>参考资料：<br>  [1]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis</a><i class=\"fa fa-external-link\"></i></span><br>  [2]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow</a><i class=\"fa fa-external-link\"></i></span><br>  [3]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink</a><i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　CSS 中的 <code>Flex(弹性布局)</code> 可以很灵活的控制网页的布局，其中决定 <code>Flex</code> 布局内项目宽度/高度的是三个属性：<br><code>flex-basis</code>, <code>flex-grow</code>, <code>flex-shrink</code>. </p>\n<h3 id=\"flex-basis\"><span class=\"heading-link\">flex-basis</span></h3><p>　　flex-basis 决定了项目占据主轴的空间，除非使用 <code>box-sizing</code> 进行设置，否则它将设置内容框的大小，因此当你指定一个flex项的大小时需要额外小心，因为它很肯能包含内边距与边框。</p>\n<p>　　你可以为其指定一个具体的CSS尺寸值，也可以指定其占据父元素的百分比，它的默认值为 <code>auto</code>(根据内容自动调整大小)</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>10%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>20%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>30%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>auto<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 500px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    margin-bottom: 15px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#eeeeee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 像素值*/</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(1)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(1)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 200px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 百分比 */</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(2)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 10%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(2)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 20%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/** 自动 */</span></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(3)</span> <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 30%;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#356969</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:nth-child(3)</span> <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: auto;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#369925</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-1.png\" alt=\"flex-basis\"></p>\n<h3 id=\"flex-grow\"><span class=\"heading-link\">flex-grow</span></h3><p>　　flex-grow 设置当 flex 容器存在剩余空间(flex容器的大小减去所有flex项的大小之和)时项目的放大比例，它的默认值为 0 (即使存在剩余空间也不放大)。如果所有项目的 flex-grow 属性值都是相同的，则它们将等分剩余空间，否则，将根据不同的属性值所定义的比率进行分配。</p>\n<p>　　例如，主轴长度为600px, 项目1占据50px, 项目2占据100px, 项目3占据150px, 则剩余空间为：600px - (50px + 100px + 150px) = 300px</p>\n<p>　　假如每个项目的 <code>flex-grow</code> 属性值都相同(例如都为1)，则所有项目分配到相同的剩余空间：<br>　　- 项目1: 300px * (1 / (1 + 1 + 1)) = 100px;<br>　　- 项目2: 300px * (1 / (1 + 1 + 1)) = 100px;<br>　　- 项目3: 300px * (1 / (1 + 1 + 1)) = 100px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-2 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-2.png\" alt=\"flex-grow\"></p>\n<p>　　假设每个项目的 flex-grow 属性的值并不都是相同的，例如项目1为 1, 项目2为 2, 项目3为 3, 则它们分配到的剩余空间分别为：<br>　　- 项目1: 300px * (1 / (1 + 2 + 3)) = 50px;<br>　　- 项目2: 300px * (2 / (1 + 2 + 3)) = 100px;<br>　　- 项目3: 300px * (3 / (1 + 2 + 3)) = 150px; </p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-3 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 100px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\">    flex-grow: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-grow: 2;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\">    flex-grow: 3;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-3.png\" alt=\"flex-grow\"></p>\n<p>　　要是属性值为小数怎么办呢？这里分两种情况：<br>　　1. 所有flex项的 flex-gorw 属性值之和大于1，仍然按照上述方式进行计算；<br>　　2. 所有flex项的 flex-gorw 属性值之和小于1，<strong>基值按照1来进行计算</strong>，例如项目1为 0.2, 项目2为 0.3, 项目3为 0.4, 则它们分配到的剩余空间分别为：<br>　　- 项目1: 300px * (0.2 / 1) = 60px;<br>　　- 项目2: 300px * (0.3 / 1) = 90px;<br>　　- 项目3: 300px * (0.4 / 1) = 120px; </p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-4 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>50px + 60px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>100px + 90px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>150px + 120px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 50px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.2</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 150px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-grow</span>: 0<span class=\"selector-class\">.4</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/assets/images/map/4/ar4-4.png\" alt=\"flex-grow\"></p>\n<h3 id=\"flex-shrink\"><span class=\"heading-link\">flex-shrink</span></h3><p>　　flex-shrink 设置当 flex 容器空间不足时项目的放大比例，它的默认值为 1 (空间不足时该项目将缩小)。</p>\n<p>　　flex-shrink 的计算方式与 flex-grow 略有不同，有两个因素影响 flex 项该缩小多少，一个是 flex-shrink 的属性值，另一个是 flex 项本身的大小，它们按各自的权重进行缩小，举例来说：</p>\n<p>　　主轴长度为600px, 项目1占据100px, 项目2占据300px, 项目3占据500px, 每个项目的 <code>flex-shrink</code> 属性值分别为1,3,2, 则总权重为 100px * 1 + 300px * 3 + 500px *2 = 2000px, 每个项目的权重分别为为：<br>　　- 项目1: (100px * 1) / 2000px = 0.05;<br>　　- 项目2: (300px * 3) / 2000px = 0.45;<br>　　- 项目3: (500px * 2) / 2000px = 0.50;<br>　　溢出的空间长度为：100px + 300px + 500px - 600px = 300px;<br>　　那么每个项目分别缩小：<br>　　- 项目1: 300px * 0.05 = 15px;<br>　　- 项目2: 300px * 0.45 = 135px;<br>　　- 项目3: 300px * 0.50 = 150px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-5 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px - 15px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>300px - 135px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>500px - 150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 300px;</span><br><span class=\"line\">    flex-shrink: 3;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 500px;</span><br><span class=\"line\">    flex-shrink: 2;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-5.png\" alt=\"flex-grow\"></p>\n<p>　　同样的，当 flex-shrink 的值为小数时，也分两种情况：<br>　　1. 所有flex项的 flex-shrink 属性值之和大于1，仍然按照上述方式进行计算；<br>　　2. 所有flex项的 flex-shrink 属性值之和小于1，<strong>只收缩溢出空间的一部分</strong>，例如项目1为 0.1, 项目2为 0.3, 项目3为 0.2, 则总的收缩空间为：<br>　　300px * (0.1 + 0.3 + 0.2) = 180px　　<br>　　每个项的权重计算方式是不变的，每个项目分别缩小：<br>　　- 项目1: 180px * 0.05 = 9px;<br>　　- 项目2: 180px * 0.45 = 81px;<br>　　- 项目3: 180px * 0.50 = 90px;</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-6 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span>100px - 9px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span>300px - 135px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span>500px - 90px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child1</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.1</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#0066CC</span>;</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child2</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 300px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.3</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#009900</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.child3</span> &#123;</span></span><br><span class=\"line\">    flex-basis: 500px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">flex-shrink</span>: 0<span class=\"selector-class\">.2</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#CC3300</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"/assets/images/map/4/ar4-6.png\" alt=\"flex-grow\"></p>\n<p>　　由于只收缩了溢出空间的一部分，div 内的元素总宽度实际上是超出 div 的宽度的。</p>\n<p>　　以上就是关于使用flex布局中 flex-grow 与 flex-shrink 计算方式的简单介绍。</p>\n<p><em>该篇博客内的代码已同步到<span class=\"external-link\"><a href=\"https://github.com/zsimline/mxsyx-public/tree/master/code/archive-4\" target=\"_blank\" rel=\"noopener\">Github</a><i class=\"fa fa-external-link\"></i></span></em></p>\n<p>参考资料：<br>  [1]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis</a><i class=\"fa fa-external-link\"></i></span><br>  [2]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow</a><i class=\"fa fa-external-link\"></i></span><br>  [3]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink</a><i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"看懂了《让子弹飞》就理解了毛泽东和文革(转载)","date":"2019-12-05T15:08:41.000Z","reward":true,"_content":"\n　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性......我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了......现在太多的恩怨，对他，会扭曲了他的精神。”\n\n　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙...马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套...上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻...\n\n　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！\n\n　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路...\n\n　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！\n\n　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一...\n\n　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）\n\n　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的...\n\n　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！\n\n　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……\n\n　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！\n\n　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！\n\n　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——\n　　张麻子问众人：“不跟我回山里了？”\n　　兄弟们道：“你腿脚都不利落了，还回山里啊。”\n　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”\n　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”\n　　张不甘心有问到：“和我在一起不高心吗？”\n　　众人道：“高兴，但不轻松、不轻松……”\n\n　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！\n\n　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！\n\n　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……\n\n　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——\n\n　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！\n\n　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:\n　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服\n过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。\n\n　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。\n\n　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。\n\n　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。\n\n　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。\n\n　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？\n\n　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”\n\n　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。\n\n　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……\n\n　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。\n\n　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：\n\n　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……\n","source":"_posts/看懂了《让子弹飞》就理解了毛泽东和文革(转载).md","raw":"---\ntitle: 看懂了《让子弹飞》就理解了毛泽东和文革(转载)\ndate: 2019-12-05 23:08:41\npermalink: 3\ncategories: 一个人\ntags: 思考\nreward: true\n---\n\n　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性......我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了......现在太多的恩怨，对他，会扭曲了他的精神。”\n\n　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙...马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套...上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻...\n\n　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！\n\n　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路...\n\n　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！\n\n　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一...\n\n　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）\n\n　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的...\n\n　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！\n\n　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……\n\n　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！\n\n　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！\n\n　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——\n　　张麻子问众人：“不跟我回山里了？”\n　　兄弟们道：“你腿脚都不利落了，还回山里啊。”\n　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”\n　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”\n　　张不甘心有问到：“和我在一起不高心吗？”\n　　众人道：“高兴，但不轻松、不轻松……”\n\n　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！\n\n　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！\n\n　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……\n\n　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——\n\n　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！\n\n　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:\n　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服\n过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。\n\n　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。\n\n　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。\n\n　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。\n\n　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。\n\n　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？\n\n　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”\n\n　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。\n\n　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……\n\n　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。\n\n　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：\n\n　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……\n","slug":"3","published":1,"updated":"2019-12-10T13:32:30.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tp0007a7fw0ru5fht2","content":"<p>　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性……我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了……现在太多的恩怨，对他，会扭曲了他的精神。”</p>\n<p>　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙…马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套…上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻…</p>\n<p>　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！</p>\n<p>　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路…</p>\n<p>　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！</p>\n<p>　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一…</p>\n<p>　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）</p>\n<p>　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的…</p>\n<p>　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！</p>\n<p>　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……</p>\n<p>　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！</p>\n<p>　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！</p>\n<p>　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——<br>　　张麻子问众人：“不跟我回山里了？”<br>　　兄弟们道：“你腿脚都不利落了，还回山里啊。”<br>　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”<br>　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”<br>　　张不甘心有问到：“和我在一起不高心吗？”<br>　　众人道：“高兴，但不轻松、不轻松……”</p>\n<p>　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！</p>\n<p>　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！</p>\n<p>　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……</p>\n<p>　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——</p>\n<p>　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！</p>\n<p>　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:<br>　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服<br>过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。</p>\n<p>　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？</p>\n<p>　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”</p>\n<p>　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。</p>\n<p>　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……</p>\n<p>　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。</p>\n<p>　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：</p>\n<p>　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性……我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了……现在太多的恩怨，对他，会扭曲了他的精神。”</p>\n<p>　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙…马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套…上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻…</p>\n<p>　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！</p>\n<p>　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路…</p>\n<p>　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！</p>\n<p>　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一…</p>\n<p>　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）</p>\n<p>　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的…</p>\n<p>　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！</p>\n<p>　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……</p>\n<p>　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！</p>\n<p>　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！</p>\n<p>　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——<br>　　张麻子问众人：“不跟我回山里了？”<br>　　兄弟们道：“你腿脚都不利落了，还回山里啊。”<br>　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”<br>　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”<br>　　张不甘心有问到：“和我在一起不高心吗？”<br>　　众人道：“高兴，但不轻松、不轻松……”</p>\n<p>　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！</p>\n<p>　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！</p>\n<p>　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……</p>\n<p>　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——</p>\n<p>　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！</p>\n<p>　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:<br>　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服<br>过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。</p>\n<p>　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。</p>\n<p>　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？</p>\n<p>　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”</p>\n<p>　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。</p>\n<p>　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……</p>\n<p>　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。</p>\n<p>　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：</p>\n<p>　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……</p>\n"},{"title":"拉勾网企业招聘信息分析报告","reward":true,"date":"2019-12-10T13:40:03.000Z","_content":"\n　　2020年是16级大学生毕业的年份，明年的五六月份，包括笔者在内的一大批大学生就要走出校门，结束十六年的学业生涯，并开始长达数十年的职业生涯，在这个时间点上，我们最期望的莫过于找到一份称心的工作，这是家人的期盼，更是我们自己的期盼。\n　　我们中的每一个人，都或多或少的感受到了就业的压力，尤其是计算机行业，在这种**低端人才饱和，高端人才紧缺**的大环境下，找到一份称心的工作着实不是件容易的事情。刚走出校门的我们由于经验不足只能选择低端岗位，令人担忧的是全球智能化革命的兴起将消灭大量的低端岗位，所以未来的竞争只会越来越激烈。\n　　前段时间，一个偶然的机会我在互联网上浏览到了几则招聘信息，读着读着我脑子中便闪过一个念头，何不动用一些技术手段将这些招聘信息采集下来，然后对这些信息进行分析呢？这样就可以从整体上看清行业招聘的趋势了。在强大的好奇心的驱使下我设计并编写了计算机程序，程序运行了大概三天的时间，终于将这些招聘信息采集了下来，数据经过清洗与分析过后，利用数据可视化技术加以展现。现在我将分析结果分享出来，以下是文章正文部分。\n\n提示：正文包含六十七张图片，将消耗你大概8MB的流量，你一定是个慷慨的人。\n\n**笔者已将文中的图片打包成了压缩文件，读者可自行下载：[点我下载](http://cdn.zizaixian.top/user/files/technology.zip)**\n\n**本文同步发布在博客园：[https://www.cnblogs.com/nkqlhqc/p/11644900.html](https://www.cnblogs.com/nkqlhqc/p/11644900.html)**\n\n\n### 写在最前面的话\n\n- 本文展现的数据均采集于正规的招聘网站，数据的可信性是毋庸置疑的。\n\n- 所有采集到的数据仅用作学习与交流，笔者承诺不会将其用作商业用途。\n\n- 文中不免夹杂一些笔者的个人观点，你可以反对我的观点，但是我拒不接受。\n\n- 我并非权威的数据分析员，文章标题用 *报告* 二字纯粹是为了装逼。\n\n### 不要迷信数据与他人\n\n　　数据分析只是一个工具，它不是万能的，万不要盲目的相信数据，未来选择什么样的职业，还要自己凭主观定夺，也就是你自己说了算。对未来迷茫了就去多读书，不要迷信数据，更不要听旁人瞎扯。\n　　我在这里列举两类人，如果这两类人对你的职业有任何指导的话，你大可不必去听。这第一类人是大学教师，尤其是系里的领导，这类人由于在学校呆的太久，与外界基本处于隔离的状态。教师是一个相对安逸的职业，安逸的环境势必会打消人学习的热情，学习的热情一旦没有了，不再为自己充电了，那就基本上等于落后于时代了，对未来的判断更是无从谈起。计算机行业的发展速度远超过王思聪换女朋友的速度，我们的大学教师面对这样的发展速度能否给予学生一个正确的指导呢？我想他们是不能的。如果有教师为你的未来提供什么指导的话，他们也是在拿数年前的眼光告诉你现在该怎么去做，或者借用自媒体噱头式的宣传来鼓励你去做那些看起来很有前景的事情。\n　　第二类人，是培训机构的人。培训机构的人为了自身的利益，不可避免的要用夸张式的语气宣扬一种事物，或去贬低一种事物，我觉得这是无可厚非的，毕竟赚钱才是培训机构的首要任务，而非培养人才。我只想说兼听则明，偏信则暗，如果任由单方面的话语在我们耳边徘徊的话，那我们对未来的判断是不是失去了平衡呢？我曾经**被动的**接受过五家培训机构的宣传，在此我也非常有兴趣点名一家培训机构，这家培训机构的名字叫北京AAA教育，在被动的听完该机构某位中年女士的宣讲后，我只想借诸葛亮的话形容一下当时的心情：我从未见过有如此厚颜无耻之人。为了自己的那点利益，把学生当傻子，信口胡说，颠倒黑白，四十分钟的宣讲将其无知、无耻的一面表现的淋漓尽致。在此衷心祝愿该培训机构早日倒闭，免得毒害更多的学生。\n\n### 关于数据量的解释\n\n　　数据均采集于[拉勾网](https://www.lagou.com)。相比于其它招聘信息服务网站，拉勾网专为IT从业人员提供信息服务，也就是说拉勾网上面的招聘信息全部都是与IT互联网相关的，无其它行业的招聘信息，因此选择拉勾网作为数据采集对象再合适不过了。\n　　此次共采集到招聘信息十一万两千八百六十五条，去除重复与无效的数据后剩余八万零三百五十条，数据采集日期为二零一九年九月下旬。 岗位涉及技术、产品、设计、运营、市场、销售、职能、游戏八个方向，由于绝大部分的学生在刚毕业时还是会选择技术岗，所以我仅仅分析了技术岗的数据，这部分数据共计两万八千六百七十一条。也许两万八千余条的数据量并不算大，但是我认为有时候不一定需要从宏观角度出发才能认清一件事情，从微观角度出发也可以很清晰的看到事物整体的面貌，这是一种透过微观看宏观的观察问题的方式。就比如我们交朋友，我们往往能通过对方的一些细节来判断这个人是否值得深交，而无需经过什么大事。\n　　每条招聘信息都包含工作地区、薪资区间、学历要求、经验要求、技能要有、岗位职责、企业所属领域、企业融资情况等数据，下面我将从十个方面对这部分数据做一个简单的分析。\n\n**提示：可以点击图片查看大图！**\n\n### 哪个城市最吸引人才？\n\n　　毕业之后，有些人想去自己向往已久的城市，有些人看见别人去哪了他就去哪，而很多的父母也不愿意子女远行。选择一个城市对我们将来的影响是不容小觑的，因为它直接决定了我们下半辈子在哪当房奴，甚至连房奴都当不上。下面是各城市需求岗位数量分布图：\n\n[![各城市需求岗位数量分布](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")\n\n　　北京毫无疑问的是最吸引人才的城市，主要还是因为北京的IT企业相对较多一些。排在其身后的分别是深圳、上海、广州、杭州、成都、武汉、南京，其中深圳与上海的需求量基本持平，再往后就是岗位需求不太旺盛的城市了，这个分布也基本符合我们的认知。\n\n### 你需要什么样的学历\n\n[![总体学历要求分布](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")\n\n　　如上图所示，本科及以上学历占到一半以上，接着按比例排列分别是大专及以上、学历不限、硕士及以上、博士及以上。虽然本科及以上占比最大，但不要觉得自己是本科学历就高兴的太早，其一，不同的岗位对学历的要求是不同的，这里展现的仅仅是整体的学历要求分布，忽略了这种不同；其二，企业不仅仅要看你的学历，经验也是重要的考量；其三，学历低往往意味着薪资低；其四，学历低的不只你一个，你有多大的把握竞争过同类的人？这些都是客观存在的问题。\n　　提升学历真是件不错的事情，这么想的肯定也不只我一个，不然就不会出现下面这种情况了：\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic1.jpg)](http://cdn.zizaixian.top/2019/10/pic1.jpg)\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic2.jpg)](http://cdn.zizaixian.top/2019/10/pic2.jpg)\n\n### 你需要几年的经验\n\n工作经验是IT企业招聘人才时的重要考量，以下展示的整体上经验要求的分布：\n\n[![总体经验要求分布](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")\n\n　　从图上可以看出，经验3-5年占比最高，接着是经验1-3年、经验5-10年、经验不限、经验应届毕业生、经验1年以下、经验10年以上。经验多意味着什么自然不必多说，但我强烈反对经验多就意味着头发少这种言论，虽然理论上是这样的，但也有例外不是。\n\n### 学历 And 经验\n\n[![总体学历与经验分布](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")\n\n　　上图展示的是不同学历下的经验要求分布，从中可以看出不管是何种学历，绝大多数岗位都要求3-5年或者1-3年的工作经验，也可以这么说，学历不行可以靠经验来补充，经验不足最好靠学历来补充，学历与经验都不足，需要在缝隙中生存。\n\n\n### 哪个领域最需要人才\n\n　　不同的企业都有自己专属的领域，比如有的企业搞社交，有的企业搞金融，有的企业搞医疗，而有的企业涉足多个领域，比如乐视公司，咱也不知道贾跃亭老板回国了没有。\n\n[![各领域需求工作岗位数量分布](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")\n\n　　上图展示的是不同领域需要的人才数量分布，移动互联网一马当先，这与我国移动互联网的普及程度是密不可分的。\n　　[![](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)\n>2019年8月30日，中国互联网络信息中心(CNNIC)第44次中国互联发展状况统计报告指出：截止到2019年6月，中国网民规模达8.54亿，用户月均使用移动流量达7.2GB。其中45.5%的网民为30岁以下的年轻群体，本科以下学历（不含本科）网民占比为90.4%\n\n　　比较热门的领域还有企业服务、数据服务、金融、电商、游戏、文娱、教育等等。如果是给人打工的话自然是不用考虑企业所属领域的，如果创业的话那就要好好考虑考虑了。\n\n### 企业融资情况\n\n下图展示了共计7257个公司的融资情况：\n\n[![企业融资情况](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")\n\n　　其中：上市公司859个，占比11.83%；不需要融资的公司2311个，占比31.85%；未融资的公司1698个，占比23.4%；A轮融资公司884个，占比12.18%；B轮融资公司561个，占比7.73%；C轮融资公司250个，占比3.44%；D轮及以上融资公司186个，占比2.56%；天使轮融资公司508个，占比7%\n\n>科普：[融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎](https://www.zhihu.com/question/28498812/answer/290736672 \"融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎\")\n\n### 总体薪资分布\n\n　　下图以饼图的形式展示了总体上薪资的分布，从1K到30K以2K为一个区间段，30K往后以5K为一个区间段，饼图的每个扇区代表落在该薪资区间的比例。\n\n[![总体薪资分布](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")\n\n　　总体的薪资分布并无实际参考意义，因为影响的薪资的因素是很多的，不同职位、学历、工作经验、公司融资情况、地区都会影响到薪资，下面就将展示不同因素影响下的薪资分布情况。\n\n### 不同因素影响下的薪资分布情况\n\n**提示：前方核能多图预警。**\n　　**本节采用饼图的形式展示不同因素对薪资分布的影响，这里需要强调的是“分布”二字，我们可以从图上看出哪些薪资区间占比较大，哪些薪资区间占比较小，但是不能够从图上看出某一因素对薪资的直接影响，现实中还要基于我们自身的考量。**\n\n#### 地区因素\n\n下面展示了最吸引人才的六大城市的平均薪资分布：\n\n[![北京地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")\n[![深圳地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")\n[![上海地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")\n[![广州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")\n[![杭州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")\n[![成都地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")\n\n　　通过对比可以看出，北京的平均薪资还是较其它几个城市高的，在11K-13K、15K-17K、19K-21K、21K-23K、29-31K都有较大的分布，上海的薪资分布与北京无太大差异，而成都明显是低薪资区间占比大，如果去国家统计局查一下各个城市的物价的话，这几张图到是十分合理的。\n\n#### 学历因素\n\n下面展示了不同学历的平均薪资分布：\n\n[![学历不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")\n[![大专及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")\n大专及以上学历一万元薪资以下占据一半以上比例。\n\n[![本科及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")\n本科及以上学历的薪资分布是比较均匀的，从整体上来看一万元至两万元的薪资大概占据50%。\n\n[![硕士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")\n很明显，相比本科学历高出一个层级后，硕士学历的低薪资区间占比明显缩小，高薪资区间占比明显增加，其中21K-23K、29K-30K、35K-40K占比较大，从整体上看一万五千元至三万五千元的薪资占据约50%。\n\n[![博士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")\n这个就很变态了，一万元薪资以下占比为零，一万元至两万元薪资占比很小，三万元以上薪资占比超75%，五万元薪资以上占比更是逼近25%。\n\n　　学历因素对薪资分布的影响给予我们最直观的启示就是：拥有什么样的学历有可能会决定今后的上升空间，学历低不意味着没有机会。\n\n#### 经验因素\n\n下面展示了不同工作经验的平均薪资分布：\n\n[![经验不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")\n[![经验应届毕业生薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")\n[![经验1年以下薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")\n[![经验1-3年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")\n[![经验3-5年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")\n[![经验5-10年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")\n[![经验10年以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")\n\n　　从上面七张图我们可以看出随着工作经验的增加，低薪资区间占比越来越小，高薪资区间占比越来越大，这与学历增加后平均薪资的走势是一样的。\n\n　　经验少则薪资低，经验多则薪资高，这是谁都知道的道理。但是值得我们思考的一个问题是：学历与经验哪个因素对薪资的影响更大一些呢？我还没有找出一个合理的算法或公式来下一个结论，凭借着对图的直观感觉我认为这两个因素对薪资的影响都挺大的（听起来像是句废话）。\n\n#### 职位因素\n\n不同职位的薪资分布是有所差异的，但这仅仅代表着分布的差异，不能够抛开学历、经验等因素说某个职位比另一个职位好，这是没有任何意义的。下面分别展示了前端开发、后端开发、移动开发、运维、高端职位、人工智能这六种职位的薪资分布情况：\n\n[![前端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")\n[![后端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")\n[![移动开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")\n[![运维薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")\n[![高端职位薪资分布](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")\n[![人工智能薪资分布](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")\n\n　　尽管我们不能直接比较哪个职位更好一些，但是从不同职位的资分布情况来看，我们仍然能够看出有些职位的薪资上升空间是比较小的，而像人工智能这种对学历要求极高的职位薪资上升空间就相对大一些。\n\n\n#### 技术因素\n\n　　技术是最容易引起人们争论的话题，而且大多数是无意义的争论。整天考虑该选择什么样的技术来实现自己的想法是一种避重就轻的行为，就像每个月都发布的  [TIOBE编程语言排行榜](https://www.tiobe.com/tiobe-index/ \"TIOBE编程语言排行榜\")一样，它只能反映编程语言的热门程度 ，但是就是有很多自媒体或培训机构喜欢拿它来说事，下一些类似“某种编程语言好”、“某种编程语言有前途”这种愚蠢的结论。\n\n计算机行业技术门类过于繁多，下面仅仅列举了比较热门的技术，仅当参考：\n\n[![C薪资分布](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")\n[![C++薪资分布](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")\n[![Java薪资分布](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")\n[![JavaScript薪资分布](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")\n[![Node.js薪资分布](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")\n[![PHP薪资分布](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")\n[![Android薪资分布](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")\n[![Python薪资分布](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")\n[![web前端薪资分布](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")\t\n[![深度学习薪资分布](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")\n[![区块链薪资分布](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")\n[![算法工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")\n[![图像识别薪资分布](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")\n[![运维工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")\n\n#### 企业融资因素\n\n下面展示了不同融资情况的企业的薪资分布情况：\n\n[![不需要融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")\n[![未融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")\n[![天使轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")\n[![A轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")\n[![B轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")\n[![C轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")\n[![D轮及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")\n[![上市公司薪资分布](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")\n\n\n### 职位诱惑\n\n　　几乎每个企业都会在招聘公告上写一些自己公司的“优势”，也叫职位诱惑，下面用词云的形式展示了职位诱惑中出现频率最高的50个词汇：\n\n[![职位诱惑词频统计](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")\n\n*注：分词器把“五险一金”分成了“五险”和“一金”两个词，实际上这是一个词。*\n> 科普：五险一金，指中国用人单位给予劳动者的几种保障性待遇的合称。“五险”指五种社会保险，包括养老保险、医疗保险、失业保险、工伤保险、生育保险，“一金”是指住房公积金。--- 摘自维基百科\n\n### 技能要求\n\n每个企业都会在招聘公告上明确的指出求职者应该具备哪些技能，不同职位的技能要求侧重点是不同的，但是也有一些普遍的要求。下面仍然采用词云的形式展示了几个热门职位或技术的技能要求高频词汇：\n\n[![后端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")\n[![前端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")\n[![全栈工程师技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")\n[![移动开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")\n[![运维技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")\n[![C++技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")\n[![Java技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")\n[![PHP技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")\n[![Python技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")\n[![人工智能技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")\n\n【注】统计高频词汇的过程中已经过滤掉了无意义的词，例如“熟悉”、“精通”、“具备”、“掌握”、“扎实”等词汇，保留“经验”一词旨在说明企业十分看中求职者对某一特定技术的使用经验。\n\n### 写在最后\n\n　　首先要感谢您能读到这里，感谢您在百忙之中读完我的这篇不严谨且存在诸多纰漏的文章。我从没有系统的学习过数据分析，只是凭借着兴趣做了这件事情，如果您能对文中的数据分析提出任何异议或者建设性意见的话，不胜感激。\n\n　　未来的路还很长，也许有些人在刚走出校门时会遇到一些困难，而有的人可能会走的相对顺利一些。每个人的都有属于自己的目标与理想，没必要攀比些什么，做好眼前的每一件小事，向往着一个不会比今天更糟的明天，一切都会有个好的结果。\n\n　　最后，一首冯唐的诗，送给自己以及即将迈出校门的年轻人：\n　　**尚未佩妥剑，转眼便江湖。**\n　　**愿历尽千帆，归来仍少年。**\n","source":"_posts/拉勾网企业招聘信息分析报告.md","raw":"---\ntitle: 拉勾网企业招聘信息分析报告\nreward: true\ndate: 2019-12-10 21:40:03\npermalink: 9\ncategories: 其它\ntags:\n---\n\n　　2020年是16级大学生毕业的年份，明年的五六月份，包括笔者在内的一大批大学生就要走出校门，结束十六年的学业生涯，并开始长达数十年的职业生涯，在这个时间点上，我们最期望的莫过于找到一份称心的工作，这是家人的期盼，更是我们自己的期盼。\n　　我们中的每一个人，都或多或少的感受到了就业的压力，尤其是计算机行业，在这种**低端人才饱和，高端人才紧缺**的大环境下，找到一份称心的工作着实不是件容易的事情。刚走出校门的我们由于经验不足只能选择低端岗位，令人担忧的是全球智能化革命的兴起将消灭大量的低端岗位，所以未来的竞争只会越来越激烈。\n　　前段时间，一个偶然的机会我在互联网上浏览到了几则招聘信息，读着读着我脑子中便闪过一个念头，何不动用一些技术手段将这些招聘信息采集下来，然后对这些信息进行分析呢？这样就可以从整体上看清行业招聘的趋势了。在强大的好奇心的驱使下我设计并编写了计算机程序，程序运行了大概三天的时间，终于将这些招聘信息采集了下来，数据经过清洗与分析过后，利用数据可视化技术加以展现。现在我将分析结果分享出来，以下是文章正文部分。\n\n提示：正文包含六十七张图片，将消耗你大概8MB的流量，你一定是个慷慨的人。\n\n**笔者已将文中的图片打包成了压缩文件，读者可自行下载：[点我下载](http://cdn.zizaixian.top/user/files/technology.zip)**\n\n**本文同步发布在博客园：[https://www.cnblogs.com/nkqlhqc/p/11644900.html](https://www.cnblogs.com/nkqlhqc/p/11644900.html)**\n\n\n### 写在最前面的话\n\n- 本文展现的数据均采集于正规的招聘网站，数据的可信性是毋庸置疑的。\n\n- 所有采集到的数据仅用作学习与交流，笔者承诺不会将其用作商业用途。\n\n- 文中不免夹杂一些笔者的个人观点，你可以反对我的观点，但是我拒不接受。\n\n- 我并非权威的数据分析员，文章标题用 *报告* 二字纯粹是为了装逼。\n\n### 不要迷信数据与他人\n\n　　数据分析只是一个工具，它不是万能的，万不要盲目的相信数据，未来选择什么样的职业，还要自己凭主观定夺，也就是你自己说了算。对未来迷茫了就去多读书，不要迷信数据，更不要听旁人瞎扯。\n　　我在这里列举两类人，如果这两类人对你的职业有任何指导的话，你大可不必去听。这第一类人是大学教师，尤其是系里的领导，这类人由于在学校呆的太久，与外界基本处于隔离的状态。教师是一个相对安逸的职业，安逸的环境势必会打消人学习的热情，学习的热情一旦没有了，不再为自己充电了，那就基本上等于落后于时代了，对未来的判断更是无从谈起。计算机行业的发展速度远超过王思聪换女朋友的速度，我们的大学教师面对这样的发展速度能否给予学生一个正确的指导呢？我想他们是不能的。如果有教师为你的未来提供什么指导的话，他们也是在拿数年前的眼光告诉你现在该怎么去做，或者借用自媒体噱头式的宣传来鼓励你去做那些看起来很有前景的事情。\n　　第二类人，是培训机构的人。培训机构的人为了自身的利益，不可避免的要用夸张式的语气宣扬一种事物，或去贬低一种事物，我觉得这是无可厚非的，毕竟赚钱才是培训机构的首要任务，而非培养人才。我只想说兼听则明，偏信则暗，如果任由单方面的话语在我们耳边徘徊的话，那我们对未来的判断是不是失去了平衡呢？我曾经**被动的**接受过五家培训机构的宣传，在此我也非常有兴趣点名一家培训机构，这家培训机构的名字叫北京AAA教育，在被动的听完该机构某位中年女士的宣讲后，我只想借诸葛亮的话形容一下当时的心情：我从未见过有如此厚颜无耻之人。为了自己的那点利益，把学生当傻子，信口胡说，颠倒黑白，四十分钟的宣讲将其无知、无耻的一面表现的淋漓尽致。在此衷心祝愿该培训机构早日倒闭，免得毒害更多的学生。\n\n### 关于数据量的解释\n\n　　数据均采集于[拉勾网](https://www.lagou.com)。相比于其它招聘信息服务网站，拉勾网专为IT从业人员提供信息服务，也就是说拉勾网上面的招聘信息全部都是与IT互联网相关的，无其它行业的招聘信息，因此选择拉勾网作为数据采集对象再合适不过了。\n　　此次共采集到招聘信息十一万两千八百六十五条，去除重复与无效的数据后剩余八万零三百五十条，数据采集日期为二零一九年九月下旬。 岗位涉及技术、产品、设计、运营、市场、销售、职能、游戏八个方向，由于绝大部分的学生在刚毕业时还是会选择技术岗，所以我仅仅分析了技术岗的数据，这部分数据共计两万八千六百七十一条。也许两万八千余条的数据量并不算大，但是我认为有时候不一定需要从宏观角度出发才能认清一件事情，从微观角度出发也可以很清晰的看到事物整体的面貌，这是一种透过微观看宏观的观察问题的方式。就比如我们交朋友，我们往往能通过对方的一些细节来判断这个人是否值得深交，而无需经过什么大事。\n　　每条招聘信息都包含工作地区、薪资区间、学历要求、经验要求、技能要有、岗位职责、企业所属领域、企业融资情况等数据，下面我将从十个方面对这部分数据做一个简单的分析。\n\n**提示：可以点击图片查看大图！**\n\n### 哪个城市最吸引人才？\n\n　　毕业之后，有些人想去自己向往已久的城市，有些人看见别人去哪了他就去哪，而很多的父母也不愿意子女远行。选择一个城市对我们将来的影响是不容小觑的，因为它直接决定了我们下半辈子在哪当房奴，甚至连房奴都当不上。下面是各城市需求岗位数量分布图：\n\n[![各城市需求岗位数量分布](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")\n\n　　北京毫无疑问的是最吸引人才的城市，主要还是因为北京的IT企业相对较多一些。排在其身后的分别是深圳、上海、广州、杭州、成都、武汉、南京，其中深圳与上海的需求量基本持平，再往后就是岗位需求不太旺盛的城市了，这个分布也基本符合我们的认知。\n\n### 你需要什么样的学历\n\n[![总体学历要求分布](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")\n\n　　如上图所示，本科及以上学历占到一半以上，接着按比例排列分别是大专及以上、学历不限、硕士及以上、博士及以上。虽然本科及以上占比最大，但不要觉得自己是本科学历就高兴的太早，其一，不同的岗位对学历的要求是不同的，这里展现的仅仅是整体的学历要求分布，忽略了这种不同；其二，企业不仅仅要看你的学历，经验也是重要的考量；其三，学历低往往意味着薪资低；其四，学历低的不只你一个，你有多大的把握竞争过同类的人？这些都是客观存在的问题。\n　　提升学历真是件不错的事情，这么想的肯定也不只我一个，不然就不会出现下面这种情况了：\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic1.jpg)](http://cdn.zizaixian.top/2019/10/pic1.jpg)\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic2.jpg)](http://cdn.zizaixian.top/2019/10/pic2.jpg)\n\n### 你需要几年的经验\n\n工作经验是IT企业招聘人才时的重要考量，以下展示的整体上经验要求的分布：\n\n[![总体经验要求分布](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")\n\n　　从图上可以看出，经验3-5年占比最高，接着是经验1-3年、经验5-10年、经验不限、经验应届毕业生、经验1年以下、经验10年以上。经验多意味着什么自然不必多说，但我强烈反对经验多就意味着头发少这种言论，虽然理论上是这样的，但也有例外不是。\n\n### 学历 And 经验\n\n[![总体学历与经验分布](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")\n\n　　上图展示的是不同学历下的经验要求分布，从中可以看出不管是何种学历，绝大多数岗位都要求3-5年或者1-3年的工作经验，也可以这么说，学历不行可以靠经验来补充，经验不足最好靠学历来补充，学历与经验都不足，需要在缝隙中生存。\n\n\n### 哪个领域最需要人才\n\n　　不同的企业都有自己专属的领域，比如有的企业搞社交，有的企业搞金融，有的企业搞医疗，而有的企业涉足多个领域，比如乐视公司，咱也不知道贾跃亭老板回国了没有。\n\n[![各领域需求工作岗位数量分布](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")\n\n　　上图展示的是不同领域需要的人才数量分布，移动互联网一马当先，这与我国移动互联网的普及程度是密不可分的。\n　　[![](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)\n>2019年8月30日，中国互联网络信息中心(CNNIC)第44次中国互联发展状况统计报告指出：截止到2019年6月，中国网民规模达8.54亿，用户月均使用移动流量达7.2GB。其中45.5%的网民为30岁以下的年轻群体，本科以下学历（不含本科）网民占比为90.4%\n\n　　比较热门的领域还有企业服务、数据服务、金融、电商、游戏、文娱、教育等等。如果是给人打工的话自然是不用考虑企业所属领域的，如果创业的话那就要好好考虑考虑了。\n\n### 企业融资情况\n\n下图展示了共计7257个公司的融资情况：\n\n[![企业融资情况](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")\n\n　　其中：上市公司859个，占比11.83%；不需要融资的公司2311个，占比31.85%；未融资的公司1698个，占比23.4%；A轮融资公司884个，占比12.18%；B轮融资公司561个，占比7.73%；C轮融资公司250个，占比3.44%；D轮及以上融资公司186个，占比2.56%；天使轮融资公司508个，占比7%\n\n>科普：[融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎](https://www.zhihu.com/question/28498812/answer/290736672 \"融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎\")\n\n### 总体薪资分布\n\n　　下图以饼图的形式展示了总体上薪资的分布，从1K到30K以2K为一个区间段，30K往后以5K为一个区间段，饼图的每个扇区代表落在该薪资区间的比例。\n\n[![总体薪资分布](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")\n\n　　总体的薪资分布并无实际参考意义，因为影响的薪资的因素是很多的，不同职位、学历、工作经验、公司融资情况、地区都会影响到薪资，下面就将展示不同因素影响下的薪资分布情况。\n\n### 不同因素影响下的薪资分布情况\n\n**提示：前方核能多图预警。**\n　　**本节采用饼图的形式展示不同因素对薪资分布的影响，这里需要强调的是“分布”二字，我们可以从图上看出哪些薪资区间占比较大，哪些薪资区间占比较小，但是不能够从图上看出某一因素对薪资的直接影响，现实中还要基于我们自身的考量。**\n\n#### 地区因素\n\n下面展示了最吸引人才的六大城市的平均薪资分布：\n\n[![北京地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")\n[![深圳地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")\n[![上海地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")\n[![广州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")\n[![杭州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")\n[![成都地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")\n\n　　通过对比可以看出，北京的平均薪资还是较其它几个城市高的，在11K-13K、15K-17K、19K-21K、21K-23K、29-31K都有较大的分布，上海的薪资分布与北京无太大差异，而成都明显是低薪资区间占比大，如果去国家统计局查一下各个城市的物价的话，这几张图到是十分合理的。\n\n#### 学历因素\n\n下面展示了不同学历的平均薪资分布：\n\n[![学历不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")\n[![大专及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")\n大专及以上学历一万元薪资以下占据一半以上比例。\n\n[![本科及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")\n本科及以上学历的薪资分布是比较均匀的，从整体上来看一万元至两万元的薪资大概占据50%。\n\n[![硕士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")\n很明显，相比本科学历高出一个层级后，硕士学历的低薪资区间占比明显缩小，高薪资区间占比明显增加，其中21K-23K、29K-30K、35K-40K占比较大，从整体上看一万五千元至三万五千元的薪资占据约50%。\n\n[![博士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")\n这个就很变态了，一万元薪资以下占比为零，一万元至两万元薪资占比很小，三万元以上薪资占比超75%，五万元薪资以上占比更是逼近25%。\n\n　　学历因素对薪资分布的影响给予我们最直观的启示就是：拥有什么样的学历有可能会决定今后的上升空间，学历低不意味着没有机会。\n\n#### 经验因素\n\n下面展示了不同工作经验的平均薪资分布：\n\n[![经验不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")\n[![经验应届毕业生薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")\n[![经验1年以下薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")\n[![经验1-3年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")\n[![经验3-5年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")\n[![经验5-10年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")\n[![经验10年以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")\n\n　　从上面七张图我们可以看出随着工作经验的增加，低薪资区间占比越来越小，高薪资区间占比越来越大，这与学历增加后平均薪资的走势是一样的。\n\n　　经验少则薪资低，经验多则薪资高，这是谁都知道的道理。但是值得我们思考的一个问题是：学历与经验哪个因素对薪资的影响更大一些呢？我还没有找出一个合理的算法或公式来下一个结论，凭借着对图的直观感觉我认为这两个因素对薪资的影响都挺大的（听起来像是句废话）。\n\n#### 职位因素\n\n不同职位的薪资分布是有所差异的，但这仅仅代表着分布的差异，不能够抛开学历、经验等因素说某个职位比另一个职位好，这是没有任何意义的。下面分别展示了前端开发、后端开发、移动开发、运维、高端职位、人工智能这六种职位的薪资分布情况：\n\n[![前端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")\n[![后端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")\n[![移动开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")\n[![运维薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")\n[![高端职位薪资分布](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")\n[![人工智能薪资分布](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")\n\n　　尽管我们不能直接比较哪个职位更好一些，但是从不同职位的资分布情况来看，我们仍然能够看出有些职位的薪资上升空间是比较小的，而像人工智能这种对学历要求极高的职位薪资上升空间就相对大一些。\n\n\n#### 技术因素\n\n　　技术是最容易引起人们争论的话题，而且大多数是无意义的争论。整天考虑该选择什么样的技术来实现自己的想法是一种避重就轻的行为，就像每个月都发布的  [TIOBE编程语言排行榜](https://www.tiobe.com/tiobe-index/ \"TIOBE编程语言排行榜\")一样，它只能反映编程语言的热门程度 ，但是就是有很多自媒体或培训机构喜欢拿它来说事，下一些类似“某种编程语言好”、“某种编程语言有前途”这种愚蠢的结论。\n\n计算机行业技术门类过于繁多，下面仅仅列举了比较热门的技术，仅当参考：\n\n[![C薪资分布](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")\n[![C++薪资分布](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")\n[![Java薪资分布](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")\n[![JavaScript薪资分布](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")\n[![Node.js薪资分布](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")\n[![PHP薪资分布](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")\n[![Android薪资分布](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")\n[![Python薪资分布](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")\n[![web前端薪资分布](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")\t\n[![深度学习薪资分布](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")\n[![区块链薪资分布](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")\n[![算法工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")\n[![图像识别薪资分布](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")\n[![运维工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")\n\n#### 企业融资因素\n\n下面展示了不同融资情况的企业的薪资分布情况：\n\n[![不需要融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")\n[![未融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")\n[![天使轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")\n[![A轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")\n[![B轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")\n[![C轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")\n[![D轮及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")\n[![上市公司薪资分布](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")\n\n\n### 职位诱惑\n\n　　几乎每个企业都会在招聘公告上写一些自己公司的“优势”，也叫职位诱惑，下面用词云的形式展示了职位诱惑中出现频率最高的50个词汇：\n\n[![职位诱惑词频统计](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")\n\n*注：分词器把“五险一金”分成了“五险”和“一金”两个词，实际上这是一个词。*\n> 科普：五险一金，指中国用人单位给予劳动者的几种保障性待遇的合称。“五险”指五种社会保险，包括养老保险、医疗保险、失业保险、工伤保险、生育保险，“一金”是指住房公积金。--- 摘自维基百科\n\n### 技能要求\n\n每个企业都会在招聘公告上明确的指出求职者应该具备哪些技能，不同职位的技能要求侧重点是不同的，但是也有一些普遍的要求。下面仍然采用词云的形式展示了几个热门职位或技术的技能要求高频词汇：\n\n[![后端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")\n[![前端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")\n[![全栈工程师技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")\n[![移动开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")\n[![运维技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")\n[![C++技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")\n[![Java技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")\n[![PHP技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")\n[![Python技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")\n[![人工智能技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")\n\n【注】统计高频词汇的过程中已经过滤掉了无意义的词，例如“熟悉”、“精通”、“具备”、“掌握”、“扎实”等词汇，保留“经验”一词旨在说明企业十分看中求职者对某一特定技术的使用经验。\n\n### 写在最后\n\n　　首先要感谢您能读到这里，感谢您在百忙之中读完我的这篇不严谨且存在诸多纰漏的文章。我从没有系统的学习过数据分析，只是凭借着兴趣做了这件事情，如果您能对文中的数据分析提出任何异议或者建设性意见的话，不胜感激。\n\n　　未来的路还很长，也许有些人在刚走出校门时会遇到一些困难，而有的人可能会走的相对顺利一些。每个人的都有属于自己的目标与理想，没必要攀比些什么，做好眼前的每一件小事，向往着一个不会比今天更糟的明天，一切都会有个好的结果。\n\n　　最后，一首冯唐的诗，送给自己以及即将迈出校门的年轻人：\n　　**尚未佩妥剑，转眼便江湖。**\n　　**愿历尽千帆，归来仍少年。**\n","slug":"9","published":1,"updated":"2019-12-10T13:40:53.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300ts0009a7fw5bstcbl8","content":"<p>　　2020年是16级大学生毕业的年份，明年的五六月份，包括笔者在内的一大批大学生就要走出校门，结束十六年的学业生涯，并开始长达数十年的职业生涯，在这个时间点上，我们最期望的莫过于找到一份称心的工作，这是家人的期盼，更是我们自己的期盼。<br>　　我们中的每一个人，都或多或少的感受到了就业的压力，尤其是计算机行业，在这种<strong>低端人才饱和，高端人才紧缺</strong>的大环境下，找到一份称心的工作着实不是件容易的事情。刚走出校门的我们由于经验不足只能选择低端岗位，令人担忧的是全球智能化革命的兴起将消灭大量的低端岗位，所以未来的竞争只会越来越激烈。<br>　　前段时间，一个偶然的机会我在互联网上浏览到了几则招聘信息，读着读着我脑子中便闪过一个念头，何不动用一些技术手段将这些招聘信息采集下来，然后对这些信息进行分析呢？这样就可以从整体上看清行业招聘的趋势了。在强大的好奇心的驱使下我设计并编写了计算机程序，程序运行了大概三天的时间，终于将这些招聘信息采集了下来，数据经过清洗与分析过后，利用数据可视化技术加以展现。现在我将分析结果分享出来，以下是文章正文部分。</p>\n<p>提示：正文包含六十七张图片，将消耗你大概8MB的流量，你一定是个慷慨的人。</p>\n<p><strong>笔者已将文中的图片打包成了压缩文件，读者可自行下载：<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/user/files/technology.zip\" target=\"_blank\" rel=\"noopener\">点我下载</a><i class=\"fa fa-external-link\"></i></span></strong></p>\n<p><strong>本文同步发布在博客园：<span class=\"external-link\"><a href=\"https://www.cnblogs.com/nkqlhqc/p/11644900.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nkqlhqc/p/11644900.html</a><i class=\"fa fa-external-link\"></i></span></strong></p>\n<h3 id=\"写在最前面的话\"><span class=\"heading-link\">写在最前面的话</span></h3><ul>\n<li><p>本文展现的数据均采集于正规的招聘网站，数据的可信性是毋庸置疑的。</p>\n</li>\n<li><p>所有采集到的数据仅用作学习与交流，笔者承诺不会将其用作商业用途。</p>\n</li>\n<li><p>文中不免夹杂一些笔者的个人观点，你可以反对我的观点，但是我拒不接受。</p>\n</li>\n<li><p>我并非权威的数据分析员，文章标题用 <em>报告</em> 二字纯粹是为了装逼。</p>\n</li>\n</ul>\n<h3 id=\"不要迷信数据与他人\"><span class=\"heading-link\">不要迷信数据与他人</span></h3><p>　　数据分析只是一个工具，它不是万能的，万不要盲目的相信数据，未来选择什么样的职业，还要自己凭主观定夺，也就是你自己说了算。对未来迷茫了就去多读书，不要迷信数据，更不要听旁人瞎扯。<br>　　我在这里列举两类人，如果这两类人对你的职业有任何指导的话，你大可不必去听。这第一类人是大学教师，尤其是系里的领导，这类人由于在学校呆的太久，与外界基本处于隔离的状态。教师是一个相对安逸的职业，安逸的环境势必会打消人学习的热情，学习的热情一旦没有了，不再为自己充电了，那就基本上等于落后于时代了，对未来的判断更是无从谈起。计算机行业的发展速度远超过王思聪换女朋友的速度，我们的大学教师面对这样的发展速度能否给予学生一个正确的指导呢？我想他们是不能的。如果有教师为你的未来提供什么指导的话，他们也是在拿数年前的眼光告诉你现在该怎么去做，或者借用自媒体噱头式的宣传来鼓励你去做那些看起来很有前景的事情。<br>　　第二类人，是培训机构的人。培训机构的人为了自身的利益，不可避免的要用夸张式的语气宣扬一种事物，或去贬低一种事物，我觉得这是无可厚非的，毕竟赚钱才是培训机构的首要任务，而非培养人才。我只想说兼听则明，偏信则暗，如果任由单方面的话语在我们耳边徘徊的话，那我们对未来的判断是不是失去了平衡呢？我曾经<strong>被动的</strong>接受过五家培训机构的宣传，在此我也非常有兴趣点名一家培训机构，这家培训机构的名字叫北京AAA教育，在被动的听完该机构某位中年女士的宣讲后，我只想借诸葛亮的话形容一下当时的心情：我从未见过有如此厚颜无耻之人。为了自己的那点利益，把学生当傻子，信口胡说，颠倒黑白，四十分钟的宣讲将其无知、无耻的一面表现的淋漓尽致。在此衷心祝愿该培训机构早日倒闭，免得毒害更多的学生。</p>\n<h3 id=\"关于数据量的解释\"><span class=\"heading-link\">关于数据量的解释</span></h3><p>　　数据均采集于<span class=\"external-link\"><a href=\"https://www.lagou.com\" target=\"_blank\" rel=\"noopener\">拉勾网</a><i class=\"fa fa-external-link\"></i></span>。相比于其它招聘信息服务网站，拉勾网专为IT从业人员提供信息服务，也就是说拉勾网上面的招聘信息全部都是与IT互联网相关的，无其它行业的招聘信息，因此选择拉勾网作为数据采集对象再合适不过了。<br>　　此次共采集到招聘信息十一万两千八百六十五条，去除重复与无效的数据后剩余八万零三百五十条，数据采集日期为二零一九年九月下旬。 岗位涉及技术、产品、设计、运营、市场、销售、职能、游戏八个方向，由于绝大部分的学生在刚毕业时还是会选择技术岗，所以我仅仅分析了技术岗的数据，这部分数据共计两万八千六百七十一条。也许两万八千余条的数据量并不算大，但是我认为有时候不一定需要从宏观角度出发才能认清一件事情，从微观角度出发也可以很清晰的看到事物整体的面貌，这是一种透过微观看宏观的观察问题的方式。就比如我们交朋友，我们往往能通过对方的一些细节来判断这个人是否值得深交，而无需经过什么大事。<br>　　每条招聘信息都包含工作地区、薪资区间、学历要求、经验要求、技能要有、岗位职责、企业所属领域、企业融资情况等数据，下面我将从十个方面对这部分数据做一个简单的分析。</p>\n<p><strong>提示：可以点击图片查看大图！</strong></p>\n<h3 id=\"哪个城市最吸引人才？\"><span class=\"heading-link\">哪个城市最吸引人才？</span></h3><p>　　毕业之后，有些人想去自己向往已久的城市，有些人看见别人去哪了他就去哪，而很多的父母也不愿意子女远行。选择一个城市对我们将来的影响是不容小觑的，因为它直接决定了我们下半辈子在哪当房奴，甚至连房奴都当不上。下面是各城市需求岗位数量分布图：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1823.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1823.jpg\" alt=\"各城市需求岗位数量分布\" title=\"各城市需求岗位数量分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　北京毫无疑问的是最吸引人才的城市，主要还是因为北京的IT企业相对较多一些。排在其身后的分别是深圳、上海、广州、杭州、成都、武汉、南京，其中深圳与上海的需求量基本持平，再往后就是岗位需求不太旺盛的城市了，这个分布也基本符合我们的认知。</p>\n<h3 id=\"你需要什么样的学历\"><span class=\"heading-link\">你需要什么样的学历</span></h3><p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1503.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1503.jpg\" alt=\"总体学历要求分布\" title=\"总体学历要求分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　如上图所示，本科及以上学历占到一半以上，接着按比例排列分别是大专及以上、学历不限、硕士及以上、博士及以上。虽然本科及以上占比最大，但不要觉得自己是本科学历就高兴的太早，其一，不同的岗位对学历的要求是不同的，这里展现的仅仅是整体的学历要求分布，忽略了这种不同；其二，企业不仅仅要看你的学历，经验也是重要的考量；其三，学历低往往意味着薪资低；其四，学历低的不只你一个，你有多大的把握竞争过同类的人？这些都是客观存在的问题。<br>　　提升学历真是件不错的事情，这么想的肯定也不只我一个，不然就不会出现下面这种情况了：</p>\n<p>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/pic1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/pic1.jpg\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/pic2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/pic2.jpg\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"你需要几年的经验\"><span class=\"heading-link\">你需要几年的经验</span></h3><p>工作经验是IT企业招聘人才时的重要考量，以下展示的整体上经验要求的分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1526.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1526.jpg\" alt=\"总体经验要求分布\" title=\"总体经验要求分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　从图上可以看出，经验3-5年占比最高，接着是经验1-3年、经验5-10年、经验不限、经验应届毕业生、经验1年以下、经验10年以上。经验多意味着什么自然不必多说，但我强烈反对经验多就意味着头发少这种言论，虽然理论上是这样的，但也有例外不是。</p>\n<h3 id=\"学历-And-经验\"><span class=\"heading-link\">学历 And 经验</span></h3><p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1606.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1606.jpg\" alt=\"总体学历与经验分布\" title=\"总体学历与经验分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　上图展示的是不同学历下的经验要求分布，从中可以看出不管是何种学历，绝大多数岗位都要求3-5年或者1-3年的工作经验，也可以这么说，学历不行可以靠经验来补充，经验不足最好靠学历来补充，学历与经验都不足，需要在缝隙中生存。</p>\n<h3 id=\"哪个领域最需要人才\"><span class=\"heading-link\">哪个领域最需要人才</span></h3><p>　　不同的企业都有自己专属的领域，比如有的企业搞社交，有的企业搞金融，有的企业搞医疗，而有的企业涉足多个领域，比如乐视公司，咱也不知道贾跃亭老板回国了没有。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2135.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2135.jpg\" alt=\"各领域需求工作岗位数量分布\" title=\"各领域需求工作岗位数量分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　上图展示的是不同领域需要的人才数量分布，移动互联网一马当先，这与我国移动互联网的普及程度是密不可分的。<br>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/%E6%88%AA%E5%9B%BE_2019-10-06_23-37-04.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<blockquote>\n<p>2019年8月30日，中国互联网络信息中心(CNNIC)第44次中国互联发展状况统计报告指出：截止到2019年6月，中国网民规模达8.54亿，用户月均使用移动流量达7.2GB。其中45.5%的网民为30岁以下的年轻群体，本科以下学历（不含本科）网民占比为90.4%</p>\n</blockquote>\n<p>　　比较热门的领域还有企业服务、数据服务、金融、电商、游戏、文娱、教育等等。如果是给人打工的话自然是不用考虑企业所属领域的，如果创业的话那就要好好考虑考虑了。</p>\n<h3 id=\"企业融资情况\"><span class=\"heading-link\">企业融资情况</span></h3><p>下图展示了共计7257个公司的融资情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1722.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1722.jpg\" alt=\"企业融资情况\" title=\"企业融资情况\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　其中：上市公司859个，占比11.83%；不需要融资的公司2311个，占比31.85%；未融资的公司1698个，占比23.4%；A轮融资公司884个，占比12.18%；B轮融资公司561个，占比7.73%；C轮融资公司250个，占比3.44%；D轮及以上融资公司186个，占比2.56%；天使轮融资公司508个，占比7%</p>\n<blockquote>\n<p>科普：<span class=\"external-link\"><a href=\"https://www.zhihu.com/question/28498812/answer/290736672\" target=\"_blank\" rel=\"noopener\">融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎</a><i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n<h3 id=\"总体薪资分布\"><span class=\"heading-link\">总体薪资分布</span></h3><p>　　下图以饼图的形式展示了总体上薪资的分布，从1K到30K以2K为一个区间段，30K往后以5K为一个区间段，饼图的每个扇区代表落在该薪资区间的比例。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1424.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1424.jpg\" alt=\"总体薪资分布\" title=\"总体薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　总体的薪资分布并无实际参考意义，因为影响的薪资的因素是很多的，不同职位、学历、工作经验、公司融资情况、地区都会影响到薪资，下面就将展示不同因素影响下的薪资分布情况。</p>\n<h3 id=\"不同因素影响下的薪资分布情况\"><span class=\"heading-link\">不同因素影响下的薪资分布情况</span></h3><p><strong>提示：前方核能多图预警。</strong><br>　　<strong>本节采用饼图的形式展示不同因素对薪资分布的影响，这里需要强调的是“分布”二字，我们可以从图上看出哪些薪资区间占比较大，哪些薪资区间占比较小，但是不能够从图上看出某一因素对薪资的直接影响，现实中还要基于我们自身的考量。</strong></p>\n<h4 id=\"地区因素\"><span class=\"heading-link\">地区因素</span></h4><p>下面展示了最吸引人才的六大城市的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505北京.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8C%97%E4%BA%AC.jpg\" alt=\"北京地区薪资分布\" title=\"北京地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505深圳.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%B7%B1%E5%9C%B3.jpg\" alt=\"深圳地区薪资分布\" title=\"深圳地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505上海.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8A%E6%B5%B7.jpg\" alt=\"上海地区薪资分布\" title=\"上海地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505广州.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%B9%BF%E5%B7%9E.jpg\" alt=\"广州地区薪资分布\" title=\"广州地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505杭州.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9D%AD%E5%B7%9E.jpg\" alt=\"杭州地区薪资分布\" title=\"杭州地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505成都.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%88%90%E9%83%BD.jpg\" alt=\"成都地区薪资分布\" title=\"成都地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　通过对比可以看出，北京的平均薪资还是较其它几个城市高的，在11K-13K、15K-17K、19K-21K、21K-23K、29-31K都有较大的分布，上海的薪资分布与北京无太大差异，而成都明显是低薪资区间占比大，如果去国家统计局查一下各个城市的物价的话，这几张图到是十分合理的。</p>\n<h4 id=\"学历因素\"><span class=\"heading-link\">学历因素</span></h4><p>下面展示了不同学历的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%AD%A6%E5%8E%86%E4%B8%8D%E9%99%90.jpg\" alt=\"学历不限薪资分布\" title=\"学历不限薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%A4%A7%E4%B8%93%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"大专及以上薪资分布\" title=\"大专及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>大专及以上学历一万元薪资以下占据一半以上比例。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9C%AC%E7%A7%91%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"本科及以上薪资分布\" title=\"本科及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>本科及以上学历的薪资分布是比较均匀的，从整体上来看一万元至两万元的薪资大概占据50%。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%A1%95%E5%A3%AB%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"硕士及以上薪资分布\" title=\"硕士及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>很明显，相比本科学历高出一个层级后，硕士学历的低薪资区间占比明显缩小，高薪资区间占比明显增加，其中21K-23K、29K-30K、35K-40K占比较大，从整体上看一万五千元至三万五千元的薪资占据约50%。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8D%9A%E5%A3%AB%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"博士及以上薪资分布\" title=\"博士及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>这个就很变态了，一万元薪资以下占比为零，一万元至两万元薪资占比很小，三万元以上薪资占比超75%，五万元薪资以上占比更是逼近25%。</p>\n<p>　　学历因素对薪资分布的影响给予我们最直观的启示就是：拥有什么样的学历有可能会决定今后的上升空间，学历低不意味着没有机会。</p>\n<h4 id=\"经验因素\"><span class=\"heading-link\">经验因素</span></h4><p>下面展示了不同工作经验的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C%E4%B8%8D%E9%99%90.jpg\" alt=\"经验不限薪资分布\" title=\"经验不限薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C%E5%BA%94%E5%B1%8A%E6%AF%95%E4%B8%9A%E7%94%9F.jpg\" alt=\"经验应届毕业生薪资分布\" title=\"经验应届毕业生薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C1%E5%B9%B4%E4%BB%A5%E4%B8%8B.jpg\" alt=\"经验1年以下薪资分布\" title=\"经验1年以下薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C1-3%E5%B9%B4.jpg\" alt=\"经验1-3年薪资分布\" title=\"经验1-3年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C3-5%E5%B9%B4.jpg\" alt=\"经验3-5年薪资分布\" title=\"经验3-5年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C5-10%E5%B9%B4.jpg\" alt=\"经验5-10年薪资分布\" title=\"经验5-10年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C10%E5%B9%B4%E4%BB%A5%E4%B8%8A.jpg\" alt=\"经验10年以上薪资分布\" title=\"经验10年以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　从上面七张图我们可以看出随着工作经验的增加，低薪资区间占比越来越小，高薪资区间占比越来越大，这与学历增加后平均薪资的走势是一样的。</p>\n<p>　　经验少则薪资低，经验多则薪资高，这是谁都知道的道理。但是值得我们思考的一个问题是：学历与经验哪个因素对薪资的影响更大一些呢？我还没有找出一个合理的算法或公式来下一个结论，凭借着对图的直观感觉我认为这两个因素对薪资的影响都挺大的（听起来像是句废话）。</p>\n<h4 id=\"职位因素\"><span class=\"heading-link\">职位因素</span></h4><p>不同职位的薪资分布是有所差异的，但这仅仅代表着分布的差异，不能够抛开学历、经验等因素说某个职位比另一个职位好，这是没有任何意义的。下面分别展示了前端开发、后端开发、移动开发、运维、高端职位、人工智能这六种职位的薪资分布情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"前端开发薪资分布\" title=\"前端开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"后端开发薪资分布\" title=\"后端开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.jpg\" alt=\"移动开发薪资分布\" title=\"移动开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505运维.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E8%BF%90%E7%BB%B4.jpg\" alt=\"运维薪资分布\" title=\"运维薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E9%AB%98%E7%AB%AF%E8%81%8C%E4%BD%8D.jpg\" alt=\"高端职位薪资分布\" title=\"高端职位薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.jpg\" alt=\"人工智能薪资分布\" title=\"人工智能薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　尽管我们不能直接比较哪个职位更好一些，但是从不同职位的资分布情况来看，我们仍然能够看出有些职位的薪资上升空间是比较小的，而像人工智能这种对学历要求极高的职位薪资上升空间就相对大一些。</p>\n<h4 id=\"技术因素\"><span class=\"heading-link\">技术因素</span></h4><p>　　技术是最容易引起人们争论的话题，而且大多数是无意义的争论。整天考虑该选择什么样的技术来实现自己的想法是一种避重就轻的行为，就像每个月都发布的  <span class=\"external-link\"><a href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noopener\">TIOBE编程语言排行榜</a><i class=\"fa fa-external-link\"></i></span>一样，它只能反映编程语言的热门程度 ，但是就是有很多自媒体或培训机构喜欢拿它来说事，下一些类似“某种编程语言好”、“某种编程语言有前途”这种愚蠢的结论。</p>\n<p>计算机行业技术门类过于繁多，下面仅仅列举了比较热门的技术，仅当参考：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C.jpg\" alt=\"C薪资分布\" title=\"C薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C-1.jpg\" alt=\"C++薪资分布\" title=\"C-1薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Java.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Java.jpg\" alt=\"Java薪资分布\" title=\"Java薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg\" alt=\"JavaScript薪资分布\" title=\"JavaScript薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg\" alt=\"Node.js薪资分布\" title=\"Node.js薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505PHP.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505PHP.jpg\" alt=\"PHP薪资分布\" title=\"PHP薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Android.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Android.jpg\" alt=\"Android薪资分布\" title=\"Android薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Python.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Python.jpg\" alt=\"Python薪资分布\" title=\"Python薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505web前端.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505web%E5%89%8D%E7%AB%AF.jpg\" alt=\"web前端薪资分布\" title=\"web前端薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0.jpg\" alt=\"深度学习薪资分布\" title=\"深度学习薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505区块链.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8C%BA%E5%9D%97%E9%93%BE.jpg\" alt=\"区块链薪资分布\" title=\"区块链薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"算法工程师薪资分布\" title=\"算法工程师薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB.jpg\" alt=\"图像识别薪资分布\" title=\"图像识别薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"运维工程师薪资分布\" title=\"运维工程师薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<h4 id=\"企业融资因素\"><span class=\"heading-link\">企业融资因素</span></h4><p>下面展示了不同融资情况的企业的薪资分布情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8D%E9%9C%80%E8%A6%81%E8%9E%8D%E8%B5%84.jpg\" alt=\"不需要融资薪资分布\" title=\"不需要融资薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505未融资.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9C%AA%E8%9E%8D%E8%B5%84.jpg\" alt=\"未融资薪资分布\" title=\"未融资薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%A4%A9%E4%BD%BF%E8%BD%AE.jpg\" alt=\"天使轮薪资分布\" title=\"天使轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505A轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505A%E8%BD%AE.jpg\" alt=\"A轮薪资分布\" title=\"A轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505B轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505B%E8%BD%AE.jpg\" alt=\"B轮薪资分布\" title=\"B轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C%E8%BD%AE.jpg\" alt=\"C轮薪资分布\" title=\"C轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505D%E8%BD%AE%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"D轮及以上薪资分布\" title=\"D轮及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8.jpg\" alt=\"上市公司薪资分布\" title=\"上市公司薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"职位诱惑\"><span class=\"heading-link\">职位诱惑</span></h3><p>　　几乎每个企业都会在招聘公告上写一些自己公司的“优势”，也叫职位诱惑，下面用词云的形式展示了职位诱惑中出现频率最高的50个词汇：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1655.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1655.jpg\" alt=\"职位诱惑词频统计\" title=\"职位诱惑词频统计\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><em>注：分词器把“五险一金”分成了“五险”和“一金”两个词，实际上这是一个词。</em></p>\n<blockquote>\n<p>科普：五险一金，指中国用人单位给予劳动者的几种保障性待遇的合称。“五险”指五种社会保险，包括养老保险、医疗保险、失业保险、工伤保险、生育保险，“一金”是指住房公积金。— 摘自维基百科</p>\n</blockquote>\n<h3 id=\"技能要求\"><span class=\"heading-link\">技能要求</span></h3><p>每个企业都会在招聘公告上明确的指出求职者应该具备哪些技能，不同职位的技能要求侧重点是不同的，但是也有一些普遍的要求。下面仍然采用词云的形式展示了几个热门职位或技术的技能要求高频词汇：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"后端开发技能要求词汇统计\" title=\"后端开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"前端开发技能要求词汇统计\" title=\"前端开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"全栈工程师技能要求词汇统计\" title=\"全栈工程师技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.jpg\" alt=\"移动开发技能要求词汇统计\" title=\"移动开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008运维.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E8%BF%90%E7%BB%B4.jpg\" alt=\"运维技能要求词汇统计\" title=\"运维技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008C.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008C.jpg\" alt=\"C++技能要求词汇统计\" title=\"C++技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008Java.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008Java.jpg\" alt=\"Java技能要求词汇统计\" title=\"Java技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008PHP.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008PHP.jpg\" alt=\"PHP技能要求词汇统计\" title=\"PHP技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008Python.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008Python.jpg\" alt=\"Python技能要求词汇统计\" title=\"Python技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.jpg\" alt=\"人工智能技能要求词汇统计\" title=\"人工智能技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>【注】统计高频词汇的过程中已经过滤掉了无意义的词，例如“熟悉”、“精通”、“具备”、“掌握”、“扎实”等词汇，保留“经验”一词旨在说明企业十分看中求职者对某一特定技术的使用经验。</p>\n<h3 id=\"写在最后\"><span class=\"heading-link\">写在最后</span></h3><p>　　首先要感谢您能读到这里，感谢您在百忙之中读完我的这篇不严谨且存在诸多纰漏的文章。我从没有系统的学习过数据分析，只是凭借着兴趣做了这件事情，如果您能对文中的数据分析提出任何异议或者建设性意见的话，不胜感激。</p>\n<p>　　未来的路还很长，也许有些人在刚走出校门时会遇到一些困难，而有的人可能会走的相对顺利一些。每个人的都有属于自己的目标与理想，没必要攀比些什么，做好眼前的每一件小事，向往着一个不会比今天更糟的明天，一切都会有个好的结果。</p>\n<p>　　最后，一首冯唐的诗，送给自己以及即将迈出校门的年轻人：<br>　　<strong>尚未佩妥剑，转眼便江湖。</strong><br>　　<strong>愿历尽千帆，归来仍少年。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　2020年是16级大学生毕业的年份，明年的五六月份，包括笔者在内的一大批大学生就要走出校门，结束十六年的学业生涯，并开始长达数十年的职业生涯，在这个时间点上，我们最期望的莫过于找到一份称心的工作，这是家人的期盼，更是我们自己的期盼。<br>　　我们中的每一个人，都或多或少的感受到了就业的压力，尤其是计算机行业，在这种<strong>低端人才饱和，高端人才紧缺</strong>的大环境下，找到一份称心的工作着实不是件容易的事情。刚走出校门的我们由于经验不足只能选择低端岗位，令人担忧的是全球智能化革命的兴起将消灭大量的低端岗位，所以未来的竞争只会越来越激烈。<br>　　前段时间，一个偶然的机会我在互联网上浏览到了几则招聘信息，读着读着我脑子中便闪过一个念头，何不动用一些技术手段将这些招聘信息采集下来，然后对这些信息进行分析呢？这样就可以从整体上看清行业招聘的趋势了。在强大的好奇心的驱使下我设计并编写了计算机程序，程序运行了大概三天的时间，终于将这些招聘信息采集了下来，数据经过清洗与分析过后，利用数据可视化技术加以展现。现在我将分析结果分享出来，以下是文章正文部分。</p>\n<p>提示：正文包含六十七张图片，将消耗你大概8MB的流量，你一定是个慷慨的人。</p>\n<p><strong>笔者已将文中的图片打包成了压缩文件，读者可自行下载：<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/user/files/technology.zip\" target=\"_blank\" rel=\"noopener\">点我下载</a><i class=\"fa fa-external-link\"></i></span></strong></p>\n<p><strong>本文同步发布在博客园：<span class=\"external-link\"><a href=\"https://www.cnblogs.com/nkqlhqc/p/11644900.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/nkqlhqc/p/11644900.html</a><i class=\"fa fa-external-link\"></i></span></strong></p>\n<h3 id=\"写在最前面的话\"><span class=\"heading-link\">写在最前面的话</span></h3><ul>\n<li><p>本文展现的数据均采集于正规的招聘网站，数据的可信性是毋庸置疑的。</p>\n</li>\n<li><p>所有采集到的数据仅用作学习与交流，笔者承诺不会将其用作商业用途。</p>\n</li>\n<li><p>文中不免夹杂一些笔者的个人观点，你可以反对我的观点，但是我拒不接受。</p>\n</li>\n<li><p>我并非权威的数据分析员，文章标题用 <em>报告</em> 二字纯粹是为了装逼。</p>\n</li>\n</ul>\n<h3 id=\"不要迷信数据与他人\"><span class=\"heading-link\">不要迷信数据与他人</span></h3><p>　　数据分析只是一个工具，它不是万能的，万不要盲目的相信数据，未来选择什么样的职业，还要自己凭主观定夺，也就是你自己说了算。对未来迷茫了就去多读书，不要迷信数据，更不要听旁人瞎扯。<br>　　我在这里列举两类人，如果这两类人对你的职业有任何指导的话，你大可不必去听。这第一类人是大学教师，尤其是系里的领导，这类人由于在学校呆的太久，与外界基本处于隔离的状态。教师是一个相对安逸的职业，安逸的环境势必会打消人学习的热情，学习的热情一旦没有了，不再为自己充电了，那就基本上等于落后于时代了，对未来的判断更是无从谈起。计算机行业的发展速度远超过王思聪换女朋友的速度，我们的大学教师面对这样的发展速度能否给予学生一个正确的指导呢？我想他们是不能的。如果有教师为你的未来提供什么指导的话，他们也是在拿数年前的眼光告诉你现在该怎么去做，或者借用自媒体噱头式的宣传来鼓励你去做那些看起来很有前景的事情。<br>　　第二类人，是培训机构的人。培训机构的人为了自身的利益，不可避免的要用夸张式的语气宣扬一种事物，或去贬低一种事物，我觉得这是无可厚非的，毕竟赚钱才是培训机构的首要任务，而非培养人才。我只想说兼听则明，偏信则暗，如果任由单方面的话语在我们耳边徘徊的话，那我们对未来的判断是不是失去了平衡呢？我曾经<strong>被动的</strong>接受过五家培训机构的宣传，在此我也非常有兴趣点名一家培训机构，这家培训机构的名字叫北京AAA教育，在被动的听完该机构某位中年女士的宣讲后，我只想借诸葛亮的话形容一下当时的心情：我从未见过有如此厚颜无耻之人。为了自己的那点利益，把学生当傻子，信口胡说，颠倒黑白，四十分钟的宣讲将其无知、无耻的一面表现的淋漓尽致。在此衷心祝愿该培训机构早日倒闭，免得毒害更多的学生。</p>\n<h3 id=\"关于数据量的解释\"><span class=\"heading-link\">关于数据量的解释</span></h3><p>　　数据均采集于<span class=\"external-link\"><a href=\"https://www.lagou.com\" target=\"_blank\" rel=\"noopener\">拉勾网</a><i class=\"fa fa-external-link\"></i></span>。相比于其它招聘信息服务网站，拉勾网专为IT从业人员提供信息服务，也就是说拉勾网上面的招聘信息全部都是与IT互联网相关的，无其它行业的招聘信息，因此选择拉勾网作为数据采集对象再合适不过了。<br>　　此次共采集到招聘信息十一万两千八百六十五条，去除重复与无效的数据后剩余八万零三百五十条，数据采集日期为二零一九年九月下旬。 岗位涉及技术、产品、设计、运营、市场、销售、职能、游戏八个方向，由于绝大部分的学生在刚毕业时还是会选择技术岗，所以我仅仅分析了技术岗的数据，这部分数据共计两万八千六百七十一条。也许两万八千余条的数据量并不算大，但是我认为有时候不一定需要从宏观角度出发才能认清一件事情，从微观角度出发也可以很清晰的看到事物整体的面貌，这是一种透过微观看宏观的观察问题的方式。就比如我们交朋友，我们往往能通过对方的一些细节来判断这个人是否值得深交，而无需经过什么大事。<br>　　每条招聘信息都包含工作地区、薪资区间、学历要求、经验要求、技能要有、岗位职责、企业所属领域、企业融资情况等数据，下面我将从十个方面对这部分数据做一个简单的分析。</p>\n<p><strong>提示：可以点击图片查看大图！</strong></p>\n<h3 id=\"哪个城市最吸引人才？\"><span class=\"heading-link\">哪个城市最吸引人才？</span></h3><p>　　毕业之后，有些人想去自己向往已久的城市，有些人看见别人去哪了他就去哪，而很多的父母也不愿意子女远行。选择一个城市对我们将来的影响是不容小觑的，因为它直接决定了我们下半辈子在哪当房奴，甚至连房奴都当不上。下面是各城市需求岗位数量分布图：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1823.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1823.jpg\" alt=\"各城市需求岗位数量分布\" title=\"各城市需求岗位数量分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　北京毫无疑问的是最吸引人才的城市，主要还是因为北京的IT企业相对较多一些。排在其身后的分别是深圳、上海、广州、杭州、成都、武汉、南京，其中深圳与上海的需求量基本持平，再往后就是岗位需求不太旺盛的城市了，这个分布也基本符合我们的认知。</p>\n<h3 id=\"你需要什么样的学历\"><span class=\"heading-link\">你需要什么样的学历</span></h3><p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1503.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1503.jpg\" alt=\"总体学历要求分布\" title=\"总体学历要求分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　如上图所示，本科及以上学历占到一半以上，接着按比例排列分别是大专及以上、学历不限、硕士及以上、博士及以上。虽然本科及以上占比最大，但不要觉得自己是本科学历就高兴的太早，其一，不同的岗位对学历的要求是不同的，这里展现的仅仅是整体的学历要求分布，忽略了这种不同；其二，企业不仅仅要看你的学历，经验也是重要的考量；其三，学历低往往意味着薪资低；其四，学历低的不只你一个，你有多大的把握竞争过同类的人？这些都是客观存在的问题。<br>　　提升学历真是件不错的事情，这么想的肯定也不只我一个，不然就不会出现下面这种情况了：</p>\n<p>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/pic1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/pic1.jpg\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/pic2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/pic2.jpg\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"你需要几年的经验\"><span class=\"heading-link\">你需要几年的经验</span></h3><p>工作经验是IT企业招聘人才时的重要考量，以下展示的整体上经验要求的分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1526.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1526.jpg\" alt=\"总体经验要求分布\" title=\"总体经验要求分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　从图上可以看出，经验3-5年占比最高，接着是经验1-3年、经验5-10年、经验不限、经验应届毕业生、经验1年以下、经验10年以上。经验多意味着什么自然不必多说，但我强烈反对经验多就意味着头发少这种言论，虽然理论上是这样的，但也有例外不是。</p>\n<h3 id=\"学历-And-经验\"><span class=\"heading-link\">学历 And 经验</span></h3><p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1606.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1606.jpg\" alt=\"总体学历与经验分布\" title=\"总体学历与经验分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　上图展示的是不同学历下的经验要求分布，从中可以看出不管是何种学历，绝大多数岗位都要求3-5年或者1-3年的工作经验，也可以这么说，学历不行可以靠经验来补充，经验不足最好靠学历来补充，学历与经验都不足，需要在缝隙中生存。</p>\n<h3 id=\"哪个领域最需要人才\"><span class=\"heading-link\">哪个领域最需要人才</span></h3><p>　　不同的企业都有自己专属的领域，比如有的企业搞社交，有的企业搞金融，有的企业搞医疗，而有的企业涉足多个领域，比如乐视公司，咱也不知道贾跃亭老板回国了没有。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2135.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2135.jpg\" alt=\"各领域需求工作岗位数量分布\" title=\"各领域需求工作岗位数量分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　上图展示的是不同领域需要的人才数量分布，移动互联网一马当先，这与我国移动互联网的普及程度是密不可分的。<br>　　<span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/%E6%88%AA%E5%9B%BE_2019-10-06_23-37-04.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<blockquote>\n<p>2019年8月30日，中国互联网络信息中心(CNNIC)第44次中国互联发展状况统计报告指出：截止到2019年6月，中国网民规模达8.54亿，用户月均使用移动流量达7.2GB。其中45.5%的网民为30岁以下的年轻群体，本科以下学历（不含本科）网民占比为90.4%</p>\n</blockquote>\n<p>　　比较热门的领域还有企业服务、数据服务、金融、电商、游戏、文娱、教育等等。如果是给人打工的话自然是不用考虑企业所属领域的，如果创业的话那就要好好考虑考虑了。</p>\n<h3 id=\"企业融资情况\"><span class=\"heading-link\">企业融资情况</span></h3><p>下图展示了共计7257个公司的融资情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1722.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1722.jpg\" alt=\"企业融资情况\" title=\"企业融资情况\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　其中：上市公司859个，占比11.83%；不需要融资的公司2311个，占比31.85%；未融资的公司1698个，占比23.4%；A轮融资公司884个，占比12.18%；B轮融资公司561个，占比7.73%；C轮融资公司250个，占比3.44%；D轮及以上融资公司186个，占比2.56%；天使轮融资公司508个，占比7%</p>\n<blockquote>\n<p>科普：<span class=\"external-link\"><a href=\"https://www.zhihu.com/question/28498812/answer/290736672\" target=\"_blank\" rel=\"noopener\">融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎</a><i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n<h3 id=\"总体薪资分布\"><span class=\"heading-link\">总体薪资分布</span></h3><p>　　下图以饼图的形式展示了总体上薪资的分布，从1K到30K以2K为一个区间段，30K往后以5K为一个区间段，饼图的每个扇区代表落在该薪资区间的比例。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1424.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1424.jpg\" alt=\"总体薪资分布\" title=\"总体薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　总体的薪资分布并无实际参考意义，因为影响的薪资的因素是很多的，不同职位、学历、工作经验、公司融资情况、地区都会影响到薪资，下面就将展示不同因素影响下的薪资分布情况。</p>\n<h3 id=\"不同因素影响下的薪资分布情况\"><span class=\"heading-link\">不同因素影响下的薪资分布情况</span></h3><p><strong>提示：前方核能多图预警。</strong><br>　　<strong>本节采用饼图的形式展示不同因素对薪资分布的影响，这里需要强调的是“分布”二字，我们可以从图上看出哪些薪资区间占比较大，哪些薪资区间占比较小，但是不能够从图上看出某一因素对薪资的直接影响，现实中还要基于我们自身的考量。</strong></p>\n<h4 id=\"地区因素\"><span class=\"heading-link\">地区因素</span></h4><p>下面展示了最吸引人才的六大城市的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505北京.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8C%97%E4%BA%AC.jpg\" alt=\"北京地区薪资分布\" title=\"北京地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505深圳.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%B7%B1%E5%9C%B3.jpg\" alt=\"深圳地区薪资分布\" title=\"深圳地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505上海.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8A%E6%B5%B7.jpg\" alt=\"上海地区薪资分布\" title=\"上海地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505广州.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%B9%BF%E5%B7%9E.jpg\" alt=\"广州地区薪资分布\" title=\"广州地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505杭州.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9D%AD%E5%B7%9E.jpg\" alt=\"杭州地区薪资分布\" title=\"杭州地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505成都.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%88%90%E9%83%BD.jpg\" alt=\"成都地区薪资分布\" title=\"成都地区薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　通过对比可以看出，北京的平均薪资还是较其它几个城市高的，在11K-13K、15K-17K、19K-21K、21K-23K、29-31K都有较大的分布，上海的薪资分布与北京无太大差异，而成都明显是低薪资区间占比大，如果去国家统计局查一下各个城市的物价的话，这几张图到是十分合理的。</p>\n<h4 id=\"学历因素\"><span class=\"heading-link\">学历因素</span></h4><p>下面展示了不同学历的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%AD%A6%E5%8E%86%E4%B8%8D%E9%99%90.jpg\" alt=\"学历不限薪资分布\" title=\"学历不限薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%A4%A7%E4%B8%93%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"大专及以上薪资分布\" title=\"大专及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>大专及以上学历一万元薪资以下占据一半以上比例。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9C%AC%E7%A7%91%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"本科及以上薪资分布\" title=\"本科及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>本科及以上学历的薪资分布是比较均匀的，从整体上来看一万元至两万元的薪资大概占据50%。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%A1%95%E5%A3%AB%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"硕士及以上薪资分布\" title=\"硕士及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>很明显，相比本科学历高出一个层级后，硕士学历的低薪资区间占比明显缩小，高薪资区间占比明显增加，其中21K-23K、29K-30K、35K-40K占比较大，从整体上看一万五千元至三万五千元的薪资占据约50%。</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8D%9A%E5%A3%AB%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"博士及以上薪资分布\" title=\"博士及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br>这个就很变态了，一万元薪资以下占比为零，一万元至两万元薪资占比很小，三万元以上薪资占比超75%，五万元薪资以上占比更是逼近25%。</p>\n<p>　　学历因素对薪资分布的影响给予我们最直观的启示就是：拥有什么样的学历有可能会决定今后的上升空间，学历低不意味着没有机会。</p>\n<h4 id=\"经验因素\"><span class=\"heading-link\">经验因素</span></h4><p>下面展示了不同工作经验的平均薪资分布：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C%E4%B8%8D%E9%99%90.jpg\" alt=\"经验不限薪资分布\" title=\"经验不限薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C%E5%BA%94%E5%B1%8A%E6%AF%95%E4%B8%9A%E7%94%9F.jpg\" alt=\"经验应届毕业生薪资分布\" title=\"经验应届毕业生薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C1%E5%B9%B4%E4%BB%A5%E4%B8%8B.jpg\" alt=\"经验1年以下薪资分布\" title=\"经验1年以下薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C1-3%E5%B9%B4.jpg\" alt=\"经验1-3年薪资分布\" title=\"经验1-3年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C3-5%E5%B9%B4.jpg\" alt=\"经验3-5年薪资分布\" title=\"经验3-5年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C5-10%E5%B9%B4.jpg\" alt=\"经验5-10年薪资分布\" title=\"经验5-10年薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%BB%8F%E9%AA%8C10%E5%B9%B4%E4%BB%A5%E4%B8%8A.jpg\" alt=\"经验10年以上薪资分布\" title=\"经验10年以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　从上面七张图我们可以看出随着工作经验的增加，低薪资区间占比越来越小，高薪资区间占比越来越大，这与学历增加后平均薪资的走势是一样的。</p>\n<p>　　经验少则薪资低，经验多则薪资高，这是谁都知道的道理。但是值得我们思考的一个问题是：学历与经验哪个因素对薪资的影响更大一些呢？我还没有找出一个合理的算法或公式来下一个结论，凭借着对图的直观感觉我认为这两个因素对薪资的影响都挺大的（听起来像是句废话）。</p>\n<h4 id=\"职位因素\"><span class=\"heading-link\">职位因素</span></h4><p>不同职位的薪资分布是有所差异的，但这仅仅代表着分布的差异，不能够抛开学历、经验等因素说某个职位比另一个职位好，这是没有任何意义的。下面分别展示了前端开发、后端开发、移动开发、运维、高端职位、人工智能这六种职位的薪资分布情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"前端开发薪资分布\" title=\"前端开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"后端开发薪资分布\" title=\"后端开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.jpg\" alt=\"移动开发薪资分布\" title=\"移动开发薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505运维.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E8%BF%90%E7%BB%B4.jpg\" alt=\"运维薪资分布\" title=\"运维薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E9%AB%98%E7%AB%AF%E8%81%8C%E4%BD%8D.jpg\" alt=\"高端职位薪资分布\" title=\"高端职位薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.jpg\" alt=\"人工智能薪资分布\" title=\"人工智能薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　尽管我们不能直接比较哪个职位更好一些，但是从不同职位的资分布情况来看，我们仍然能够看出有些职位的薪资上升空间是比较小的，而像人工智能这种对学历要求极高的职位薪资上升空间就相对大一些。</p>\n<h4 id=\"技术因素\"><span class=\"heading-link\">技术因素</span></h4><p>　　技术是最容易引起人们争论的话题，而且大多数是无意义的争论。整天考虑该选择什么样的技术来实现自己的想法是一种避重就轻的行为，就像每个月都发布的  <span class=\"external-link\"><a href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noopener\">TIOBE编程语言排行榜</a><i class=\"fa fa-external-link\"></i></span>一样，它只能反映编程语言的热门程度 ，但是就是有很多自媒体或培训机构喜欢拿它来说事，下一些类似“某种编程语言好”、“某种编程语言有前途”这种愚蠢的结论。</p>\n<p>计算机行业技术门类过于繁多，下面仅仅列举了比较热门的技术，仅当参考：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C.jpg\" alt=\"C薪资分布\" title=\"C薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C-1.jpg\" alt=\"C++薪资分布\" title=\"C-1薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Java.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Java.jpg\" alt=\"Java薪资分布\" title=\"Java薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg\" alt=\"JavaScript薪资分布\" title=\"JavaScript薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg\" alt=\"Node.js薪资分布\" title=\"Node.js薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505PHP.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505PHP.jpg\" alt=\"PHP薪资分布\" title=\"PHP薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Android.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Android.jpg\" alt=\"Android薪资分布\" title=\"Android薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505Python.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505Python.jpg\" alt=\"Python薪资分布\" title=\"Python薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505web前端.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505web%E5%89%8D%E7%AB%AF.jpg\" alt=\"web前端薪资分布\" title=\"web前端薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0.jpg\" alt=\"深度学习薪资分布\" title=\"深度学习薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505区块链.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%8C%BA%E5%9D%97%E9%93%BE.jpg\" alt=\"区块链薪资分布\" title=\"区块链薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"算法工程师薪资分布\" title=\"算法工程师薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB.jpg\" alt=\"图像识别薪资分布\" title=\"图像识别薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"运维工程师薪资分布\" title=\"运维工程师薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<h4 id=\"企业融资因素\"><span class=\"heading-link\">企业融资因素</span></h4><p>下面展示了不同融资情况的企业的薪资分布情况：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8D%E9%9C%80%E8%A6%81%E8%9E%8D%E8%B5%84.jpg\" alt=\"不需要融资薪资分布\" title=\"不需要融资薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505未融资.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E6%9C%AA%E8%9E%8D%E8%B5%84.jpg\" alt=\"未融资薪资分布\" title=\"未融资薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E5%A4%A9%E4%BD%BF%E8%BD%AE.jpg\" alt=\"天使轮薪资分布\" title=\"天使轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505A轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505A%E8%BD%AE.jpg\" alt=\"A轮薪资分布\" title=\"A轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505B轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505B%E8%BD%AE.jpg\" alt=\"B轮薪资分布\" title=\"B轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505C轮.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505C%E8%BD%AE.jpg\" alt=\"C轮薪资分布\" title=\"C轮薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505D%E8%BD%AE%E5%8F%8A%E4%BB%A5%E4%B8%8A.jpg\" alt=\"D轮及以上薪资分布\" title=\"D轮及以上薪资分布\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1505%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8.jpg\" alt=\"上市公司薪资分布\" title=\"上市公司薪资分布\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"职位诱惑\"><span class=\"heading-link\">职位诱惑</span></h3><p>　　几乎每个企业都会在招聘公告上写一些自己公司的“优势”，也叫职位诱惑，下面用词云的形式展示了职位诱惑中出现频率最高的50个词汇：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t1655.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t1655.jpg\" alt=\"职位诱惑词频统计\" title=\"职位诱惑词频统计\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><em>注：分词器把“五险一金”分成了“五险”和“一金”两个词，实际上这是一个词。</em></p>\n<blockquote>\n<p>科普：五险一金，指中国用人单位给予劳动者的几种保障性待遇的合称。“五险”指五种社会保险，包括养老保险、医疗保险、失业保险、工伤保险、生育保险，“一金”是指住房公积金。— 摘自维基百科</p>\n</blockquote>\n<h3 id=\"技能要求\"><span class=\"heading-link\">技能要求</span></h3><p>每个企业都会在招聘公告上明确的指出求职者应该具备哪些技能，不同职位的技能要求侧重点是不同的，但是也有一些普遍的要求。下面仍然采用词云的形式展示了几个热门职位或技术的技能要求高频词汇：</p>\n<p><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"后端开发技能要求词汇统计\" title=\"后端开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg\" alt=\"前端开发技能要求词汇统计\" title=\"前端开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88.jpg\" alt=\"全栈工程师技能要求词汇统计\" title=\"全栈工程师技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.jpg\" alt=\"移动开发技能要求词汇统计\" title=\"移动开发技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008运维.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E8%BF%90%E7%BB%B4.jpg\" alt=\"运维技能要求词汇统计\" title=\"运维技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008C.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008C.jpg\" alt=\"C++技能要求词汇统计\" title=\"C++技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008Java.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008Java.jpg\" alt=\"Java技能要求词汇统计\" title=\"Java技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008PHP.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008PHP.jpg\" alt=\"PHP技能要求词汇统计\" title=\"PHP技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008Python.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008Python.jpg\" alt=\"Python技能要求词汇统计\" title=\"Python技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span><br><span class=\"external-link\"><a href=\"http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://cdn.zizaixian.top/2019/10/t2008%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.jpg\" alt=\"人工智能技能要求词汇统计\" title=\"人工智能技能要求词汇统计\"></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>【注】统计高频词汇的过程中已经过滤掉了无意义的词，例如“熟悉”、“精通”、“具备”、“掌握”、“扎实”等词汇，保留“经验”一词旨在说明企业十分看中求职者对某一特定技术的使用经验。</p>\n<h3 id=\"写在最后\"><span class=\"heading-link\">写在最后</span></h3><p>　　首先要感谢您能读到这里，感谢您在百忙之中读完我的这篇不严谨且存在诸多纰漏的文章。我从没有系统的学习过数据分析，只是凭借着兴趣做了这件事情，如果您能对文中的数据分析提出任何异议或者建设性意见的话，不胜感激。</p>\n<p>　　未来的路还很长，也许有些人在刚走出校门时会遇到一些困难，而有的人可能会走的相对顺利一些。每个人的都有属于自己的目标与理想，没必要攀比些什么，做好眼前的每一件小事，向往着一个不会比今天更糟的明天，一切都会有个好的结果。</p>\n<p>　　最后，一首冯唐的诗，送给自己以及即将迈出校门的年轻人：<br>　　<strong>尚未佩妥剑，转眼便江湖。</strong><br>　　<strong>愿历尽千帆，归来仍少年。</strong></p>\n"},{"title":"绕过校园网Web认证","date":"2019-12-10T13:34:58.000Z","reward":true,"_content":"\n>该文章最初于2017年11月08日发布在[博客园](https://www.cnblogs.com/nkqlhqc/p/7805837.html)\n当初我还在上大一，掌握的计算机知识非常少，只是为了好玩，实现了自己的某个小想法。如今两年过去了，这篇文章已经有三万多人次的阅读量，我也很欣慰。现将该篇文章同步到我的个人博客中，以勉励自己，时刻保持一个好奇心。\n\n相信很多高校学生都有用WEB认证方式接入校园网的经历。\n\n　　拿我所在的大学为例，我们大学的校园网由联通公司承建，当我连上寝室的无线路由器后，浏览器会自动弹出一个由卓智公司开发的认证界面，如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" alt=\"\" /></a>\n\n　　如果买了联通公司的流量，会取得一个账号和密码，输入账号密码登陆后就能享用无线了，当然啦，对于爱折腾的人来说，总要想点方法绕过这个认证，不为别的，只为实现内心的一个想法。所以我就在各大技术论坛查询了一些绕过web认证的方法。网上有很多人给出了方法，这些方法大同小异，基本原理都一样，但是呢，难免有疏漏和难懂的地方。所以，接下来，我就对这个问题做一次系统的介绍。\n\n### 原理解释\n\n　　当我们连上校园网的无线路由器后，虽然上不了网，但是我们的计算机却分配到了IP地址（那么为什么要给我们分配IP呢？很好回答啦，不分配IP地址web认证就实现不了呀！）此时若我们进行一些上网的操作，例如访问百度主页，那么计算机的数据包将从TCP443端口上发出，校园网网关就会拦截从这个端口上发出的数据包。同理从其它端口上发出的数据包也会遭到拦截。\n\n　　**但是有一个神奇的端口，从这个端口发出的数据包不会遭到网关拦截，它就是UDP53端口。对计算机网络稍微了解的朋友应该知道在UDP53端口上运行的协议是DNS协议（域名解析协议），也就是说我们现在可以正常查询网站域名对应的IP地址。**\n\n例如用Windows自带的nslookup命令查询百度的IP地址时会返回一个正确的结果：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" alt=\"\" /></a>\n\n　　<strong>既然UDP53端口的数据包可以通过网关，那么我们可以在本地运行一个程序将其它端口的数据包伪装组成UDP53端口的数据包，然后发送到本地域名服务器，那么网关就不会进行拦截了，数据包就顺利的通过了网关，可是发送出去的数据报如何返回呢？这就需要我们做进一步的设置。</strong>\n\n　　接下来我们需要一个VPS（云服务器）和一个域名，我了便于叙述，我给这个云服务器起名为V，域名起名为Y。我们伪装的DNS数据包要查询的域名就是Y，本地域名服务器接收到这个伪装后的数据包后，由于它无法解析这个域名Y，便将数据包进行转发，让能够解析Y的域名服务器进行解析，接下来我们将Y设置一个NS记录，用来指定Y由哪个域名服务器来进行解析，我们指定的域名服务器就是前面提到的V，所以接下来数据包会被发送到V中。此时我们在V中运行一个程序，对伪装的数据包进行还原，还原后的数据包再发送出去，这样当V接收到响应数据包后，V上运行的程序会再次对其进行伪装，伪装成一个DNS响应数据包，这个DNS响应数据包会沿着上述相反的路径发送回我们的计算机，我们的计算机再次对这个DNS响应数据包进行还原，到现在，我们真正想要得到的数据包已经到手了。也许上面的叙述有点绕，我放一张图大家就能明白了：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" alt=\"\" /></a>\n\n好了，要是看了图没明白也没有关系，只要按照下面的步骤做就可以了。\n\n　　Windows上与Linux上实现方法不同，就伪装数据包的程序而言，在windows平台上推荐使用dns2tcp这个软件，而在linux平台上推荐使用iodine这个软件，关于iodine的使用，我会再写一篇文章，所以下面主要讲一下dns2tcp的使用，也就是在windows上实现绕过WEB认证，linux系统用户请移步我的另一篇文章\n\n### 安装软件\n\n　　在本地计算机上安装dns2tcp这个软件，它的作用是对数据包进行伪装与还原。\n\n　　附Windows版下载地址：[https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw](https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw \"https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw\")   提取码：w198\n\n### 配置虚拟主机\n\n　　申请一个VPS，国内VPS服务商众多，什么阿里云啦，腾讯云啦，百度云啦。在这里我给大家推荐由世纪互联运营的微软Azure云服务器，1元体验一个月，申请与部署方式很简单，而且服务器配置与带宽很高，可惜的是就能使用一个月，其实学服务器开发的大学朋友们也可以申请一个练练手，毕竟这是一次难得的实践机会嘛！\n\n附微软Azure云服务器申请地址：[https://www.azure.cn/pricing/1rmb-trial-full/](https://www.azure.cn/pricing/1rmb-trial-full/ \"https://www.azure.cn/pricing/1rmb-trial-full/\")\n\n　　有关申请与部署服务器的细节，我就不再赘述了，按照流程走就行。有不懂的地方可以参看微软给的文档和视频教程。\n\n　　下面这个操作尤为重要，部署成功服务器后，务必参照微软的文档为服务器添加入站与出站规则，也就是哪些类型的数据包可以进出你的服务器，那些类型的数据包会被防火墙拦截，这个步骤决定着伪装的数据包是否能够进入到我们的VBS\n\n将TCP80，TCP443，UDP53端口的数据设置为允许入站与出站，如下图所示：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" alt=\"\" /></a>\n\n申请成功后，微软会给你一个公网IP，这个公网IP一定要牢记，接下来需要用到,现在假定你得到的公网IP为140.205.32.13\n\n### 配置域名\n\n　　申请一个域名，推荐到阿里云申请，因为便宜，我申请的.top国际顶级域名第一年才1块钱。\n　　附申请地址：[https://wanwang.aliyun.com/domain/yumingheji](https://wanwang.aliyun.com/domain/yumingheji \"https://wanwang.aliyun.com/domain/yumingheji\")\n\n　　申请过程请严格按照人家的流程，不过要提醒一点的是务必要用真实信息，否则人家会封掉你的域名。\n\n　　现在假定你申请到了一个域名，假如你申请到的域名为aliyun.top,你需要进入阿里云的域名控制台，为其添加两条记录。\n\n　　第一条为NS记录，主机记录填一个自己喜欢的名称，记录值为解析该域名的域名，记录值要牢记，下面用的到。\n\n　　假设你添加的NS记录名称为fq, 记录值为dns.aliyun.top。\n\n　　再为申请到的域名添加一个A记录，A记录的主机记录是NS记录的记录值，A记录的记录值是你所申请到的VPS的公网IP，如下表：\n\n| 记录类型 | 主机记录 | 记录值 |\n| ------------ | ------------ | ------------ |\n| NS |  fq | dns.alibaba.top |\n|  A  | dns | 140.205.32.13 |\n\n\n　　当本地域名服务器无法解析我们伪装的数据包后，便将数据包发送给NS记录指定的服务器dns.aliyun.top, 而dns.aliyun.top的IP地址已经在A记录中给出了，所以刚才原理没看懂的朋友朋友们现在应该知道为什么本地域名服务器会将数据包发送到我们的VPS中了吧\n\n### 启动代理\n\n　　windows系统用户在计算机上安装一个名为xshell的软件，它用来连接我们的VPS。\n　　附下载地址：[http://www.downxia.com/downinfo/150560.html?fromm](http://www.downxia.com/downinfo/150560.html?fromm \"http://www.downxia.com/downinfo/150560.html?fromm\")\n\n　　下载后安装，安装时选择“家庭/学校 ”版，商业版要钱，家庭版其实就能满足我们的需求了。\n\n　　安装成功后，依次点击点击\"文件\"->\"新建\"。名称随意，协议选择SSH，主机名填你的VBS公网IP，端口号填22，添完后点击连接；\n\n　　等一会弹出一个输入用户名的窗口，输入你部署服务器时设置的用户名，输入完成后点击记住用户名，点击确定。在弹出的新窗口中输入你部署服务器时设置的密码，输入完成后点击确定，不出意外，你将会连接到你的VBS,如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" alt=\"\" /></a>\n\n接下来在Xshell中输入sudo apt-get install dns2tcp，敲回车，这条命令用来安装dns2tcp这个软件，很快就会安装完毕。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" alt=\"\" /></a>\n\n【注】没用过Linux的用户可能看不懂这些Linux命令，但是不懂没关系，跟着我做就行了。\n\n#### 配置dns2tcp：\n\n再次敲入命令：`sudo vim /etc/dns2tcpd.conf` ，用vim编辑器将其中的内容替换为以下内容：\n\n>listen = 10.0.0.4     #这里写你的云服务器的内网IP\n>port = 53\n>user = nobody\n>chroot = /tmp\n>domain = dns.aliyun.top         #这里写你设置的NS记录值\n>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128\n\n下面创建后台进程，运行dns2tcp，依次键入并执行如下命令：\n`screen -S dns2tcpd`　　　　　　　　　  #创建后台会话\n`dns2tcpd -f /etc/dns2tcpd.conf -F -d 2`　  #启动dns2tcp\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，说明dns2tcp启动成功了，此时按下Ctrl + a+d键，让dns2tcp进程后台执行，再关闭与服务器的连接就行了\n\n#### windows客户端配置：\n\n打开CMD，键入并执行如下命令 ： \n`dns2tcpc -r ssh -z dns.aliyun.top 140.205.32.13  -l 8888 -d 2`\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，代表会话已经建立了，此时最小化这个窗口，**记住千万不要关闭它！！！**\n\n>-r 后接服务名称<ssh/socks/http中的任意一个>\n>-z 后接你设置的NS记录,和你的VPS公网ip\n>-l 后接本地端口，随便一个常用端口就行\n>-d 开启 Debug\n\n现在假设你完全按照我给出的流程走的，离成功只有一步之遥了，下面用Xshell转换Socks4/5通用代理：\n　　在xshell中仿照上面新建会话：IP地址为127.0.0.1，端口为8888 ；然后点击隧道，类型选择socks4/5，端口填1080，输入完成后点击确定，若不出意外，此时CMD中会出现大量信息，这些信息代表通过dns2tcp的数据包，这就表明你的电脑已经在和服务器传输数据了。而xshell中又会提示你登录到你的服务器，仿照上文输入用户名和密码（最好选择记住用户名和密码，这样下次就不用那么麻烦了），点击确定并成功登录到你的服务器后，最小化xshell，**记住，此时千万不要关闭xshell！！！**\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" alt=\"\" /></a>\n\n　打开Internet选项，依次选择\"连接\"->\"局域网设置\"->\"为LAN使用代理服务器\"->\"高级\"\n\n　在socks/套接字输入框中，要使用的代理服务器地址填127.0.0.1，端口填1080，然后点击确定。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" alt=\"\" /></a>\n\n**到此，大功告成，打开你的浏览器试试吧！！！**\n\n### 附录\n\n#### screen命令的使用：\n\n*screen命令用来创建后台进程，进程运行时，便于我们能继续做其它工作。*\n\n|   操作 | 命令  |\n| ------------ | ------------ |\n| 创建screen会话  | screen -S dns2tcpd   |\n| 启动dns2tcp | sudo dns2tcpd -f /etc/dns2tcpd.conf -F -d 2   |\n| 暂时离开快捷键   | Ctrl + a + d |\n| 恢复screen会话  |  screen -r dns2tcpd  |\n| 列出当前的会话列表  |  screen -ls   |\n| 强行终止dns2tcp进程 | screen -S dns2tcpd -X quit |\n\n\n#### 常见DNS记录的含义：\n\n|  记录 | 说明  |\n| ------------ | ------------ |\n|A记录  |  用来指定主机名或域名对应的IP地址记录，通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 |\n| NS记录 | 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析,简单的说，NS记录是指定由哪个DNS服务器解析你的域名。 |\n| MX记录 | 邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。  |\n| CNAME记录 |别名记录，允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。|\n","source":"_posts/绕过校园网Web认证.md","raw":"---\ntitle: 绕过校园网Web认证\ndate: 2019-12-10 21:34:58\npermalink: 8\ncategories: 好玩的事\ntags: 兴趣\nreward: true\n---\n\n>该文章最初于2017年11月08日发布在[博客园](https://www.cnblogs.com/nkqlhqc/p/7805837.html)\n当初我还在上大一，掌握的计算机知识非常少，只是为了好玩，实现了自己的某个小想法。如今两年过去了，这篇文章已经有三万多人次的阅读量，我也很欣慰。现将该篇文章同步到我的个人博客中，以勉励自己，时刻保持一个好奇心。\n\n相信很多高校学生都有用WEB认证方式接入校园网的经历。\n\n　　拿我所在的大学为例，我们大学的校园网由联通公司承建，当我连上寝室的无线路由器后，浏览器会自动弹出一个由卓智公司开发的认证界面，如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" alt=\"\" /></a>\n\n　　如果买了联通公司的流量，会取得一个账号和密码，输入账号密码登陆后就能享用无线了，当然啦，对于爱折腾的人来说，总要想点方法绕过这个认证，不为别的，只为实现内心的一个想法。所以我就在各大技术论坛查询了一些绕过web认证的方法。网上有很多人给出了方法，这些方法大同小异，基本原理都一样，但是呢，难免有疏漏和难懂的地方。所以，接下来，我就对这个问题做一次系统的介绍。\n\n### 原理解释\n\n　　当我们连上校园网的无线路由器后，虽然上不了网，但是我们的计算机却分配到了IP地址（那么为什么要给我们分配IP呢？很好回答啦，不分配IP地址web认证就实现不了呀！）此时若我们进行一些上网的操作，例如访问百度主页，那么计算机的数据包将从TCP443端口上发出，校园网网关就会拦截从这个端口上发出的数据包。同理从其它端口上发出的数据包也会遭到拦截。\n\n　　**但是有一个神奇的端口，从这个端口发出的数据包不会遭到网关拦截，它就是UDP53端口。对计算机网络稍微了解的朋友应该知道在UDP53端口上运行的协议是DNS协议（域名解析协议），也就是说我们现在可以正常查询网站域名对应的IP地址。**\n\n例如用Windows自带的nslookup命令查询百度的IP地址时会返回一个正确的结果：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" alt=\"\" /></a>\n\n　　<strong>既然UDP53端口的数据包可以通过网关，那么我们可以在本地运行一个程序将其它端口的数据包伪装组成UDP53端口的数据包，然后发送到本地域名服务器，那么网关就不会进行拦截了，数据包就顺利的通过了网关，可是发送出去的数据报如何返回呢？这就需要我们做进一步的设置。</strong>\n\n　　接下来我们需要一个VPS（云服务器）和一个域名，我了便于叙述，我给这个云服务器起名为V，域名起名为Y。我们伪装的DNS数据包要查询的域名就是Y，本地域名服务器接收到这个伪装后的数据包后，由于它无法解析这个域名Y，便将数据包进行转发，让能够解析Y的域名服务器进行解析，接下来我们将Y设置一个NS记录，用来指定Y由哪个域名服务器来进行解析，我们指定的域名服务器就是前面提到的V，所以接下来数据包会被发送到V中。此时我们在V中运行一个程序，对伪装的数据包进行还原，还原后的数据包再发送出去，这样当V接收到响应数据包后，V上运行的程序会再次对其进行伪装，伪装成一个DNS响应数据包，这个DNS响应数据包会沿着上述相反的路径发送回我们的计算机，我们的计算机再次对这个DNS响应数据包进行还原，到现在，我们真正想要得到的数据包已经到手了。也许上面的叙述有点绕，我放一张图大家就能明白了：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" alt=\"\" /></a>\n\n好了，要是看了图没明白也没有关系，只要按照下面的步骤做就可以了。\n\n　　Windows上与Linux上实现方法不同，就伪装数据包的程序而言，在windows平台上推荐使用dns2tcp这个软件，而在linux平台上推荐使用iodine这个软件，关于iodine的使用，我会再写一篇文章，所以下面主要讲一下dns2tcp的使用，也就是在windows上实现绕过WEB认证，linux系统用户请移步我的另一篇文章\n\n### 安装软件\n\n　　在本地计算机上安装dns2tcp这个软件，它的作用是对数据包进行伪装与还原。\n\n　　附Windows版下载地址：[https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw](https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw \"https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw\")   提取码：w198\n\n### 配置虚拟主机\n\n　　申请一个VPS，国内VPS服务商众多，什么阿里云啦，腾讯云啦，百度云啦。在这里我给大家推荐由世纪互联运营的微软Azure云服务器，1元体验一个月，申请与部署方式很简单，而且服务器配置与带宽很高，可惜的是就能使用一个月，其实学服务器开发的大学朋友们也可以申请一个练练手，毕竟这是一次难得的实践机会嘛！\n\n附微软Azure云服务器申请地址：[https://www.azure.cn/pricing/1rmb-trial-full/](https://www.azure.cn/pricing/1rmb-trial-full/ \"https://www.azure.cn/pricing/1rmb-trial-full/\")\n\n　　有关申请与部署服务器的细节，我就不再赘述了，按照流程走就行。有不懂的地方可以参看微软给的文档和视频教程。\n\n　　下面这个操作尤为重要，部署成功服务器后，务必参照微软的文档为服务器添加入站与出站规则，也就是哪些类型的数据包可以进出你的服务器，那些类型的数据包会被防火墙拦截，这个步骤决定着伪装的数据包是否能够进入到我们的VBS\n\n将TCP80，TCP443，UDP53端口的数据设置为允许入站与出站，如下图所示：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" alt=\"\" /></a>\n\n申请成功后，微软会给你一个公网IP，这个公网IP一定要牢记，接下来需要用到,现在假定你得到的公网IP为140.205.32.13\n\n### 配置域名\n\n　　申请一个域名，推荐到阿里云申请，因为便宜，我申请的.top国际顶级域名第一年才1块钱。\n　　附申请地址：[https://wanwang.aliyun.com/domain/yumingheji](https://wanwang.aliyun.com/domain/yumingheji \"https://wanwang.aliyun.com/domain/yumingheji\")\n\n　　申请过程请严格按照人家的流程，不过要提醒一点的是务必要用真实信息，否则人家会封掉你的域名。\n\n　　现在假定你申请到了一个域名，假如你申请到的域名为aliyun.top,你需要进入阿里云的域名控制台，为其添加两条记录。\n\n　　第一条为NS记录，主机记录填一个自己喜欢的名称，记录值为解析该域名的域名，记录值要牢记，下面用的到。\n\n　　假设你添加的NS记录名称为fq, 记录值为dns.aliyun.top。\n\n　　再为申请到的域名添加一个A记录，A记录的主机记录是NS记录的记录值，A记录的记录值是你所申请到的VPS的公网IP，如下表：\n\n| 记录类型 | 主机记录 | 记录值 |\n| ------------ | ------------ | ------------ |\n| NS |  fq | dns.alibaba.top |\n|  A  | dns | 140.205.32.13 |\n\n\n　　当本地域名服务器无法解析我们伪装的数据包后，便将数据包发送给NS记录指定的服务器dns.aliyun.top, 而dns.aliyun.top的IP地址已经在A记录中给出了，所以刚才原理没看懂的朋友朋友们现在应该知道为什么本地域名服务器会将数据包发送到我们的VPS中了吧\n\n### 启动代理\n\n　　windows系统用户在计算机上安装一个名为xshell的软件，它用来连接我们的VPS。\n　　附下载地址：[http://www.downxia.com/downinfo/150560.html?fromm](http://www.downxia.com/downinfo/150560.html?fromm \"http://www.downxia.com/downinfo/150560.html?fromm\")\n\n　　下载后安装，安装时选择“家庭/学校 ”版，商业版要钱，家庭版其实就能满足我们的需求了。\n\n　　安装成功后，依次点击点击\"文件\"->\"新建\"。名称随意，协议选择SSH，主机名填你的VBS公网IP，端口号填22，添完后点击连接；\n\n　　等一会弹出一个输入用户名的窗口，输入你部署服务器时设置的用户名，输入完成后点击记住用户名，点击确定。在弹出的新窗口中输入你部署服务器时设置的密码，输入完成后点击确定，不出意外，你将会连接到你的VBS,如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" alt=\"\" /></a>\n\n接下来在Xshell中输入sudo apt-get install dns2tcp，敲回车，这条命令用来安装dns2tcp这个软件，很快就会安装完毕。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" alt=\"\" /></a>\n\n【注】没用过Linux的用户可能看不懂这些Linux命令，但是不懂没关系，跟着我做就行了。\n\n#### 配置dns2tcp：\n\n再次敲入命令：`sudo vim /etc/dns2tcpd.conf` ，用vim编辑器将其中的内容替换为以下内容：\n\n>listen = 10.0.0.4     #这里写你的云服务器的内网IP\n>port = 53\n>user = nobody\n>chroot = /tmp\n>domain = dns.aliyun.top         #这里写你设置的NS记录值\n>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128\n\n下面创建后台进程，运行dns2tcp，依次键入并执行如下命令：\n`screen -S dns2tcpd`　　　　　　　　　  #创建后台会话\n`dns2tcpd -f /etc/dns2tcpd.conf -F -d 2`　  #启动dns2tcp\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，说明dns2tcp启动成功了，此时按下Ctrl + a+d键，让dns2tcp进程后台执行，再关闭与服务器的连接就行了\n\n#### windows客户端配置：\n\n打开CMD，键入并执行如下命令 ： \n`dns2tcpc -r ssh -z dns.aliyun.top 140.205.32.13  -l 8888 -d 2`\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，代表会话已经建立了，此时最小化这个窗口，**记住千万不要关闭它！！！**\n\n>-r 后接服务名称<ssh/socks/http中的任意一个>\n>-z 后接你设置的NS记录,和你的VPS公网ip\n>-l 后接本地端口，随便一个常用端口就行\n>-d 开启 Debug\n\n现在假设你完全按照我给出的流程走的，离成功只有一步之遥了，下面用Xshell转换Socks4/5通用代理：\n　　在xshell中仿照上面新建会话：IP地址为127.0.0.1，端口为8888 ；然后点击隧道，类型选择socks4/5，端口填1080，输入完成后点击确定，若不出意外，此时CMD中会出现大量信息，这些信息代表通过dns2tcp的数据包，这就表明你的电脑已经在和服务器传输数据了。而xshell中又会提示你登录到你的服务器，仿照上文输入用户名和密码（最好选择记住用户名和密码，这样下次就不用那么麻烦了），点击确定并成功登录到你的服务器后，最小化xshell，**记住，此时千万不要关闭xshell！！！**\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" alt=\"\" /></a>\n\n　打开Internet选项，依次选择\"连接\"->\"局域网设置\"->\"为LAN使用代理服务器\"->\"高级\"\n\n　在socks/套接字输入框中，要使用的代理服务器地址填127.0.0.1，端口填1080，然后点击确定。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" alt=\"\" /></a>\n\n**到此，大功告成，打开你的浏览器试试吧！！！**\n\n### 附录\n\n#### screen命令的使用：\n\n*screen命令用来创建后台进程，进程运行时，便于我们能继续做其它工作。*\n\n|   操作 | 命令  |\n| ------------ | ------------ |\n| 创建screen会话  | screen -S dns2tcpd   |\n| 启动dns2tcp | sudo dns2tcpd -f /etc/dns2tcpd.conf -F -d 2   |\n| 暂时离开快捷键   | Ctrl + a + d |\n| 恢复screen会话  |  screen -r dns2tcpd  |\n| 列出当前的会话列表  |  screen -ls   |\n| 强行终止dns2tcp进程 | screen -S dns2tcpd -X quit |\n\n\n#### 常见DNS记录的含义：\n\n|  记录 | 说明  |\n| ------------ | ------------ |\n|A记录  |  用来指定主机名或域名对应的IP地址记录，通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 |\n| NS记录 | 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析,简单的说，NS记录是指定由哪个DNS服务器解析你的域名。 |\n| MX记录 | 邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。  |\n| CNAME记录 |别名记录，允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。|\n","slug":"8","published":1,"updated":"2019-12-10T13:37:17.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tu000ca7fwb9ec4z7w","content":"<blockquote>\n<p>该文章最初于2017年11月08日发布在<span class=\"external-link\"><a href=\"https://www.cnblogs.com/nkqlhqc/p/7805837.html\" target=\"_blank\" rel=\"noopener\">博客园</a><i class=\"fa fa-external-link\"></i></span><br>当初我还在上大一，掌握的计算机知识非常少，只是为了好玩，实现了自己的某个小想法。如今两年过去了，这篇文章已经有三万多人次的阅读量，我也很欣慰。现将该篇文章同步到我的个人博客中，以勉励自己，时刻保持一个好奇心。</p>\n</blockquote>\n<p>相信很多高校学生都有用WEB认证方式接入校园网的经历。</p>\n<p>　　拿我所在的大学为例，我们大学的校园网由联通公司承建，当我连上寝室的无线路由器后，浏览器会自动弹出一个由卓智公司开发的认证界面，如下图：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　如果买了联通公司的流量，会取得一个账号和密码，输入账号密码登陆后就能享用无线了，当然啦，对于爱折腾的人来说，总要想点方法绕过这个认证，不为别的，只为实现内心的一个想法。所以我就在各大技术论坛查询了一些绕过web认证的方法。网上有很多人给出了方法，这些方法大同小异，基本原理都一样，但是呢，难免有疏漏和难懂的地方。所以，接下来，我就对这个问题做一次系统的介绍。</p>\n<h3 id=\"原理解释\"><span class=\"heading-link\">原理解释</span></h3><p>　　当我们连上校园网的无线路由器后，虽然上不了网，但是我们的计算机却分配到了IP地址（那么为什么要给我们分配IP呢？很好回答啦，不分配IP地址web认证就实现不了呀！）此时若我们进行一些上网的操作，例如访问百度主页，那么计算机的数据包将从TCP443端口上发出，校园网网关就会拦截从这个端口上发出的数据包。同理从其它端口上发出的数据包也会遭到拦截。</p>\n<p>　　<strong>但是有一个神奇的端口，从这个端口发出的数据包不会遭到网关拦截，它就是UDP53端口。对计算机网络稍微了解的朋友应该知道在UDP53端口上运行的协议是DNS协议（域名解析协议），也就是说我们现在可以正常查询网站域名对应的IP地址。</strong></p>\n<p>例如用Windows自带的nslookup命令查询百度的IP地址时会返回一个正确的结果：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　<strong>既然UDP53端口的数据包可以通过网关，那么我们可以在本地运行一个程序将其它端口的数据包伪装组成UDP53端口的数据包，然后发送到本地域名服务器，那么网关就不会进行拦截了，数据包就顺利的通过了网关，可是发送出去的数据报如何返回呢？这就需要我们做进一步的设置。</strong></p>\n<p>　　接下来我们需要一个VPS（云服务器）和一个域名，我了便于叙述，我给这个云服务器起名为V，域名起名为Y。我们伪装的DNS数据包要查询的域名就是Y，本地域名服务器接收到这个伪装后的数据包后，由于它无法解析这个域名Y，便将数据包进行转发，让能够解析Y的域名服务器进行解析，接下来我们将Y设置一个NS记录，用来指定Y由哪个域名服务器来进行解析，我们指定的域名服务器就是前面提到的V，所以接下来数据包会被发送到V中。此时我们在V中运行一个程序，对伪装的数据包进行还原，还原后的数据包再发送出去，这样当V接收到响应数据包后，V上运行的程序会再次对其进行伪装，伪装成一个DNS响应数据包，这个DNS响应数据包会沿着上述相反的路径发送回我们的计算机，我们的计算机再次对这个DNS响应数据包进行还原，到现在，我们真正想要得到的数据包已经到手了。也许上面的叙述有点绕，我放一张图大家就能明白了：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>好了，要是看了图没明白也没有关系，只要按照下面的步骤做就可以了。</p>\n<p>　　Windows上与Linux上实现方法不同，就伪装数据包的程序而言，在windows平台上推荐使用dns2tcp这个软件，而在linux平台上推荐使用iodine这个软件，关于iodine的使用，我会再写一篇文章，所以下面主要讲一下dns2tcp的使用，也就是在windows上实现绕过WEB认证，linux系统用户请移步我的另一篇文章</p>\n<h3 id=\"安装软件\"><span class=\"heading-link\">安装软件</span></h3><p>　　在本地计算机上安装dns2tcp这个软件，它的作用是对数据包进行伪装与还原。</p>\n<p>　　附Windows版下载地址：<span class=\"external-link\"><a href=\"https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw</a><i class=\"fa fa-external-link\"></i></span>   提取码：w198</p>\n<h3 id=\"配置虚拟主机\"><span class=\"heading-link\">配置虚拟主机</span></h3><p>　　申请一个VPS，国内VPS服务商众多，什么阿里云啦，腾讯云啦，百度云啦。在这里我给大家推荐由世纪互联运营的微软Azure云服务器，1元体验一个月，申请与部署方式很简单，而且服务器配置与带宽很高，可惜的是就能使用一个月，其实学服务器开发的大学朋友们也可以申请一个练练手，毕竟这是一次难得的实践机会嘛！</p>\n<p>附微软Azure云服务器申请地址：<span class=\"external-link\"><a href=\"https://www.azure.cn/pricing/1rmb-trial-full/\" target=\"_blank\" rel=\"noopener\">https://www.azure.cn/pricing/1rmb-trial-full/</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　有关申请与部署服务器的细节，我就不再赘述了，按照流程走就行。有不懂的地方可以参看微软给的文档和视频教程。</p>\n<p>　　下面这个操作尤为重要，部署成功服务器后，务必参照微软的文档为服务器添加入站与出站规则，也就是哪些类型的数据包可以进出你的服务器，那些类型的数据包会被防火墙拦截，这个步骤决定着伪装的数据包是否能够进入到我们的VBS</p>\n<p>将TCP80，TCP443，UDP53端口的数据设置为允许入站与出站，如下图所示：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>申请成功后，微软会给你一个公网IP，这个公网IP一定要牢记，接下来需要用到,现在假定你得到的公网IP为140.205.32.13</p>\n<h3 id=\"配置域名\"><span class=\"heading-link\">配置域名</span></h3><p>　　申请一个域名，推荐到阿里云申请，因为便宜，我申请的.top国际顶级域名第一年才1块钱。<br>　　附申请地址：<span class=\"external-link\"><a href=\"https://wanwang.aliyun.com/domain/yumingheji\" target=\"_blank\" rel=\"noopener\">https://wanwang.aliyun.com/domain/yumingheji</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　申请过程请严格按照人家的流程，不过要提醒一点的是务必要用真实信息，否则人家会封掉你的域名。</p>\n<p>　　现在假定你申请到了一个域名，假如你申请到的域名为aliyun.top,你需要进入阿里云的域名控制台，为其添加两条记录。</p>\n<p>　　第一条为NS记录，主机记录填一个自己喜欢的名称，记录值为解析该域名的域名，记录值要牢记，下面用的到。</p>\n<p>　　假设你添加的NS记录名称为fq, 记录值为dns.aliyun.top。</p>\n<p>　　再为申请到的域名添加一个A记录，A记录的主机记录是NS记录的记录值，A记录的记录值是你所申请到的VPS的公网IP，如下表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>记录类型</th>\n<th>主机记录</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NS</td>\n<td>fq</td>\n<td>dns.alibaba.top</td>\n</tr>\n<tr>\n<td>A</td>\n<td>dns</td>\n<td>140.205.32.13</td>\n</tr>\n</tbody></table></div>\n<p>　　当本地域名服务器无法解析我们伪装的数据包后，便将数据包发送给NS记录指定的服务器dns.aliyun.top, 而dns.aliyun.top的IP地址已经在A记录中给出了，所以刚才原理没看懂的朋友朋友们现在应该知道为什么本地域名服务器会将数据包发送到我们的VPS中了吧</p>\n<h3 id=\"启动代理\"><span class=\"heading-link\">启动代理</span></h3><p>　　windows系统用户在计算机上安装一个名为xshell的软件，它用来连接我们的VPS。<br>　　附下载地址：<span class=\"external-link\"><a href=\"http://www.downxia.com/downinfo/150560.html?fromm\" target=\"_blank\" rel=\"noopener\">http://www.downxia.com/downinfo/150560.html?fromm</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　下载后安装，安装时选择“家庭/学校 ”版，商业版要钱，家庭版其实就能满足我们的需求了。</p>\n<p>　　安装成功后，依次点击点击”文件”-&gt;”新建”。名称随意，协议选择SSH，主机名填你的VBS公网IP，端口号填22，添完后点击连接；</p>\n<p>　　等一会弹出一个输入用户名的窗口，输入你部署服务器时设置的用户名，输入完成后点击记住用户名，点击确定。在弹出的新窗口中输入你部署服务器时设置的密码，输入完成后点击确定，不出意外，你将会连接到你的VBS,如下图：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>接下来在Xshell中输入sudo apt-get install dns2tcp，敲回车，这条命令用来安装dns2tcp这个软件，很快就会安装完毕。</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>【注】没用过Linux的用户可能看不懂这些Linux命令，但是不懂没关系，跟着我做就行了。</p>\n<h4 id=\"配置dns2tcp：\"><span class=\"heading-link\">配置dns2tcp：</span></h4><p>再次敲入命令：<code>sudo vim /etc/dns2tcpd.conf</code> ，用vim编辑器将其中的内容替换为以下内容：</p>\n<blockquote>\n<p>listen = 10.0.0.4     #这里写你的云服务器的内网IP<br>port = 53<br>user = nobody<br>chroot = /tmp<br>domain = dns.aliyun.top         #这里写你设置的NS记录值<br>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128</p>\n</blockquote>\n<p>下面创建后台进程，运行dns2tcp，依次键入并执行如下命令：<br><code>screen -S dns2tcpd</code>　　　　　　　　　  #创建后台会话<br><code>dns2tcpd -f /etc/dns2tcpd.conf -F -d 2</code>　  #启动dns2tcp</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>当出现上图显示的内容时，说明dns2tcp启动成功了，此时按下Ctrl + a+d键，让dns2tcp进程后台执行，再关闭与服务器的连接就行了</p>\n<h4 id=\"windows客户端配置：\"><span class=\"heading-link\">windows客户端配置：</span></h4><p>打开CMD，键入并执行如下命令 ：<br><code>dns2tcpc -r ssh -z dns.aliyun.top 140.205.32.13  -l 8888 -d 2</code></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>当出现上图显示的内容时，代表会话已经建立了，此时最小化这个窗口，<strong>记住千万不要关闭它！！！</strong></p>\n<blockquote>\n<p>-r 后接服务名称&lt;ssh/socks/http中的任意一个&gt;<br>-z 后接你设置的NS记录,和你的VPS公网ip<br>-l 后接本地端口，随便一个常用端口就行<br>-d 开启 Debug</p>\n</blockquote>\n<p>现在假设你完全按照我给出的流程走的，离成功只有一步之遥了，下面用Xshell转换Socks4/5通用代理：<br>　　在xshell中仿照上面新建会话：IP地址为127.0.0.1，端口为8888 ；然后点击隧道，类型选择socks4/5，端口填1080，输入完成后点击确定，若不出意外，此时CMD中会出现大量信息，这些信息代表通过dns2tcp的数据包，这就表明你的电脑已经在和服务器传输数据了。而xshell中又会提示你登录到你的服务器，仿照上文输入用户名和密码（最好选择记住用户名和密码，这样下次就不用那么麻烦了），点击确定并成功登录到你的服务器后，最小化xshell，<strong>记住，此时千万不要关闭xshell！！！</strong></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　打开Internet选项，依次选择”连接”-&gt;”局域网设置”-&gt;”为LAN使用代理服务器”-&gt;”高级”</p>\n<p>　在socks/套接字输入框中，要使用的代理服务器地址填127.0.0.1，端口填1080，然后点击确定。</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>到此，大功告成，打开你的浏览器试试吧！！！</strong></p>\n<h3 id=\"附录\"><span class=\"heading-link\">附录</span></h3><h4 id=\"screen命令的使用：\"><span class=\"heading-link\">screen命令的使用：</span></h4><p><em>screen命令用来创建后台进程，进程运行时，便于我们能继续做其它工作。</em></p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建screen会话</td>\n<td>screen -S dns2tcpd</td>\n</tr>\n<tr>\n<td>启动dns2tcp</td>\n<td>sudo dns2tcpd -f /etc/dns2tcpd.conf -F -d 2</td>\n</tr>\n<tr>\n<td>暂时离开快捷键</td>\n<td>Ctrl + a + d</td>\n</tr>\n<tr>\n<td>恢复screen会话</td>\n<td>screen -r dns2tcpd</td>\n</tr>\n<tr>\n<td>列出当前的会话列表</td>\n<td>screen -ls</td>\n</tr>\n<tr>\n<td>强行终止dns2tcp进程</td>\n<td>screen -S dns2tcpd -X quit</td>\n</tr>\n</tbody></table></div>\n<h4 id=\"常见DNS记录的含义：\"><span class=\"heading-link\">常见DNS记录的含义：</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>记录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A记录</td>\n<td>用来指定主机名或域名对应的IP地址记录，通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。</td>\n</tr>\n<tr>\n<td>NS记录</td>\n<td>域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析,简单的说，NS记录是指定由哪个DNS服务器解析你的域名。</td>\n</tr>\n<tr>\n<td>MX记录</td>\n<td>邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</td>\n</tr>\n<tr>\n<td>CNAME记录</td>\n<td>别名记录，允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。</td>\n</tr>\n</tbody></table></div>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>该文章最初于2017年11月08日发布在<span class=\"external-link\"><a href=\"https://www.cnblogs.com/nkqlhqc/p/7805837.html\" target=\"_blank\" rel=\"noopener\">博客园</a><i class=\"fa fa-external-link\"></i></span><br>当初我还在上大一，掌握的计算机知识非常少，只是为了好玩，实现了自己的某个小想法。如今两年过去了，这篇文章已经有三万多人次的阅读量，我也很欣慰。现将该篇文章同步到我的个人博客中，以勉励自己，时刻保持一个好奇心。</p>\n</blockquote>\n<p>相信很多高校学生都有用WEB认证方式接入校园网的经历。</p>\n<p>　　拿我所在的大学为例，我们大学的校园网由联通公司承建，当我连上寝室的无线路由器后，浏览器会自动弹出一个由卓智公司开发的认证界面，如下图：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　如果买了联通公司的流量，会取得一个账号和密码，输入账号密码登陆后就能享用无线了，当然啦，对于爱折腾的人来说，总要想点方法绕过这个认证，不为别的，只为实现内心的一个想法。所以我就在各大技术论坛查询了一些绕过web认证的方法。网上有很多人给出了方法，这些方法大同小异，基本原理都一样，但是呢，难免有疏漏和难懂的地方。所以，接下来，我就对这个问题做一次系统的介绍。</p>\n<h3 id=\"原理解释\"><span class=\"heading-link\">原理解释</span></h3><p>　　当我们连上校园网的无线路由器后，虽然上不了网，但是我们的计算机却分配到了IP地址（那么为什么要给我们分配IP呢？很好回答啦，不分配IP地址web认证就实现不了呀！）此时若我们进行一些上网的操作，例如访问百度主页，那么计算机的数据包将从TCP443端口上发出，校园网网关就会拦截从这个端口上发出的数据包。同理从其它端口上发出的数据包也会遭到拦截。</p>\n<p>　　<strong>但是有一个神奇的端口，从这个端口发出的数据包不会遭到网关拦截，它就是UDP53端口。对计算机网络稍微了解的朋友应该知道在UDP53端口上运行的协议是DNS协议（域名解析协议），也就是说我们现在可以正常查询网站域名对应的IP地址。</strong></p>\n<p>例如用Windows自带的nslookup命令查询百度的IP地址时会返回一个正确的结果：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　<strong>既然UDP53端口的数据包可以通过网关，那么我们可以在本地运行一个程序将其它端口的数据包伪装组成UDP53端口的数据包，然后发送到本地域名服务器，那么网关就不会进行拦截了，数据包就顺利的通过了网关，可是发送出去的数据报如何返回呢？这就需要我们做进一步的设置。</strong></p>\n<p>　　接下来我们需要一个VPS（云服务器）和一个域名，我了便于叙述，我给这个云服务器起名为V，域名起名为Y。我们伪装的DNS数据包要查询的域名就是Y，本地域名服务器接收到这个伪装后的数据包后，由于它无法解析这个域名Y，便将数据包进行转发，让能够解析Y的域名服务器进行解析，接下来我们将Y设置一个NS记录，用来指定Y由哪个域名服务器来进行解析，我们指定的域名服务器就是前面提到的V，所以接下来数据包会被发送到V中。此时我们在V中运行一个程序，对伪装的数据包进行还原，还原后的数据包再发送出去，这样当V接收到响应数据包后，V上运行的程序会再次对其进行伪装，伪装成一个DNS响应数据包，这个DNS响应数据包会沿着上述相反的路径发送回我们的计算机，我们的计算机再次对这个DNS响应数据包进行还原，到现在，我们真正想要得到的数据包已经到手了。也许上面的叙述有点绕，我放一张图大家就能明白了：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>好了，要是看了图没明白也没有关系，只要按照下面的步骤做就可以了。</p>\n<p>　　Windows上与Linux上实现方法不同，就伪装数据包的程序而言，在windows平台上推荐使用dns2tcp这个软件，而在linux平台上推荐使用iodine这个软件，关于iodine的使用，我会再写一篇文章，所以下面主要讲一下dns2tcp的使用，也就是在windows上实现绕过WEB认证，linux系统用户请移步我的另一篇文章</p>\n<h3 id=\"安装软件\"><span class=\"heading-link\">安装软件</span></h3><p>　　在本地计算机上安装dns2tcp这个软件，它的作用是对数据包进行伪装与还原。</p>\n<p>　　附Windows版下载地址：<span class=\"external-link\"><a href=\"https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw</a><i class=\"fa fa-external-link\"></i></span>   提取码：w198</p>\n<h3 id=\"配置虚拟主机\"><span class=\"heading-link\">配置虚拟主机</span></h3><p>　　申请一个VPS，国内VPS服务商众多，什么阿里云啦，腾讯云啦，百度云啦。在这里我给大家推荐由世纪互联运营的微软Azure云服务器，1元体验一个月，申请与部署方式很简单，而且服务器配置与带宽很高，可惜的是就能使用一个月，其实学服务器开发的大学朋友们也可以申请一个练练手，毕竟这是一次难得的实践机会嘛！</p>\n<p>附微软Azure云服务器申请地址：<span class=\"external-link\"><a href=\"https://www.azure.cn/pricing/1rmb-trial-full/\" target=\"_blank\" rel=\"noopener\">https://www.azure.cn/pricing/1rmb-trial-full/</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　有关申请与部署服务器的细节，我就不再赘述了，按照流程走就行。有不懂的地方可以参看微软给的文档和视频教程。</p>\n<p>　　下面这个操作尤为重要，部署成功服务器后，务必参照微软的文档为服务器添加入站与出站规则，也就是哪些类型的数据包可以进出你的服务器，那些类型的数据包会被防火墙拦截，这个步骤决定着伪装的数据包是否能够进入到我们的VBS</p>\n<p>将TCP80，TCP443，UDP53端口的数据设置为允许入站与出站，如下图所示：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>申请成功后，微软会给你一个公网IP，这个公网IP一定要牢记，接下来需要用到,现在假定你得到的公网IP为140.205.32.13</p>\n<h3 id=\"配置域名\"><span class=\"heading-link\">配置域名</span></h3><p>　　申请一个域名，推荐到阿里云申请，因为便宜，我申请的.top国际顶级域名第一年才1块钱。<br>　　附申请地址：<span class=\"external-link\"><a href=\"https://wanwang.aliyun.com/domain/yumingheji\" target=\"_blank\" rel=\"noopener\">https://wanwang.aliyun.com/domain/yumingheji</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　申请过程请严格按照人家的流程，不过要提醒一点的是务必要用真实信息，否则人家会封掉你的域名。</p>\n<p>　　现在假定你申请到了一个域名，假如你申请到的域名为aliyun.top,你需要进入阿里云的域名控制台，为其添加两条记录。</p>\n<p>　　第一条为NS记录，主机记录填一个自己喜欢的名称，记录值为解析该域名的域名，记录值要牢记，下面用的到。</p>\n<p>　　假设你添加的NS记录名称为fq, 记录值为dns.aliyun.top。</p>\n<p>　　再为申请到的域名添加一个A记录，A记录的主机记录是NS记录的记录值，A记录的记录值是你所申请到的VPS的公网IP，如下表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>记录类型</th>\n<th>主机记录</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NS</td>\n<td>fq</td>\n<td>dns.alibaba.top</td>\n</tr>\n<tr>\n<td>A</td>\n<td>dns</td>\n<td>140.205.32.13</td>\n</tr>\n</tbody></table></div>\n<p>　　当本地域名服务器无法解析我们伪装的数据包后，便将数据包发送给NS记录指定的服务器dns.aliyun.top, 而dns.aliyun.top的IP地址已经在A记录中给出了，所以刚才原理没看懂的朋友朋友们现在应该知道为什么本地域名服务器会将数据包发送到我们的VPS中了吧</p>\n<h3 id=\"启动代理\"><span class=\"heading-link\">启动代理</span></h3><p>　　windows系统用户在计算机上安装一个名为xshell的软件，它用来连接我们的VPS。<br>　　附下载地址：<span class=\"external-link\"><a href=\"http://www.downxia.com/downinfo/150560.html?fromm\" target=\"_blank\" rel=\"noopener\">http://www.downxia.com/downinfo/150560.html?fromm</a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　　下载后安装，安装时选择“家庭/学校 ”版，商业版要钱，家庭版其实就能满足我们的需求了。</p>\n<p>　　安装成功后，依次点击点击”文件”-&gt;”新建”。名称随意，协议选择SSH，主机名填你的VBS公网IP，端口号填22，添完后点击连接；</p>\n<p>　　等一会弹出一个输入用户名的窗口，输入你部署服务器时设置的用户名，输入完成后点击记住用户名，点击确定。在弹出的新窗口中输入你部署服务器时设置的密码，输入完成后点击确定，不出意外，你将会连接到你的VBS,如下图：</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>接下来在Xshell中输入sudo apt-get install dns2tcp，敲回车，这条命令用来安装dns2tcp这个软件，很快就会安装完毕。</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>【注】没用过Linux的用户可能看不懂这些Linux命令，但是不懂没关系，跟着我做就行了。</p>\n<h4 id=\"配置dns2tcp：\"><span class=\"heading-link\">配置dns2tcp：</span></h4><p>再次敲入命令：<code>sudo vim /etc/dns2tcpd.conf</code> ，用vim编辑器将其中的内容替换为以下内容：</p>\n<blockquote>\n<p>listen = 10.0.0.4     #这里写你的云服务器的内网IP<br>port = 53<br>user = nobody<br>chroot = /tmp<br>domain = dns.aliyun.top         #这里写你设置的NS记录值<br>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128</p>\n</blockquote>\n<p>下面创建后台进程，运行dns2tcp，依次键入并执行如下命令：<br><code>screen -S dns2tcpd</code>　　　　　　　　　  #创建后台会话<br><code>dns2tcpd -f /etc/dns2tcpd.conf -F -d 2</code>　  #启动dns2tcp</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>当出现上图显示的内容时，说明dns2tcp启动成功了，此时按下Ctrl + a+d键，让dns2tcp进程后台执行，再关闭与服务器的连接就行了</p>\n<h4 id=\"windows客户端配置：\"><span class=\"heading-link\">windows客户端配置：</span></h4><p>打开CMD，键入并执行如下命令 ：<br><code>dns2tcpc -r ssh -z dns.aliyun.top 140.205.32.13  -l 8888 -d 2</code></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>当出现上图显示的内容时，代表会话已经建立了，此时最小化这个窗口，<strong>记住千万不要关闭它！！！</strong></p>\n<blockquote>\n<p>-r 后接服务名称&lt;ssh/socks/http中的任意一个&gt;<br>-z 后接你设置的NS记录,和你的VPS公网ip<br>-l 后接本地端口，随便一个常用端口就行<br>-d 开启 Debug</p>\n</blockquote>\n<p>现在假设你完全按照我给出的流程走的，离成功只有一步之遥了，下面用Xshell转换Socks4/5通用代理：<br>　　在xshell中仿照上面新建会话：IP地址为127.0.0.1，端口为8888 ；然后点击隧道，类型选择socks4/5，端口填1080，输入完成后点击确定，若不出意外，此时CMD中会出现大量信息，这些信息代表通过dns2tcp的数据包，这就表明你的电脑已经在和服务器传输数据了。而xshell中又会提示你登录到你的服务器，仿照上文输入用户名和密码（最好选择记住用户名和密码，这样下次就不用那么麻烦了），点击确定并成功登录到你的服务器后，最小化xshell，<strong>记住，此时千万不要关闭xshell！！！</strong></p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p>　打开Internet选项，依次选择”连接”-&gt;”局域网设置”-&gt;”为LAN使用代理服务器”-&gt;”高级”</p>\n<p>　在socks/套接字输入框中，要使用的代理服务器地址填127.0.0.1，端口填1080，然后点击确定。</p>\n<p><span class=\"external-link\"><a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" alt></a><i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>到此，大功告成，打开你的浏览器试试吧！！！</strong></p>\n<h3 id=\"附录\"><span class=\"heading-link\">附录</span></h3><h4 id=\"screen命令的使用：\"><span class=\"heading-link\">screen命令的使用：</span></h4><p><em>screen命令用来创建后台进程，进程运行时，便于我们能继续做其它工作。</em></p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建screen会话</td>\n<td>screen -S dns2tcpd</td>\n</tr>\n<tr>\n<td>启动dns2tcp</td>\n<td>sudo dns2tcpd -f /etc/dns2tcpd.conf -F -d 2</td>\n</tr>\n<tr>\n<td>暂时离开快捷键</td>\n<td>Ctrl + a + d</td>\n</tr>\n<tr>\n<td>恢复screen会话</td>\n<td>screen -r dns2tcpd</td>\n</tr>\n<tr>\n<td>列出当前的会话列表</td>\n<td>screen -ls</td>\n</tr>\n<tr>\n<td>强行终止dns2tcp进程</td>\n<td>screen -S dns2tcpd -X quit</td>\n</tr>\n</tbody></table></div>\n<h4 id=\"常见DNS记录的含义：\"><span class=\"heading-link\">常见DNS记录的含义：</span></h4><div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>记录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A记录</td>\n<td>用来指定主机名或域名对应的IP地址记录，通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。</td>\n</tr>\n<tr>\n<td>NS记录</td>\n<td>域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析,简单的说，NS记录是指定由哪个DNS服务器解析你的域名。</td>\n</tr>\n<tr>\n<td>MX记录</td>\n<td>邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</td>\n</tr>\n<tr>\n<td>CNAME记录</td>\n<td>别名记录，允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。</td>\n</tr>\n</tbody></table></div>\n"},{"title":"名言摘抄","reward":true,"date":"2019-12-10T13:25:38.000Z","_content":"\n\n　　你知道他们不是坏人，他们只是没受过教育，不谙世故，没出过远门，不道德，不文明，外加愚蠢。– – 蒂姆 ･高特罗","source":"_posts/名言摘抄.md","raw":"---\ntitle: 名言摘抄\nreward: true\ndate: 2019-12-10 21:25:38\ntags: 思考\npermalink: 7\ncategories: 一个人\n---\n\n\n　　你知道他们不是坏人，他们只是没受过教育，不谙世故，没出过远门，不道德，不文明，外加愚蠢。– – 蒂姆 ･高特罗","slug":"7","published":1,"updated":"2019-12-10T13:33:49.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tx000fa7fwgd3h8s07","content":"<p>　　你知道他们不是坏人，他们只是没受过教育，不谙世故，没出过远门，不道德，不文明，外加愚蠢。– – 蒂姆 ･高特罗</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　你知道他们不是坏人，他们只是没受过教育，不谙世故，没出过远门，不道德，不文明，外加愚蠢。– – 蒂姆 ･高特罗</p>\n"},{"title":"那年夏夜","reward":true,"date":"2019-12-10T13:27:49.000Z","_content":"\n　　我想写些东西已经很久了，以前不会写，不知该从何处下笔。不知道现在会不会写，但凡事都可以去试一试，于是我写下了这篇文章。\n\n　　十多年前，在我上小学的时候，那时的我还有一双明亮的眼睛，能清楚的看见天上数不清的星星。现在呢，患了近视的我再也无法看清那些星星了，也许真的是身体上的原因，又或许是有什么不干净的东西模糊了我的眼睛。\n\n　　那时的夏夜很是凉爽，每到傍晚时分，父亲便搬出桌子，摆在院子中央，我们一家人就在院子里吃晚饭。奶奶总是熬一锅西红柿粥给全家人喝，说实话我真的很爱喝，只不过再也喝不到了。我似乎记不起吃过完后家人们都去做什么了，除了我的爷爷。爷爷有两个老物件，一个是他的三轮车，那是一辆很破旧的三轮车，也是我第一个会驾驶的“交通工具”，爷爷每天用它来拉一些用来喂羊的树枝、青草。这另一个物件，就是爷爷非常喜爱的躺椅，每当吃过晚饭后，爷爷便躺在上面乘凉。老人家睡觉比较早，晚上八点钟左右爷爷便去屋子里睡觉了，可是我一个小孩子在八点钟是绝对不会睡觉的，但也没什么可供玩耍的，于是我便相中了爷爷的躺椅。\n\n　　爷爷去屋子里睡觉后，我便霸占了他的躺椅。躺在上面，放眼望去，映入眼帘的是一个璀璨的星空。离我最近的星星如镰刀一般，最亮也最引人注目，听说有一个漂亮的姐姐住在上面，那时的我已经知道了它叫月亮。离着月亮不远处有一颗非常亮的星星，除了月亮外它便是最耀眼的，那时我还不知它叫什么名字，后来有人告诉我它叫启明星，是指引人们前进的星星。 这些星星交织在一起，有的亮一些，有的暗一些，有的一直在闪烁，有的从来都不会闪烁，美丽极了。\n\n　　那时的夏夜很安静，除了能听到几只蛐蛐的叫声外，再也听不到其他声音了。小时候的我很喜欢那样安静的氛围，我在躺椅上躺一两个小时都不会觉的枯燥，我很想睡在上面，只不过母亲总是会把我赶到屋子中睡觉。\n\n　　这么多年过去了，一年四季中依旧不会少了夏季，白昼过后还是会迎来黑夜。只是，我再也没有机会去享受一个那样纯净的夏夜了。爷爷在我上初一时离开了我们，奶奶也终将离我们而去，姐姐即将出嫁，父亲与母亲苍老了许多。曾经的一家人永远的留在了那个夜晚。\n\n　　童年的记忆已经忘却的差不多了，以后我只会记得曾经有过一个个美好的夏夜，关于那些夏夜里发生了什么，就再也记不得了。也许生命本该是如此，美好的永远只属于过去，现在，包括将来，不会再遇到这样的美好。只能在心底里默默的发出一丝感伤：我曾经拥有过一份美好，无奈世间多沧桑，它总归要离我而去。\n\n　　那个夏夜，承载了我太多的回忆，如今这份回忆已经被我亲手埋葬，过去的我也永远的睡在了那张躺椅上。","source":"_posts/那年夏夜.md","raw":"---\ntitle: 那年夏夜\nreward: true\ndate: 2019-12-10 21:27:49\ntags: 生活\npermalink: 6\ncategories: 那年夏夜\n---\n\n　　我想写些东西已经很久了，以前不会写，不知该从何处下笔。不知道现在会不会写，但凡事都可以去试一试，于是我写下了这篇文章。\n\n　　十多年前，在我上小学的时候，那时的我还有一双明亮的眼睛，能清楚的看见天上数不清的星星。现在呢，患了近视的我再也无法看清那些星星了，也许真的是身体上的原因，又或许是有什么不干净的东西模糊了我的眼睛。\n\n　　那时的夏夜很是凉爽，每到傍晚时分，父亲便搬出桌子，摆在院子中央，我们一家人就在院子里吃晚饭。奶奶总是熬一锅西红柿粥给全家人喝，说实话我真的很爱喝，只不过再也喝不到了。我似乎记不起吃过完后家人们都去做什么了，除了我的爷爷。爷爷有两个老物件，一个是他的三轮车，那是一辆很破旧的三轮车，也是我第一个会驾驶的“交通工具”，爷爷每天用它来拉一些用来喂羊的树枝、青草。这另一个物件，就是爷爷非常喜爱的躺椅，每当吃过晚饭后，爷爷便躺在上面乘凉。老人家睡觉比较早，晚上八点钟左右爷爷便去屋子里睡觉了，可是我一个小孩子在八点钟是绝对不会睡觉的，但也没什么可供玩耍的，于是我便相中了爷爷的躺椅。\n\n　　爷爷去屋子里睡觉后，我便霸占了他的躺椅。躺在上面，放眼望去，映入眼帘的是一个璀璨的星空。离我最近的星星如镰刀一般，最亮也最引人注目，听说有一个漂亮的姐姐住在上面，那时的我已经知道了它叫月亮。离着月亮不远处有一颗非常亮的星星，除了月亮外它便是最耀眼的，那时我还不知它叫什么名字，后来有人告诉我它叫启明星，是指引人们前进的星星。 这些星星交织在一起，有的亮一些，有的暗一些，有的一直在闪烁，有的从来都不会闪烁，美丽极了。\n\n　　那时的夏夜很安静，除了能听到几只蛐蛐的叫声外，再也听不到其他声音了。小时候的我很喜欢那样安静的氛围，我在躺椅上躺一两个小时都不会觉的枯燥，我很想睡在上面，只不过母亲总是会把我赶到屋子中睡觉。\n\n　　这么多年过去了，一年四季中依旧不会少了夏季，白昼过后还是会迎来黑夜。只是，我再也没有机会去享受一个那样纯净的夏夜了。爷爷在我上初一时离开了我们，奶奶也终将离我们而去，姐姐即将出嫁，父亲与母亲苍老了许多。曾经的一家人永远的留在了那个夜晚。\n\n　　童年的记忆已经忘却的差不多了，以后我只会记得曾经有过一个个美好的夏夜，关于那些夏夜里发生了什么，就再也记不得了。也许生命本该是如此，美好的永远只属于过去，现在，包括将来，不会再遇到这样的美好。只能在心底里默默的发出一丝感伤：我曾经拥有过一份美好，无奈世间多沧桑，它总归要离我而去。\n\n　　那个夏夜，承载了我太多的回忆，如今这份回忆已经被我亲手埋葬，过去的我也永远的睡在了那张躺椅上。","slug":"6","published":1,"updated":"2019-12-10T13:33:39.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300tz000ha7fwa77mhyi1","content":"<p>　　我想写些东西已经很久了，以前不会写，不知该从何处下笔。不知道现在会不会写，但凡事都可以去试一试，于是我写下了这篇文章。</p>\n<p>　　十多年前，在我上小学的时候，那时的我还有一双明亮的眼睛，能清楚的看见天上数不清的星星。现在呢，患了近视的我再也无法看清那些星星了，也许真的是身体上的原因，又或许是有什么不干净的东西模糊了我的眼睛。</p>\n<p>　　那时的夏夜很是凉爽，每到傍晚时分，父亲便搬出桌子，摆在院子中央，我们一家人就在院子里吃晚饭。奶奶总是熬一锅西红柿粥给全家人喝，说实话我真的很爱喝，只不过再也喝不到了。我似乎记不起吃过完后家人们都去做什么了，除了我的爷爷。爷爷有两个老物件，一个是他的三轮车，那是一辆很破旧的三轮车，也是我第一个会驾驶的“交通工具”，爷爷每天用它来拉一些用来喂羊的树枝、青草。这另一个物件，就是爷爷非常喜爱的躺椅，每当吃过晚饭后，爷爷便躺在上面乘凉。老人家睡觉比较早，晚上八点钟左右爷爷便去屋子里睡觉了，可是我一个小孩子在八点钟是绝对不会睡觉的，但也没什么可供玩耍的，于是我便相中了爷爷的躺椅。</p>\n<p>　　爷爷去屋子里睡觉后，我便霸占了他的躺椅。躺在上面，放眼望去，映入眼帘的是一个璀璨的星空。离我最近的星星如镰刀一般，最亮也最引人注目，听说有一个漂亮的姐姐住在上面，那时的我已经知道了它叫月亮。离着月亮不远处有一颗非常亮的星星，除了月亮外它便是最耀眼的，那时我还不知它叫什么名字，后来有人告诉我它叫启明星，是指引人们前进的星星。 这些星星交织在一起，有的亮一些，有的暗一些，有的一直在闪烁，有的从来都不会闪烁，美丽极了。</p>\n<p>　　那时的夏夜很安静，除了能听到几只蛐蛐的叫声外，再也听不到其他声音了。小时候的我很喜欢那样安静的氛围，我在躺椅上躺一两个小时都不会觉的枯燥，我很想睡在上面，只不过母亲总是会把我赶到屋子中睡觉。</p>\n<p>　　这么多年过去了，一年四季中依旧不会少了夏季，白昼过后还是会迎来黑夜。只是，我再也没有机会去享受一个那样纯净的夏夜了。爷爷在我上初一时离开了我们，奶奶也终将离我们而去，姐姐即将出嫁，父亲与母亲苍老了许多。曾经的一家人永远的留在了那个夜晚。</p>\n<p>　　童年的记忆已经忘却的差不多了，以后我只会记得曾经有过一个个美好的夏夜，关于那些夏夜里发生了什么，就再也记不得了。也许生命本该是如此，美好的永远只属于过去，现在，包括将来，不会再遇到这样的美好。只能在心底里默默的发出一丝感伤：我曾经拥有过一份美好，无奈世间多沧桑，它总归要离我而去。</p>\n<p>　　那个夏夜，承载了我太多的回忆，如今这份回忆已经被我亲手埋葬，过去的我也永远的睡在了那张躺椅上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　我想写些东西已经很久了，以前不会写，不知该从何处下笔。不知道现在会不会写，但凡事都可以去试一试，于是我写下了这篇文章。</p>\n<p>　　十多年前，在我上小学的时候，那时的我还有一双明亮的眼睛，能清楚的看见天上数不清的星星。现在呢，患了近视的我再也无法看清那些星星了，也许真的是身体上的原因，又或许是有什么不干净的东西模糊了我的眼睛。</p>\n<p>　　那时的夏夜很是凉爽，每到傍晚时分，父亲便搬出桌子，摆在院子中央，我们一家人就在院子里吃晚饭。奶奶总是熬一锅西红柿粥给全家人喝，说实话我真的很爱喝，只不过再也喝不到了。我似乎记不起吃过完后家人们都去做什么了，除了我的爷爷。爷爷有两个老物件，一个是他的三轮车，那是一辆很破旧的三轮车，也是我第一个会驾驶的“交通工具”，爷爷每天用它来拉一些用来喂羊的树枝、青草。这另一个物件，就是爷爷非常喜爱的躺椅，每当吃过晚饭后，爷爷便躺在上面乘凉。老人家睡觉比较早，晚上八点钟左右爷爷便去屋子里睡觉了，可是我一个小孩子在八点钟是绝对不会睡觉的，但也没什么可供玩耍的，于是我便相中了爷爷的躺椅。</p>\n<p>　　爷爷去屋子里睡觉后，我便霸占了他的躺椅。躺在上面，放眼望去，映入眼帘的是一个璀璨的星空。离我最近的星星如镰刀一般，最亮也最引人注目，听说有一个漂亮的姐姐住在上面，那时的我已经知道了它叫月亮。离着月亮不远处有一颗非常亮的星星，除了月亮外它便是最耀眼的，那时我还不知它叫什么名字，后来有人告诉我它叫启明星，是指引人们前进的星星。 这些星星交织在一起，有的亮一些，有的暗一些，有的一直在闪烁，有的从来都不会闪烁，美丽极了。</p>\n<p>　　那时的夏夜很安静，除了能听到几只蛐蛐的叫声外，再也听不到其他声音了。小时候的我很喜欢那样安静的氛围，我在躺椅上躺一两个小时都不会觉的枯燥，我很想睡在上面，只不过母亲总是会把我赶到屋子中睡觉。</p>\n<p>　　这么多年过去了，一年四季中依旧不会少了夏季，白昼过后还是会迎来黑夜。只是，我再也没有机会去享受一个那样纯净的夏夜了。爷爷在我上初一时离开了我们，奶奶也终将离我们而去，姐姐即将出嫁，父亲与母亲苍老了许多。曾经的一家人永远的留在了那个夜晚。</p>\n<p>　　童年的记忆已经忘却的差不多了，以后我只会记得曾经有过一个个美好的夏夜，关于那些夏夜里发生了什么，就再也记不得了。也许生命本该是如此，美好的永远只属于过去，现在，包括将来，不会再遇到这样的美好。只能在心底里默默的发出一丝感伤：我曾经拥有过一份美好，无奈世间多沧桑，它总归要离我而去。</p>\n<p>　　那个夏夜，承载了我太多的回忆，如今这份回忆已经被我亲手埋葬，过去的我也永远的睡在了那张躺椅上。</p>\n"},{"title":"解决Debina系统自动更新软件包的问题","date":"2019-12-02T15:09:23.000Z","reward":true,"_content":"\n　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。\n\n　　首先我利用一款名为`nethogs`的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。\n\nAPT关于自动更新的配置文件位于\"/etc/apt/apt.conf.d/20auto-upgrades\", 将其中的\n```shell\nAPT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n```\n更改为\n```shell\nAPT::Periodic::Update-Package-Lists \"0\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n```\n其中\n- APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。\n- APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。\n  \n　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 `packagekit` 的父进程，我查了一下 `packagekit` 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。\n\n　　我的系统默认在开机时启动packgekit服务，查看 `packagekit` 的启动单元: \n`cat /lib/systemd/system/packagekit.service`\n```shell\n[Unit]\nDescription=PackageKit Daemon\n# PK does not know how to do anything on ostree-managed systems;\n# currently the design is to have dedicated daemons like\n# eos-updater and rpm-ostree, and gnome-software talks to those.\nConditionPathExists=!/run/ostree-booted\n\n[Service]\nType=dbus\nBusName=org.freedesktop.PackageKit\nUser=root\nExecStart=/usr/lib/packagekit/packagekitd\n```\n*系统每次开机时都会启动这个单元，执行 `/usr/lib/packagekit/packagekitd` 命令，而 `packagekit` 又将在运行期间调起APT下载需要更新的软件包。*\n\n　　知道了这些问题自然也就解决了，禁用此服务: `systemctl disable packagekit.service`.\n　　或者干脆删除 `/lib/systemd/system/` 目录下的 `packagekit.service` (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)\n\n　　在那之后，系统便再也没有执行过自动更新了。\n　　\n[附]\n>[nethohs](https://github.com/raboof/nethogs)是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。\n\n在 Debian/Ubuntu 下，使用`apt-get install nethogs` 安装它。\n或编译安装:\n```shell\nwget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz\ntar xf v0.8.5.tar.gz \ncd ./nethogs-0.8.5/\nmake && make install\n```\n如果编译失败需要安装依赖库\n```\napt-get install libncurses5-dev libpcap-dev\n```\n\n使用\n\n```shell\nroot@zsimline$ nethogs\nNetHogs version 0.8.5-2+b1\nPID  USER    PROGRAM                   DEV  SENT      RECEIVED  \n2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec\n1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec\n?    root   unknown TCP                     0.000   0.000 KB/sec\n\n  TOTAL                                     0.480       0.917 KB/se\n```\n\n指定网卡\n```shell\nroot@zsimline$ nethogs wlan0 # 监听wlan0\nroot@zsimline$ nethogs -a    # 监听所有网卡\n```\n\n指定刷新频率 -d seconds (默认为1)\n```shell\nroot@zsimline$ nethogs -d 2\n```\n\n指定刷新次数 -c number (默认不限)\n```shell\nroot@zsimline$ nethogs -c 10\n```\n\n交互模式\n在进入 nethogs 之后，可以使用如下的交互命令:\n```shell\nq: 退出\ns: 按照发送流量排序\nr: 按照流量排序\nm: 修改网速单位 (KB, B, MB) and KB/s\n```","source":"_posts/解决Debina系统自动更新软件包的问题.md","raw":"---\ntitle: 解决Debina系统自动更新软件包的问题\ndate: 2019-12-02 23:09:23\npermalink: 2\ncategories: Linux\ntags: Linux\nreward: true\n---\n\n　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。\n\n　　首先我利用一款名为`nethogs`的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。\n\nAPT关于自动更新的配置文件位于\"/etc/apt/apt.conf.d/20auto-upgrades\", 将其中的\n```shell\nAPT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n```\n更改为\n```shell\nAPT::Periodic::Update-Package-Lists \"0\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n```\n其中\n- APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。\n- APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。\n  \n　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 `packagekit` 的父进程，我查了一下 `packagekit` 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。\n\n　　我的系统默认在开机时启动packgekit服务，查看 `packagekit` 的启动单元: \n`cat /lib/systemd/system/packagekit.service`\n```shell\n[Unit]\nDescription=PackageKit Daemon\n# PK does not know how to do anything on ostree-managed systems;\n# currently the design is to have dedicated daemons like\n# eos-updater and rpm-ostree, and gnome-software talks to those.\nConditionPathExists=!/run/ostree-booted\n\n[Service]\nType=dbus\nBusName=org.freedesktop.PackageKit\nUser=root\nExecStart=/usr/lib/packagekit/packagekitd\n```\n*系统每次开机时都会启动这个单元，执行 `/usr/lib/packagekit/packagekitd` 命令，而 `packagekit` 又将在运行期间调起APT下载需要更新的软件包。*\n\n　　知道了这些问题自然也就解决了，禁用此服务: `systemctl disable packagekit.service`.\n　　或者干脆删除 `/lib/systemd/system/` 目录下的 `packagekit.service` (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)\n\n　　在那之后，系统便再也没有执行过自动更新了。\n　　\n[附]\n>[nethohs](https://github.com/raboof/nethogs)是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。\n\n在 Debian/Ubuntu 下，使用`apt-get install nethogs` 安装它。\n或编译安装:\n```shell\nwget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz\ntar xf v0.8.5.tar.gz \ncd ./nethogs-0.8.5/\nmake && make install\n```\n如果编译失败需要安装依赖库\n```\napt-get install libncurses5-dev libpcap-dev\n```\n\n使用\n\n```shell\nroot@zsimline$ nethogs\nNetHogs version 0.8.5-2+b1\nPID  USER    PROGRAM                   DEV  SENT      RECEIVED  \n2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec\n1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec\n?    root   unknown TCP                     0.000   0.000 KB/sec\n\n  TOTAL                                     0.480       0.917 KB/se\n```\n\n指定网卡\n```shell\nroot@zsimline$ nethogs wlan0 # 监听wlan0\nroot@zsimline$ nethogs -a    # 监听所有网卡\n```\n\n指定刷新频率 -d seconds (默认为1)\n```shell\nroot@zsimline$ nethogs -d 2\n```\n\n指定刷新次数 -c number (默认不限)\n```shell\nroot@zsimline$ nethogs -c 10\n```\n\n交互模式\n在进入 nethogs 之后，可以使用如下的交互命令:\n```shell\nq: 退出\ns: 按照发送流量排序\nr: 按照流量排序\nm: 修改网速单位 (KB, B, MB) and KB/s\n```","slug":"2","published":1,"updated":"2019-12-09T14:51:46.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck41300u1000la7fw6ctg2z6u","content":"<p>　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。</p>\n<p>　　首先我利用一款名为<code>nethogs</code>的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。</p>\n<p>APT关于自动更新的配置文件位于”/etc/apt/apt.conf.d/20auto-upgrades”, 将其中的</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"1\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"1\";</span><br></pre></td></tr></table></div></figure>\n<p>更改为</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"0\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"0\";</span><br></pre></td></tr></table></div></figure>\n<p>其中</p>\n<ul>\n<li>APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。</li>\n<li>APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。</li>\n</ul>\n<p>　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 <code>packagekit</code> 的父进程，我查了一下 <code>packagekit</code> 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。</p>\n<p>　　我的系统默认在开机时启动packgekit服务，查看 <code>packagekit</code> 的启动单元:<br><code>cat /lib/systemd/system/packagekit.service</code></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=PackageKit Daemon</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> PK does not know how to <span class=\"keyword\">do</span> anything on ostree-managed systems;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> currently the design is to have dedicated daemons like</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> eos-updater and rpm-ostree, and gnome-software talks to those.</span></span><br><span class=\"line\">ConditionPathExists=!/run/ostree-booted</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=dbus</span><br><span class=\"line\">BusName=org.freedesktop.PackageKit</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/lib/packagekit/packagekitd</span><br></pre></td></tr></table></div></figure>\n<p><em>系统每次开机时都会启动这个单元，执行 <code>/usr/lib/packagekit/packagekitd</code> 命令，而 <code>packagekit</code> 又将在运行期间调起APT下载需要更新的软件包。</em></p>\n<p>　　知道了这些问题自然也就解决了，禁用此服务: <code>systemctl disable packagekit.service</code>.<br>　　或者干脆删除 <code>/lib/systemd/system/</code> 目录下的 <code>packagekit.service</code> (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)</p>\n<p>　　在那之后，系统便再也没有执行过自动更新了。<br>　　<br>[附]</p>\n<blockquote>\n<p><span class=\"external-link\"><a href=\"https://github.com/raboof/nethogs\" target=\"_blank\" rel=\"noopener\">nethohs</a><i class=\"fa fa-external-link\"></i></span>是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。</p>\n</blockquote>\n<p>在 Debian/Ubuntu 下，使用<code>apt-get install nethogs</code> 安装它。<br>或编译安装:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz</span><br><span class=\"line\">tar xf v0.8.5.tar.gz </span><br><span class=\"line\">cd ./nethogs-0.8.5/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></div></figure>\n<p>如果编译失败需要安装依赖库</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libncurses5-dev libpcap-dev</span><br></pre></td></tr></table></div></figure>\n\n<p>使用</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs</span></span><br><span class=\"line\">NetHogs version 0.8.5-2+b1</span><br><span class=\"line\">PID  USER    PROGRAM                   DEV  SENT      RECEIVED  </span><br><span class=\"line\">2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec</span><br><span class=\"line\">1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec</span><br><span class=\"line\">?    root   unknown TCP                     0.000   0.000 KB/sec</span><br><span class=\"line\"></span><br><span class=\"line\">  TOTAL                                     0.480       0.917 KB/se</span><br></pre></td></tr></table></div></figure>\n\n<p>指定网卡</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs wlan0 <span class=\"comment\"># 监听wlan0</span></span></span><br><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -a    <span class=\"comment\"># 监听所有网卡</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新频率 -d seconds (默认为1)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -d 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新次数 -c number (默认不限)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -c 10</span></span><br></pre></td></tr></table></div></figure>\n\n<p>交互模式<br>在进入 nethogs 之后，可以使用如下的交互命令:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q: 退出</span><br><span class=\"line\">s: 按照发送流量排序</span><br><span class=\"line\">r: 按照流量排序</span><br><span class=\"line\">m: 修改网速单位 (KB, B, MB) and KB/s</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。</p>\n<p>　　首先我利用一款名为<code>nethogs</code>的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。</p>\n<p>APT关于自动更新的配置文件位于”/etc/apt/apt.conf.d/20auto-upgrades”, 将其中的</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"1\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"1\";</span><br></pre></td></tr></table></div></figure>\n<p>更改为</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APT::Periodic::Update-Package-Lists \"0\";</span><br><span class=\"line\">APT::Periodic::Unattended-Upgrade \"0\";</span><br></pre></td></tr></table></div></figure>\n<p>其中</p>\n<ul>\n<li>APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。</li>\n<li>APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。</li>\n</ul>\n<p>　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 <code>packagekit</code> 的父进程，我查了一下 <code>packagekit</code> 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。</p>\n<p>　　我的系统默认在开机时启动packgekit服务，查看 <code>packagekit</code> 的启动单元:<br><code>cat /lib/systemd/system/packagekit.service</code></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=PackageKit Daemon</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> PK does not know how to <span class=\"keyword\">do</span> anything on ostree-managed systems;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> currently the design is to have dedicated daemons like</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> eos-updater and rpm-ostree, and gnome-software talks to those.</span></span><br><span class=\"line\">ConditionPathExists=!/run/ostree-booted</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=dbus</span><br><span class=\"line\">BusName=org.freedesktop.PackageKit</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/lib/packagekit/packagekitd</span><br></pre></td></tr></table></div></figure>\n<p><em>系统每次开机时都会启动这个单元，执行 <code>/usr/lib/packagekit/packagekitd</code> 命令，而 <code>packagekit</code> 又将在运行期间调起APT下载需要更新的软件包。</em></p>\n<p>　　知道了这些问题自然也就解决了，禁用此服务: <code>systemctl disable packagekit.service</code>.<br>　　或者干脆删除 <code>/lib/systemd/system/</code> 目录下的 <code>packagekit.service</code> (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)</p>\n<p>　　在那之后，系统便再也没有执行过自动更新了。<br>　　<br>[附]</p>\n<blockquote>\n<p><span class=\"external-link\"><a href=\"https://github.com/raboof/nethogs\" target=\"_blank\" rel=\"noopener\">nethohs</a><i class=\"fa fa-external-link\"></i></span>是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。</p>\n</blockquote>\n<p>在 Debian/Ubuntu 下，使用<code>apt-get install nethogs</code> 安装它。<br>或编译安装:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz</span><br><span class=\"line\">tar xf v0.8.5.tar.gz </span><br><span class=\"line\">cd ./nethogs-0.8.5/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></div></figure>\n<p>如果编译失败需要安装依赖库</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libncurses5-dev libpcap-dev</span><br></pre></td></tr></table></div></figure>\n\n<p>使用</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs</span></span><br><span class=\"line\">NetHogs version 0.8.5-2+b1</span><br><span class=\"line\">PID  USER    PROGRAM                   DEV  SENT      RECEIVED  </span><br><span class=\"line\">2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec</span><br><span class=\"line\">1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec</span><br><span class=\"line\">?    root   unknown TCP                     0.000   0.000 KB/sec</span><br><span class=\"line\"></span><br><span class=\"line\">  TOTAL                                     0.480       0.917 KB/se</span><br></pre></td></tr></table></div></figure>\n\n<p>指定网卡</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs wlan0 <span class=\"comment\"># 监听wlan0</span></span></span><br><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -a    <span class=\"comment\"># 监听所有网卡</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新频率 -d seconds (默认为1)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -d 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>指定刷新次数 -c number (默认不限)</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">root@zsimline$</span><span class=\"bash\"> nethogs -c 10</span></span><br></pre></td></tr></table></div></figure>\n\n<p>交互模式<br>在进入 nethogs 之后，可以使用如下的交互命令:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q: 退出</span><br><span class=\"line\">s: 按照发送流量排序</span><br><span class=\"line\">r: 按照流量排序</span><br><span class=\"line\">m: 修改网速单位 (KB, B, MB) and KB/s</span><br></pre></td></tr></table></div></figure>"},{"title":"高度自适应的输入框","reward":true,"date":"2019-12-10T14:15:19.000Z","_content":"\n　　有时候我们需要一个高度能随内容自动增加的输入框，`input` 显然不行，因为 `input` 里的文字是不换行的。文本域 `textarea` 里的文字倒是换行的，可一旦文字内容超过其高度，`textarea` 就会增加一个烦人的滚动条，这是很影响视觉的，就如同下面：\n```html\n<textarea cols=\"30\" rows=\"3\"></textarea>\n```\n\n<textarea cols=\"30\" rows=\"3\"></textarea>\n\n\n　　那么有没有办法制作一个高度能随文字内容自动增加的输入框呢？答案是肯定的，下面介绍两种方式。\n\n### 方式一\n\n　　这种方式依然使用 `textarea`, 主要思想是我们将 `textarea` 放入一个容器中，同时在这个容器中放入一个隐藏的 div (visibility: hidden), 监听 `textarea` 的输入事件并将其中的文字动态的同步到隐藏的div中，这样div 就可以撑开容器，这时设置 `textarea` 的高度为 100% 并将其定位到容器的左上角，那么 `textarea` 的高度自然就是其中文字内容的高度了。\n\n>`visibility` 是一个CSS属性，用来在不更改文档的布局的前提下显示或隐藏元素，它有三个可能的取值：\n>1. `visible` 元素正常显示(默认值)；\n>2. `hidden` 隐藏元素，但是其他元素的布局不改变，相当于此元素变成透明。\n> 　　若将其子元素设为 visibility: visible，则该子元素依然可见；\n>3. `collapse` 用于表格的行、列、列组和行组，隐藏表格的行或列，并且不占用任何空间。\n\n```html\n   <!-- demo-1.html -->\n\n   <div class=\"container\">\n      <div></div>\n      <textarea placeholder=\"输入消息...\"></textarea> \n   </div>\n   \n   <style>\n      .container {\n         width: 500px;\n         position: relative;\n      }\n      .container div {         \n         visibility: hidden;\n         /** 避免初始化时容器没有高度 */\n         padding: 8px 0px;\n      }\n      .container textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         /** 必须设置为 content-box !!! */ \n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      const textarea = document.querySelector('.container textarea');\n      const div = document.querySelector('.container div');\n      textarea.addEventListener('input', (e) => {\n         div.innerText = e.target.value;\n      });\n   </script>\n```\n<a name=\"demo-1\">尝试输入一些文字吧：</a>\n   <div class=\"container-0\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div>\n   \n   <style>\n      .container-0 {\n         width: 500px;\n         position: relative;\n      }\n      .container-0 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-0 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      (function() {\n         const textarea = document.querySelector('.container-0 textarea');\n         const div = document.querySelector('.container-0 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n\n　　你可能已经注意到了，当我们输入文字时，输入框的高度显然要比文字内容高许多，伴随着输入文字的增多。高度差会越来越大，这是因为隐藏 `div` 与 文本域 `textarea` 内字体的尺寸与行高是不同的， `div` 内的字体尺寸与行高要比 `textarea` 内的大，所以 `div` 撑开的容器高度自然要高于 `textarea` 内的文字内容高度。要解决这个问题，统一它们的字体尺寸与行高就可以了。(注：`div` 的字体尺寸与行高默认继承自父元素)\n\n```html\n   <!-- demo-1.html -->\n\n   <div class=\"container\">\n      <div></div>\n      <textarea placeholder=\"输入消息...\"></textarea> \n   </div>\n\n   <style>\n      .container {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container div {\n         visibility: hidden;\n         /** 避免初始化时容器没有高度 */\n         padding: 8px 0px;\n      }\n      .container textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         /** 必须设置为 content-box !!! */\n         box-sizing: content-box;\n         /** 设置字体尺寸与行高继承自父元素 */\n         font-size: inherit;\n         line-height: inherit;\n         /* 去掉右下角的调整大小的标志 */\n         resize: none;\n      }\n   </style>\n   <script>\n      const textarea = document.querySelector('.container textarea');\n      const div = document.querySelector('.container div');\n      textarea.addEventListener('input', (e) => {\n         div.innerText = e.target.value;\n      });\n   </script>\n```\n<a name=\"demo-2\">尝试输入一些文字吧：</a>\n   <div class=\"container-1\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div>\n\n   <style>\n      .container-1 {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container-1 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-1 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n         font-size: inherit;\n         line-height: inherit;\n         resize: none;\n      }\n   </style>\n   <script>\n      (function(){\n         const textarea = document.querySelector('.container-1 textarea');\n         const div = document.querySelector('.container-1 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n　　这样一来高度就一致了。这种方式虽然可以较好的实现高度自适应的输入框，但实现起来总感觉很粗糙，下面这种方式就明显简单多了。\n\n### 方式二\n\n　　像 `div`, `p`, `blockquote` 这样的元素默认是不可编辑的，但我们可以将其 `contenteditable` 属性设置为 `true`, 使其变为可编辑的。\n\n>`contenteditable`是一个全局属性，用于指示元素是否可被用户编辑，该属性必须采用以下值之一：\n>1. `true` 或者 '空字符串', 表示该元素是可编辑的；\n>2. `false`, 表示该元素是不可编辑的。\n>3. 如果未设置此属性，则其默认值将从其父元素继承。\n\n```html\n  <div class=\"container\" contenteditable=\"true\"></div>\n\n  <style>\n    .container {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n  </style>\n```\n<a name=\"demo-3\">尝试输入一些文字吧：</a>\n  <div class=\"container-2\" contenteditable=\"true\"></div>\n  <style>.container-2 {width: 500px;font-size: 14px;line-height: 16px;border: solid 1px #999}\n  </style>\n\n　　是不是很简单呢？ 我们也可以使用CSS伪类 [:empty](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty), [:focus](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus),  实现`placeholder` 那样的效果\n\n```html\n<style>\n.container {\n  width: 500px;\n  font-size: 14px;\n  line-height: 16px;\n  border: solid 1px #999;\n}\n.container:empty::before {\n  content: \"输入消息...\";\n  color: #999999;\n}\n.container:focus::before {\n  content: none;\n}\n</style>\n```\n<a name=\"demo-4\">尝试输入一些文字吧：</a>\n\n  <div class=\"container-3\" contenteditable=\"true\"></div>\n  <style>\n    .container-3 {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n    .container-3:empty::before {\n      content: \"输入消息...\";\n      color: #999999;\n    }\n    .container-3:focus::before {\n      content: none;\n    }\n  </style>\n\n\n　　如果你使用 Vue.js, 我们也可以它封装为一个Vue组件：\n\n```html\n<template>\n    <div\n      class=\"msg-input\"\n      contenteditable=\"true\"\n      @input=\"changeText\"\n    >{{ innerText }}</div>\n</template>\n\n<script>\nexport default{\n  name: \"MsgInput\",\n  props: ['value'],\n  \n  data: function() {\n    return {\n      innerText: this.value,\n    }\n  },\n  \n  methods: {\n    changeText() {\n      this.$emit('input', this.$el.innerText);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.msg-input {\n  width: 500px;\n  font-size: 14px;\n  line-height: 16px;\n  border: solid 1px #999;\n}\n.msg-input:empty::before {\n  content: \"输入消息...\";\n  color: #999999;\n}\n.msg-input:focus::before {\n  content: none;\n}\n</style>\n```\n\n接下来在父组件中引用这个组件：\n\n```html\n<template>\n  <div>\n    <MsgInput v-model=\"msg\"/>\n  </div>\n</template>\n\n<script>\nimport MsgInput from \"/MsgInput.vue\";\n\nexport default {\n  name: \"MsgToolkit\",\n  data: function() {\n    return {\n      msg: ''\n    }\n  },\n\n  components: {\n    MsgInput\n  },\n}\n</script>\n```\n\n　　父组件为子组件使用 `v-model` 指令，将子组件的 `value` 与 父组件的 `msg` 双向绑定在一起。当输入事件发生后，子组件调用changeText方法，触发一个 `input` 事件，父组件监听到此事件，将事件传递过来的数据同步到 `msg` 上，由于数据是双向绑定的，子组件的 `value` 值也会相应发生变化。更过原理请参考 [自定义组件的-v-model](https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model)\n\n*该篇博客内的代码已同步到[Github](https://github.com/zsimline/mxsyx-public/tree/master/code/archive-10)*\n\n参考资料：\n  [1]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable\n  [2]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility\n  [3]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\n  [4]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\n  [5]. Vue.js官方文档 https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\n","source":"_posts/自适应高度的输入框.md","raw":"---\ntitle: 高度自适应的输入框\nreward: true\ndate: 2019-12-10 22:15:19\npermalink: 10\ncategories: VueJS\ntags:\n---\n\n　　有时候我们需要一个高度能随内容自动增加的输入框，`input` 显然不行，因为 `input` 里的文字是不换行的。文本域 `textarea` 里的文字倒是换行的，可一旦文字内容超过其高度，`textarea` 就会增加一个烦人的滚动条，这是很影响视觉的，就如同下面：\n```html\n<textarea cols=\"30\" rows=\"3\"></textarea>\n```\n\n<textarea cols=\"30\" rows=\"3\"></textarea>\n\n\n　　那么有没有办法制作一个高度能随文字内容自动增加的输入框呢？答案是肯定的，下面介绍两种方式。\n\n### 方式一\n\n　　这种方式依然使用 `textarea`, 主要思想是我们将 `textarea` 放入一个容器中，同时在这个容器中放入一个隐藏的 div (visibility: hidden), 监听 `textarea` 的输入事件并将其中的文字动态的同步到隐藏的div中，这样div 就可以撑开容器，这时设置 `textarea` 的高度为 100% 并将其定位到容器的左上角，那么 `textarea` 的高度自然就是其中文字内容的高度了。\n\n>`visibility` 是一个CSS属性，用来在不更改文档的布局的前提下显示或隐藏元素，它有三个可能的取值：\n>1. `visible` 元素正常显示(默认值)；\n>2. `hidden` 隐藏元素，但是其他元素的布局不改变，相当于此元素变成透明。\n> 　　若将其子元素设为 visibility: visible，则该子元素依然可见；\n>3. `collapse` 用于表格的行、列、列组和行组，隐藏表格的行或列，并且不占用任何空间。\n\n```html\n   <!-- demo-1.html -->\n\n   <div class=\"container\">\n      <div></div>\n      <textarea placeholder=\"输入消息...\"></textarea> \n   </div>\n   \n   <style>\n      .container {\n         width: 500px;\n         position: relative;\n      }\n      .container div {         \n         visibility: hidden;\n         /** 避免初始化时容器没有高度 */\n         padding: 8px 0px;\n      }\n      .container textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         /** 必须设置为 content-box !!! */ \n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      const textarea = document.querySelector('.container textarea');\n      const div = document.querySelector('.container div');\n      textarea.addEventListener('input', (e) => {\n         div.innerText = e.target.value;\n      });\n   </script>\n```\n<a name=\"demo-1\">尝试输入一些文字吧：</a>\n   <div class=\"container-0\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div>\n   \n   <style>\n      .container-0 {\n         width: 500px;\n         position: relative;\n      }\n      .container-0 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-0 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      (function() {\n         const textarea = document.querySelector('.container-0 textarea');\n         const div = document.querySelector('.container-0 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n\n　　你可能已经注意到了，当我们输入文字时，输入框的高度显然要比文字内容高许多，伴随着输入文字的增多。高度差会越来越大，这是因为隐藏 `div` 与 文本域 `textarea` 内字体的尺寸与行高是不同的， `div` 内的字体尺寸与行高要比 `textarea` 内的大，所以 `div` 撑开的容器高度自然要高于 `textarea` 内的文字内容高度。要解决这个问题，统一它们的字体尺寸与行高就可以了。(注：`div` 的字体尺寸与行高默认继承自父元素)\n\n```html\n   <!-- demo-1.html -->\n\n   <div class=\"container\">\n      <div></div>\n      <textarea placeholder=\"输入消息...\"></textarea> \n   </div>\n\n   <style>\n      .container {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container div {\n         visibility: hidden;\n         /** 避免初始化时容器没有高度 */\n         padding: 8px 0px;\n      }\n      .container textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         /** 必须设置为 content-box !!! */\n         box-sizing: content-box;\n         /** 设置字体尺寸与行高继承自父元素 */\n         font-size: inherit;\n         line-height: inherit;\n         /* 去掉右下角的调整大小的标志 */\n         resize: none;\n      }\n   </style>\n   <script>\n      const textarea = document.querySelector('.container textarea');\n      const div = document.querySelector('.container div');\n      textarea.addEventListener('input', (e) => {\n         div.innerText = e.target.value;\n      });\n   </script>\n```\n<a name=\"demo-2\">尝试输入一些文字吧：</a>\n   <div class=\"container-1\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div>\n\n   <style>\n      .container-1 {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container-1 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-1 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n         font-size: inherit;\n         line-height: inherit;\n         resize: none;\n      }\n   </style>\n   <script>\n      (function(){\n         const textarea = document.querySelector('.container-1 textarea');\n         const div = document.querySelector('.container-1 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n　　这样一来高度就一致了。这种方式虽然可以较好的实现高度自适应的输入框，但实现起来总感觉很粗糙，下面这种方式就明显简单多了。\n\n### 方式二\n\n　　像 `div`, `p`, `blockquote` 这样的元素默认是不可编辑的，但我们可以将其 `contenteditable` 属性设置为 `true`, 使其变为可编辑的。\n\n>`contenteditable`是一个全局属性，用于指示元素是否可被用户编辑，该属性必须采用以下值之一：\n>1. `true` 或者 '空字符串', 表示该元素是可编辑的；\n>2. `false`, 表示该元素是不可编辑的。\n>3. 如果未设置此属性，则其默认值将从其父元素继承。\n\n```html\n  <div class=\"container\" contenteditable=\"true\"></div>\n\n  <style>\n    .container {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n  </style>\n```\n<a name=\"demo-3\">尝试输入一些文字吧：</a>\n  <div class=\"container-2\" contenteditable=\"true\"></div>\n  <style>.container-2 {width: 500px;font-size: 14px;line-height: 16px;border: solid 1px #999}\n  </style>\n\n　　是不是很简单呢？ 我们也可以使用CSS伪类 [:empty](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty), [:focus](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus),  实现`placeholder` 那样的效果\n\n```html\n<style>\n.container {\n  width: 500px;\n  font-size: 14px;\n  line-height: 16px;\n  border: solid 1px #999;\n}\n.container:empty::before {\n  content: \"输入消息...\";\n  color: #999999;\n}\n.container:focus::before {\n  content: none;\n}\n</style>\n```\n<a name=\"demo-4\">尝试输入一些文字吧：</a>\n\n  <div class=\"container-3\" contenteditable=\"true\"></div>\n  <style>\n    .container-3 {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n    .container-3:empty::before {\n      content: \"输入消息...\";\n      color: #999999;\n    }\n    .container-3:focus::before {\n      content: none;\n    }\n  </style>\n\n\n　　如果你使用 Vue.js, 我们也可以它封装为一个Vue组件：\n\n```html\n<template>\n    <div\n      class=\"msg-input\"\n      contenteditable=\"true\"\n      @input=\"changeText\"\n    >{{ innerText }}</div>\n</template>\n\n<script>\nexport default{\n  name: \"MsgInput\",\n  props: ['value'],\n  \n  data: function() {\n    return {\n      innerText: this.value,\n    }\n  },\n  \n  methods: {\n    changeText() {\n      this.$emit('input', this.$el.innerText);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.msg-input {\n  width: 500px;\n  font-size: 14px;\n  line-height: 16px;\n  border: solid 1px #999;\n}\n.msg-input:empty::before {\n  content: \"输入消息...\";\n  color: #999999;\n}\n.msg-input:focus::before {\n  content: none;\n}\n</style>\n```\n\n接下来在父组件中引用这个组件：\n\n```html\n<template>\n  <div>\n    <MsgInput v-model=\"msg\"/>\n  </div>\n</template>\n\n<script>\nimport MsgInput from \"/MsgInput.vue\";\n\nexport default {\n  name: \"MsgToolkit\",\n  data: function() {\n    return {\n      msg: ''\n    }\n  },\n\n  components: {\n    MsgInput\n  },\n}\n</script>\n```\n\n　　父组件为子组件使用 `v-model` 指令，将子组件的 `value` 与 父组件的 `msg` 双向绑定在一起。当输入事件发生后，子组件调用changeText方法，触发一个 `input` 事件，父组件监听到此事件，将事件传递过来的数据同步到 `msg` 上，由于数据是双向绑定的，子组件的 `value` 值也会相应发生变化。更过原理请参考 [自定义组件的-v-model](https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model)\n\n*该篇博客内的代码已同步到[Github](https://github.com/zsimline/mxsyx-public/tree/master/code/archive-10)*\n\n参考资料：\n  [1]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable\n  [2]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility\n  [3]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\n  [4]. MDN文档 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\n  [5]. Vue.js官方文档 https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\n","slug":"10","published":1,"updated":"2019-12-13T08:01:26.309Z","_id":"ck42tvrdf00004hfwegzhhz3l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　有时候我们需要一个高度能随内容自动增加的输入框，<code>input</code> 显然不行，因为 <code>input</code> 里的文字是不换行的。文本域 <code>textarea</code> 里的文字倒是换行的，可一旦文字内容超过其高度，<code>textarea</code> 就会增加一个烦人的滚动条，这是很影响视觉的，就如同下面：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><textarea cols=\"30\" rows=\"3\"></textarea></p>\n<p>　　那么有没有办法制作一个高度能随文字内容自动增加的输入框呢？答案是肯定的，下面介绍两种方式。</p>\n<h3 id=\"方式一\"><span class=\"heading-link\">方式一</span></h3><p>　　这种方式依然使用 <code>textarea</code>, 主要思想是我们将 <code>textarea</code> 放入一个容器中，同时在这个容器中放入一个隐藏的 div (visibility: hidden), 监听 <code>textarea</code> 的输入事件并将其中的文字动态的同步到隐藏的div中，这样div 就可以撑开容器，这时设置 <code>textarea</code> 的高度为 100% 并将其定位到容器的左上角，那么 <code>textarea</code> 的高度自然就是其中文字内容的高度了。</p>\n<blockquote>\n<p><code>visibility</code> 是一个CSS属性，用来在不更改文档的布局的前提下显示或隐藏元素，它有三个可能的取值：</p>\n<ol>\n<li><code>visible</code> 元素正常显示(默认值)；</li>\n<li><code>hidden</code> 隐藏元素，但是其他元素的布局不改变，相当于此元素变成透明。<br>　　若将其子元素设为 visibility: visible，则该子元素依然可见；</li>\n<li><code>collapse</code> 用于表格的行、列、列组和行组，隐藏表格的行或列，并且不占用任何空间。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入消息...\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      width: 500px;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;         </span></span><br><span class=\"line\">      visibility: hidden;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 避免初始化时容器没有高度 */</span></span></span><br><span class=\"line\">      padding: 8px 0px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">textarea</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0px;</span><br><span class=\"line\">      padding: 0px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 必须设置为 content-box !!! */</span> </span></span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container textarea'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container div'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">   textarea.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span></span><br><span class=\"line\">      div.innerText = e.target.value;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-1\">尝试输入一些文字吧：</a><br>   <div class=\"container-0\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div></p>\n   <style>\n      .container-0 {\n         width: 500px;\n         position: relative;\n      }\n      .container-0 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-0 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      (function() {\n         const textarea = document.querySelector('.container-0 textarea');\n         const div = document.querySelector('.container-0 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n\n<p>　　你可能已经注意到了，当我们输入文字时，输入框的高度显然要比文字内容高许多，伴随着输入文字的增多。高度差会越来越大，这是因为隐藏 <code>div</code> 与 文本域 <code>textarea</code> 内字体的尺寸与行高是不同的， <code>div</code> 内的字体尺寸与行高要比 <code>textarea</code> 内的大，所以 <code>div</code> 撑开的容器高度自然要高于 <code>textarea</code> 内的文字内容高度。要解决这个问题，统一它们的字体尺寸与行高就可以了。(注：<code>div</code> 的字体尺寸与行高默认继承自父元素)</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入消息...\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      width: 500px;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      font-size: 14px;</span><br><span class=\"line\">      line-height: 16px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">      visibility: hidden;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 避免初始化时容器没有高度 */</span></span></span><br><span class=\"line\">      padding: 8px 0px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">textarea</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0px;</span><br><span class=\"line\">      padding: 0px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 必须设置为 content-box !!! */</span></span></span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 设置字体尺寸与行高继承自父元素 */</span></span></span><br><span class=\"line\">      font-size: inherit;</span><br><span class=\"line\">      line-height: inherit;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* 去掉右下角的调整大小的标志 */</span></span></span><br><span class=\"line\">      resize: none;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container textarea'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container div'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">   textarea.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span></span><br><span class=\"line\">      div.innerText = e.target.value;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-2\">尝试输入一些文字吧：</a><br>   <div class=\"container-1\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div></p>\n   <style>\n      .container-1 {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container-1 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-1 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n         font-size: inherit;\n         line-height: inherit;\n         resize: none;\n      }\n   </style>\n   <script>\n      (function(){\n         const textarea = document.querySelector('.container-1 textarea');\n         const div = document.querySelector('.container-1 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n<p>　　这样一来高度就一致了。这种方式虽然可以较好的实现高度自适应的输入框，但实现起来总感觉很粗糙，下面这种方式就明显简单多了。</p>\n<h3 id=\"方式二\"><span class=\"heading-link\">方式二</span></h3><p>　　像 <code>div</code>, <code>p</code>, <code>blockquote</code> 这样的元素默认是不可编辑的，但我们可以将其 <code>contenteditable</code> 属性设置为 <code>true</code>, 使其变为可编辑的。</p>\n<blockquote>\n<p><code>contenteditable</code>是一个全局属性，用于指示元素是否可被用户编辑，该属性必须采用以下值之一：</p>\n<ol>\n<li><code>true</code> 或者 ‘空字符串’, 表示该元素是可编辑的；</li>\n<li><code>false</code>, 表示该元素是不可编辑的。</li>\n<li>如果未设置此属性，则其默认值将从其父元素继承。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">    width: 500px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-3\">尝试输入一些文字吧：</a><br>  <div class=\"container-2\" contenteditable=\"true\"></div><br>  <style>.container-2 {width: 500px;font-size: 14px;line-height: 16px;border: solid 1px #999}<br>  </style></p>\n<p>　　是不是很简单呢？ 我们也可以使用CSS伪类 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\" target=\"_blank\" rel=\"noopener\">:empty</a><i class=\"fa fa-external-link\"></i></span>, <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\" target=\"_blank\" rel=\"noopener\">:focus</a><i class=\"fa fa-external-link\"></i></span>,  实现<code>placeholder</code> 那样的效果</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:empty</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: \"输入消息...\";</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#999999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-4\">尝试输入一些文字吧：</a></p>\n  <div class=\"container-3\" contenteditable=\"true\"></div>\n  <style>\n    .container-3 {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n    .container-3:empty::before {\n      content: \"输入消息...\";\n      color: #999999;\n    }\n    .container-3:focus::before {\n      content: none;\n    }\n  </style>\n\n\n<p>　　如果你使用 Vue.js, 我们也可以它封装为一个Vue组件：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"msg-input\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"changeText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>&#123;&#123; innerText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"MsgInput\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  props: [<span class=\"string\">'value'</span>],</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"actionscript\">  data: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      innerText: <span class=\"keyword\">this</span>.value,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    changeText() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.$el.innerText);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span> &#123;</span></span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span><span class=\"selector-pseudo\">:empty</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: \"输入消息...\";</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#999999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>接下来在父组件中引用这个组件：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MsgInput</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> MsgInput <span class=\"keyword\">from</span> <span class=\"string\">\"/MsgInput.vue\"</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"MsgToolkit\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  data: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      msg: <span class=\"string\">''</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MsgInput</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>　　父组件为子组件使用 <code>v-model</code> 指令，将子组件的 <code>value</code> 与 父组件的 <code>msg</code> 双向绑定在一起。当输入事件发生后，子组件调用changeText方法，触发一个 <code>input</code> 事件，父组件监听到此事件，将事件传递过来的数据同步到 <code>msg</code> 上，由于数据是双向绑定的，子组件的 <code>value</code> 值也会相应发生变化。更过原理请参考 <span class=\"external-link\"><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\" target=\"_blank\" rel=\"noopener\">自定义组件的-v-model</a><i class=\"fa fa-external-link\"></i></span></p>\n<p><em>该篇博客内的代码已同步到<span class=\"external-link\"><a href=\"https://github.com/zsimline/mxsyx-public/tree/master/code/archive-10\" target=\"_blank\" rel=\"noopener\">Github</a><i class=\"fa fa-external-link\"></i></span></em></p>\n<p>参考资料：<br>  [1]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable</a><i class=\"fa fa-external-link\"></i></span><br>  [2]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility</a><i class=\"fa fa-external-link\"></i></span><br>  [3]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty</a><i class=\"fa fa-external-link\"></i></span><br>  [4]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus</a><i class=\"fa fa-external-link\"></i></span><br>  [5]. Vue.js官方文档 <span class=\"external-link\"><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model</a><i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　有时候我们需要一个高度能随内容自动增加的输入框，<code>input</code> 显然不行，因为 <code>input</code> 里的文字是不换行的。文本域 <code>textarea</code> 里的文字倒是换行的，可一旦文字内容超过其高度，<code>textarea</code> 就会增加一个烦人的滚动条，这是很影响视觉的，就如同下面：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p><textarea cols=\"30\" rows=\"3\"></textarea></p>\n<p>　　那么有没有办法制作一个高度能随文字内容自动增加的输入框呢？答案是肯定的，下面介绍两种方式。</p>\n<h3 id=\"方式一\"><span class=\"heading-link\">方式一</span></h3><p>　　这种方式依然使用 <code>textarea</code>, 主要思想是我们将 <code>textarea</code> 放入一个容器中，同时在这个容器中放入一个隐藏的 div (visibility: hidden), 监听 <code>textarea</code> 的输入事件并将其中的文字动态的同步到隐藏的div中，这样div 就可以撑开容器，这时设置 <code>textarea</code> 的高度为 100% 并将其定位到容器的左上角，那么 <code>textarea</code> 的高度自然就是其中文字内容的高度了。</p>\n<blockquote>\n<p><code>visibility</code> 是一个CSS属性，用来在不更改文档的布局的前提下显示或隐藏元素，它有三个可能的取值：</p>\n<ol>\n<li><code>visible</code> 元素正常显示(默认值)；</li>\n<li><code>hidden</code> 隐藏元素，但是其他元素的布局不改变，相当于此元素变成透明。<br>　　若将其子元素设为 visibility: visible，则该子元素依然可见；</li>\n<li><code>collapse</code> 用于表格的行、列、列组和行组，隐藏表格的行或列，并且不占用任何空间。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入消息...\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      width: 500px;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;         </span></span><br><span class=\"line\">      visibility: hidden;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 避免初始化时容器没有高度 */</span></span></span><br><span class=\"line\">      padding: 8px 0px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">textarea</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0px;</span><br><span class=\"line\">      padding: 0px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 必须设置为 content-box !!! */</span> </span></span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container textarea'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container div'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">   textarea.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span></span><br><span class=\"line\">      div.innerText = e.target.value;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-1\">尝试输入一些文字吧：</a><br>   <div class=\"container-0\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div></p>\n   <style>\n      .container-0 {\n         width: 500px;\n         position: relative;\n      }\n      .container-0 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-0 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n      }\n   </style>\n\n   <script>\n      (function() {\n         const textarea = document.querySelector('.container-0 textarea');\n         const div = document.querySelector('.container-0 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n\n<p>　　你可能已经注意到了，当我们输入文字时，输入框的高度显然要比文字内容高许多，伴随着输入文字的增多。高度差会越来越大，这是因为隐藏 <code>div</code> 与 文本域 <code>textarea</code> 内字体的尺寸与行高是不同的， <code>div</code> 内的字体尺寸与行高要比 <code>textarea</code> 内的大，所以 <code>div</code> 撑开的容器高度自然要高于 <code>textarea</code> 内的文字内容高度。要解决这个问题，统一它们的字体尺寸与行高就可以了。(注：<code>div</code> 的字体尺寸与行高默认继承自父元素)</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- demo-1.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入消息...\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      width: 500px;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      font-size: 14px;</span><br><span class=\"line\">      line-height: 16px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">      visibility: hidden;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 避免初始化时容器没有高度 */</span></span></span><br><span class=\"line\">      padding: 8px 0px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.container</span> <span class=\"selector-tag\">textarea</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0px;</span><br><span class=\"line\">      padding: 0px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 必须设置为 content-box !!! */</span></span></span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/** 设置字体尺寸与行高继承自父元素 */</span></span></span><br><span class=\"line\">      font-size: inherit;</span><br><span class=\"line\">      line-height: inherit;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* 去掉右下角的调整大小的标志 */</span></span></span><br><span class=\"line\">      resize: none;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container textarea'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container div'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">   textarea.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span></span><br><span class=\"line\">      div.innerText = e.target.value;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-2\">尝试输入一些文字吧：</a><br>   <div class=\"container-1\"><div></div><textarea placeholder=\"输入消息...\"></textarea></div></p>\n   <style>\n      .container-1 {\n         width: 500px;\n         position: relative;\n         font-size: 14px;\n         line-height: 16px;\n      }\n      .container-1 div {\n         visibility: hidden;\n         padding: 8px 0px;\n      }\n      .container-1 textarea {\n         width: 100%;\n         height: 100%;\n         position: absolute;\n         top: 0px;\n         padding: 0px;\n         box-sizing: content-box;\n         font-size: inherit;\n         line-height: inherit;\n         resize: none;\n      }\n   </style>\n   <script>\n      (function(){\n         const textarea = document.querySelector('.container-1 textarea');\n         const div = document.querySelector('.container-1 div');\n         textarea.addEventListener('input', (e) => {\n            div.innerText = e.target.value;\n         });\n      })();\n   </script>\n\n<p>　　这样一来高度就一致了。这种方式虽然可以较好的实现高度自适应的输入框，但实现起来总感觉很粗糙，下面这种方式就明显简单多了。</p>\n<h3 id=\"方式二\"><span class=\"heading-link\">方式二</span></h3><p>　　像 <code>div</code>, <code>p</code>, <code>blockquote</code> 这样的元素默认是不可编辑的，但我们可以将其 <code>contenteditable</code> 属性设置为 <code>true</code>, 使其变为可编辑的。</p>\n<blockquote>\n<p><code>contenteditable</code>是一个全局属性，用于指示元素是否可被用户编辑，该属性必须采用以下值之一：</p>\n<ol>\n<li><code>true</code> 或者 ‘空字符串’, 表示该元素是可编辑的；</li>\n<li><code>false</code>, 表示该元素是不可编辑的。</li>\n<li>如果未设置此属性，则其默认值将从其父元素继承。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">    width: 500px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-3\">尝试输入一些文字吧：</a><br>  <div class=\"container-2\" contenteditable=\"true\"></div><br>  <style>.container-2 {width: 500px;font-size: 14px;line-height: 16px;border: solid 1px #999}<br>  </style></p>\n<p>　　是不是很简单呢？ 我们也可以使用CSS伪类 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\" target=\"_blank\" rel=\"noopener\">:empty</a><i class=\"fa fa-external-link\"></i></span>, <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\" target=\"_blank\" rel=\"noopener\">:focus</a><i class=\"fa fa-external-link\"></i></span>,  实现<code>placeholder</code> 那样的效果</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:empty</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: \"输入消息...\";</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#999999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><a name=\"demo-4\">尝试输入一些文字吧：</a></p>\n  <div class=\"container-3\" contenteditable=\"true\"></div>\n  <style>\n    .container-3 {\n      width: 500px;\n      font-size: 14px;\n      line-height: 16px;\n      border: solid 1px #999;\n    }\n    .container-3:empty::before {\n      content: \"输入消息...\";\n      color: #999999;\n    }\n    .container-3:focus::before {\n      content: none;\n    }\n  </style>\n\n\n<p>　　如果你使用 Vue.js, 我们也可以它封装为一个Vue组件：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"msg-input\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">contenteditable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"changeText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>&#123;&#123; innerText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"MsgInput\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  props: [<span class=\"string\">'value'</span>],</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"actionscript\">  data: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      innerText: <span class=\"keyword\">this</span>.value,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    changeText() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"keyword\">this</span>.$el.innerText);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span> &#123;</span></span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 16px;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-id\">#999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span><span class=\"selector-pseudo\">:empty</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: \"输入消息...\";</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#999999</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.msg-input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">  content: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>接下来在父组件中引用这个组件：</p>\n<figure class=\"highlight html\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MsgInput</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> MsgInput <span class=\"keyword\">from</span> <span class=\"string\">\"/MsgInput.vue\"</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"MsgToolkit\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  data: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      msg: <span class=\"string\">''</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MsgInput</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>　　父组件为子组件使用 <code>v-model</code> 指令，将子组件的 <code>value</code> 与 父组件的 <code>msg</code> 双向绑定在一起。当输入事件发生后，子组件调用changeText方法，触发一个 <code>input</code> 事件，父组件监听到此事件，将事件传递过来的数据同步到 <code>msg</code> 上，由于数据是双向绑定的，子组件的 <code>value</code> 值也会相应发生变化。更过原理请参考 <span class=\"external-link\"><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\" target=\"_blank\" rel=\"noopener\">自定义组件的-v-model</a><i class=\"fa fa-external-link\"></i></span></p>\n<p><em>该篇博客内的代码已同步到<span class=\"external-link\"><a href=\"https://github.com/zsimline/mxsyx-public/tree/master/code/archive-10\" target=\"_blank\" rel=\"noopener\">Github</a><i class=\"fa fa-external-link\"></i></span></em></p>\n<p>参考资料：<br>  [1]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable</a><i class=\"fa fa-external-link\"></i></span><br>  [2]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility</a><i class=\"fa fa-external-link\"></i></span><br>  [3]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty</a><i class=\"fa fa-external-link\"></i></span><br>  [4]. MDN文档 <span class=\"external-link\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus</a><i class=\"fa fa-external-link\"></i></span><br>  [5]. Vue.js官方文档 <span class=\"external-link\"><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model</a><i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"JS数组","reward":true,"date":"2019-12-30T02:43:51.000Z","_content":"\n　　数组是 JavaScript 中最为常用的数据类型之一，一个数组中可以存储多个相同类型或不同类型的元素，元素的类型可以是基本类型也可以是数组类型，本文就JS数组的属性与方法做一个简单的介绍，争取用丰富的例子让读者明晰数组中常用函数的用法，同时尝试实现一些数组的方法。\n\n### 数组的构造\n\n### 构造函数","source":"_posts/JS数组.md","raw":"---\ntitle: JS数组\nreward: true\ndate: 2019-12-30 10:43:51\npermalink: 13\ncategories: [前端, JavaScript]\ntags:\n---\n\n　　数组是 JavaScript 中最为常用的数据类型之一，一个数组中可以存储多个相同类型或不同类型的元素，元素的类型可以是基本类型也可以是数组类型，本文就JS数组的属性与方法做一个简单的介绍，争取用丰富的例子让读者明晰数组中常用函数的用法，同时尝试实现一些数组的方法。\n\n### 数组的构造\n\n### 构造函数","slug":"13","published":1,"updated":"2019-12-30T07:49:41.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4s578si0000r4fw960s259a","content":"<p>　　数组是 JavaScript 中最为常用的数据类型之一，一个数组中可以存储多个相同类型或不同类型的元素，元素的类型可以是基本类型也可以是数组类型，本文就JS数组的属性与方法做一个简单的介绍，争取用丰富的例子让读者明晰数组中常用函数的用法，同时尝试实现一些数组的方法。</p>\n<h3 id=\"数组的构造\"><span class=\"heading-link\">数组的构造</span></h3><h3 id=\"构造函数\"><span class=\"heading-link\">构造函数</span></h3>","site":{"data":{}},"excerpt":"","more":"<p>　　数组是 JavaScript 中最为常用的数据类型之一，一个数组中可以存储多个相同类型或不同类型的元素，元素的类型可以是基本类型也可以是数组类型，本文就JS数组的属性与方法做一个简单的介绍，争取用丰富的例子让读者明晰数组中常用函数的用法，同时尝试实现一些数组的方法。</p>\n<h3 id=\"数组的构造\"><span class=\"heading-link\">数组的构造</span></h3><h3 id=\"构造函数\"><span class=\"heading-link\">构造函数</span></h3>"},{"title":"一个毕业生眼中的大学","reward":true,"date":"2019-12-26T14:15:39.000Z","_content":"\n　　","source":"_posts/一个毕业生眼中的大学.md","raw":"---\ntitle: 一个毕业生眼中的大学\nreward: true\ndate: 2019-12-26 22:15:39\npermalink: 12\ncategories:\ntags:\n---\n\n　　","slug":"12","published":1,"updated":"2019-12-30T02:46:19.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4s578sn0001r4fwgayl7nks","content":"<p>　　</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　</p>\n"},{"title":"对于长城防火墙的思考","reward":true,"date":"2019-12-29T15:13:25.000Z","_content":"","source":"_posts/对于长城防火墙的思考.md","raw":"---\ntitle: 对于长城防火墙的思考\nreward: true\ndate: 2019-12-29 23:13:25\npermalink: 11\ncategories:\ntags:\n---\n","slug":"11","published":1,"updated":"2019-12-30T02:46:19.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4s578sp0002r4fw2fbo9uuo","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ck41300tf0002a7fwen3malm3","category_id":"ck41300tr0008a7fw2gew0l34","_id":"ck41300u0000ja7fw9lqh9mbw"},{"post_id":"ck41300tl0004a7fw40b6e6gj","category_id":"ck41300tw000ea7fw1u5sgolc","_id":"ck41300u5000oa7fw9k7tal23"},{"post_id":"ck41300tp0007a7fw0ru5fht2","category_id":"ck41300u5000pa7fw6xf27xm9","_id":"ck41300ua000va7fwb4y4blip"},{"post_id":"ck41300ts0009a7fw5bstcbl8","category_id":"ck41300u7000sa7fw4xyd8ue5","_id":"ck41300ud000za7fw286h1xjf"},{"post_id":"ck41300tu000ca7fwb9ec4z7w","category_id":"ck41300ua000wa7fwgswh798p","_id":"ck41300ug0014a7fw5h3j6r3s"},{"post_id":"ck41300tx000fa7fwgd3h8s07","category_id":"ck41300u5000pa7fw6xf27xm9","_id":"ck41300uh0016a7fw133a189d"},{"post_id":"ck41300tz000ha7fwa77mhyi1","category_id":"ck41300uf0013a7fwf6r459c6","_id":"ck41300uj0018a7fw0045aw5h"},{"post_id":"ck41300u1000la7fw6ctg2z6u","category_id":"ck41300uh0017a7fw1svw5ntd","_id":"ck41300uk001aa7fw21ly97hu"},{"post_id":"ck42tvrdf00004hfwegzhhz3l","category_id":"ck41300tj0003a7fwf6ycdh22","_id":"ck42tvrdm00014hfwflxs9a94"},{"post_id":"ck41300to0006a7fw3dlaeieq","category_id":"ck41300u0000ka7fwhfq56jan","_id":"ck475lvi6000aytfwbiau4m6f"},{"post_id":"ck41300to0006a7fw3dlaeieq","category_id":"ck41300uj0019a7fw3qo64icf","_id":"ck475lvi6000bytfw8au6f1ht"},{"post_id":"ck4s578si0000r4fw960s259a","category_id":"ck41300u0000ka7fwhfq56jan","_id":"ck4s578sx0004r4fw6fsf9jww"},{"post_id":"ck4s578si0000r4fw960s259a","category_id":"ck4s578sq0003r4fw86vs5seq","_id":"ck4s578sx0005r4fwfd3f5czw"}],"PostTag":[{"post_id":"ck41300tf0002a7fwen3malm3","tag_id":"ck41300tn0005a7fw4hds65qr","_id":"ck41300tu000ba7fw7vgt9cm9"},{"post_id":"ck41300tl0004a7fw40b6e6gj","tag_id":"ck41300tt000aa7fw1uw3hwho","_id":"ck41300u0000ia7fw269d5pil"},{"post_id":"ck41300tp0007a7fw0ru5fht2","tag_id":"ck41300u4000ma7fw2t389i6k","_id":"ck41300u7000ra7fwhp4g3qy5"},{"post_id":"ck41300tu000ca7fwb9ec4z7w","tag_id":"ck41300u6000qa7fwfeub3rvh","_id":"ck41300ua000ua7fw0itvcocm"},{"post_id":"ck41300tx000fa7fwgd3h8s07","tag_id":"ck41300u4000ma7fw2t389i6k","_id":"ck41300ud000ya7fwagdc624b"},{"post_id":"ck41300tz000ha7fwa77mhyi1","tag_id":"ck41300ub000xa7fwf2xv00nq","_id":"ck41300uf0012a7fw2d3scsap"},{"post_id":"ck41300u1000la7fw6ctg2z6u","tag_id":"ck41300ue0011a7fwa48afg56","_id":"ck41300uh0015a7fw98to8y2y"},{"post_id":"ck41300to0006a7fw3dlaeieq","tag_id":"ck41300ty000ga7fw0m3a4d4b","_id":"ck475lvi60009ytfwes502efo"}],"Tag":[{"name":"工具使用","_id":"ck41300tn0005a7fw4hds65qr"},{"name":"C++","_id":"ck41300tt000aa7fw1uw3hwho"},{"name":"CSS","_id":"ck41300ty000ga7fw0m3a4d4b"},{"name":"思考","_id":"ck41300u4000ma7fw2t389i6k"},{"name":"兴趣","_id":"ck41300u6000qa7fwfeub3rvh"},{"name":"生活","_id":"ck41300ub000xa7fwf2xv00nq"},{"name":"Linux","_id":"ck41300ue0011a7fwa48afg56"}]}}