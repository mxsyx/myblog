[{"title":"Vue自适应高度的输入框","url":"/archives/10/","content":"\n　　有时候我们需要一个高度能随内容自动增加的输入框，`input` 显然不行，因为 `input` 里的文字是不换行的。文本域 `textarea` 里的文字倒是换行的，可一旦文字内容超过其高度，`textarea` 就会增加一个烦人的滚动条，这是很影响视觉的，就如同下面：\n```html\n<textarea cols=\"30\" rows=\"3\"></textarea>\n```\n<textarea cols=\"30\" rows=\"3\"\"></textarea>\n\n　　那么有没有办法制作一个高度能随文字内容自动增加的输入框呢？答案是肯定的，下面介绍两种方式。\n\n### 方式一\n\n　　这种方式依然使用 `textarea`, 主要思想是我们将 `textarea` 放入一个容器中，同时在这个容器中放入一个隐藏的 div (visibility: hidden), 监听 `textarea` 的输入事件并将其中的文字动态的同步到隐藏的div中，这样div 就可以撑开容器，这时设置 `textarea` 的高度为 100% 并将其定位到容器的左上角，那么 `textarea` 的高度自然就是其中文字内容的高度了。\n\n　　其中","categories":["VueJS"]},{"title":"拉勾网企业招聘信息分析报告","url":"/archives/9/","content":"\n　　2020年是16级大学生毕业的年份，明年的五六月份，包括笔者在内的一大批大学生就要走出校门，结束十六年的学业生涯，并开始长达数十年的职业生涯，在这个时间点上，我们最期望的莫过于找到一份称心的工作，这是家人的期盼，更是我们自己的期盼。\n　　我们中的每一个人，都或多或少的感受到了就业的压力，尤其是计算机行业，在这种**低端人才饱和，高端人才紧缺**的大环境下，找到一份称心的工作着实不是件容易的事情。刚走出校门的我们由于经验不足只能选择低端岗位，令人担忧的是全球智能化革命的兴起将消灭大量的低端岗位，所以未来的竞争只会越来越激烈。\n　　前段时间，一个偶然的机会我在互联网上浏览到了几则招聘信息，读着读着我脑子中便闪过一个念头，何不动用一些技术手段将这些招聘信息采集下来，然后对这些信息进行分析呢？这样就可以从整体上看清行业招聘的趋势了。在强大的好奇心的驱使下我设计并编写了计算机程序，程序运行了大概三天的时间，终于将这些招聘信息采集了下来，数据经过清洗与分析过后，利用数据可视化技术加以展现。现在我将分析结果分享出来，以下是文章正文部分。\n\n提示：正文包含六十七张图片，将消耗你大概8MB的流量，你一定是个慷慨的人。\n\n**笔者已将文中的图片打包成了压缩文件，读者可自行下载：[点我下载](http://cdn.zizaixian.top/user/files/technology.zip)**\n\n**本文同步发布在博客园：[https://www.cnblogs.com/nkqlhqc/p/11644900.html](https://www.cnblogs.com/nkqlhqc/p/11644900.html)**\n\n\n### 写在最前面的话\n\n- 本文展现的数据均采集于正规的招聘网站，数据的可信性是毋庸置疑的。\n\n- 所有采集到的数据仅用作学习与交流，笔者承诺不会将其用作商业用途。\n\n- 文中不免夹杂一些笔者的个人观点，你可以反对我的观点，但是我拒不接受。\n\n- 我并非权威的数据分析员，文章标题用 *报告* 二字纯粹是为了装逼。\n\n### 不要迷信数据与他人\n\n　　数据分析只是一个工具，它不是万能的，万不要盲目的相信数据，未来选择什么样的职业，还要自己凭主观定夺，也就是你自己说了算。对未来迷茫了就去多读书，不要迷信数据，更不要听旁人瞎扯。\n　　我在这里列举两类人，如果这两类人对你的职业有任何指导的话，你大可不必去听。这第一类人是大学教师，尤其是系里的领导，这类人由于在学校呆的太久，与外界基本处于隔离的状态。教师是一个相对安逸的职业，安逸的环境势必会打消人学习的热情，学习的热情一旦没有了，不再为自己充电了，那就基本上等于落后于时代了，对未来的判断更是无从谈起。计算机行业的发展速度远超过王思聪换女朋友的速度，我们的大学教师面对这样的发展速度能否给予学生一个正确的指导呢？我想他们是不能的。如果有教师为你的未来提供什么指导的话，他们也是在拿数年前的眼光告诉你现在该怎么去做，或者借用自媒体噱头式的宣传来鼓励你去做那些看起来很有前景的事情。\n　　第二类人，是培训机构的人。培训机构的人为了自身的利益，不可避免的要用夸张式的语气宣扬一种事物，或去贬低一种事物，我觉得这是无可厚非的，毕竟赚钱才是培训机构的首要任务，而非培养人才。我只想说兼听则明，偏信则暗，如果任由单方面的话语在我们耳边徘徊的话，那我们对未来的判断是不是失去了平衡呢？我曾经**被动的**接受过五家培训机构的宣传，在此我也非常有兴趣点名一家培训机构，这家培训机构的名字叫北京AAA教育，在被动的听完该机构某位中年女士的宣讲后，我只想借诸葛亮的话形容一下当时的心情：我从未见过有如此厚颜无耻之人。为了自己的那点利益，把学生当傻子，信口胡说，颠倒黑白，四十分钟的宣讲将其无知、无耻的一面表现的淋漓尽致。在此衷心祝愿该培训机构早日倒闭，免得毒害更多的学生。\n\n### 关于数据量的解释\n\n　　数据均采集于[拉勾网](https://www.lagou.com)。相比于其它招聘信息服务网站，拉勾网专为IT从业人员提供信息服务，也就是说拉勾网上面的招聘信息全部都是与IT互联网相关的，无其它行业的招聘信息，因此选择拉勾网作为数据采集对象再合适不过了。\n　　此次共采集到招聘信息十一万两千八百六十五条，去除重复与无效的数据后剩余八万零三百五十条，数据采集日期为二零一九年九月下旬。 岗位涉及技术、产品、设计、运营、市场、销售、职能、游戏八个方向，由于绝大部分的学生在刚毕业时还是会选择技术岗，所以我仅仅分析了技术岗的数据，这部分数据共计两万八千六百七十一条。也许两万八千余条的数据量并不算大，但是我认为有时候不一定需要从宏观角度出发才能认清一件事情，从微观角度出发也可以很清晰的看到事物整体的面貌，这是一种透过微观看宏观的观察问题的方式。就比如我们交朋友，我们往往能通过对方的一些细节来判断这个人是否值得深交，而无需经过什么大事。\n　　每条招聘信息都包含工作地区、薪资区间、学历要求、经验要求、技能要有、岗位职责、企业所属领域、企业融资情况等数据，下面我将从十个方面对这部分数据做一个简单的分析。\n\n**提示：可以点击图片查看大图！**\n\n### 哪个城市最吸引人才？\n\n　　毕业之后，有些人想去自己向往已久的城市，有些人看见别人去哪了他就去哪，而很多的父母也不愿意子女远行。选择一个城市对我们将来的影响是不容小觑的，因为它直接决定了我们下半辈子在哪当房奴，甚至连房奴都当不上。下面是各城市需求岗位数量分布图：\n\n[![各城市需求岗位数量分布](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t1823.jpg \"各城市需求岗位数量分布\")\n\n　　北京毫无疑问的是最吸引人才的城市，主要还是因为北京的IT企业相对较多一些。排在其身后的分别是深圳、上海、广州、杭州、成都、武汉、南京，其中深圳与上海的需求量基本持平，再往后就是岗位需求不太旺盛的城市了，这个分布也基本符合我们的认知。\n\n### 你需要什么样的学历\n\n[![总体学历要求分布](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")](http://cdn.zizaixian.top/2019/10/t1503.jpg \"总体学历要求分布\")\n\n　　如上图所示，本科及以上学历占到一半以上，接着按比例排列分别是大专及以上、学历不限、硕士及以上、博士及以上。虽然本科及以上占比最大，但不要觉得自己是本科学历就高兴的太早，其一，不同的岗位对学历的要求是不同的，这里展现的仅仅是整体的学历要求分布，忽略了这种不同；其二，企业不仅仅要看你的学历，经验也是重要的考量；其三，学历低往往意味着薪资低；其四，学历低的不只你一个，你有多大的把握竞争过同类的人？这些都是客观存在的问题。\n　　提升学历真是件不错的事情，这么想的肯定也不只我一个，不然就不会出现下面这种情况了：\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic1.jpg)](http://cdn.zizaixian.top/2019/10/pic1.jpg)\n\n　　[![](http://cdn.zizaixian.top/2019/10/pic2.jpg)](http://cdn.zizaixian.top/2019/10/pic2.jpg)\n\n### 你需要几年的经验\n\n工作经验是IT企业招聘人才时的重要考量，以下展示的整体上经验要求的分布：\n\n[![总体经验要求分布](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")](http://cdn.zizaixian.top/2019/10/t1526.jpg \"总体经验要求分布\")\n\n　　从图上可以看出，经验3-5年占比最高，接着是经验1-3年、经验5-10年、经验不限、经验应届毕业生、经验1年以下、经验10年以上。经验多意味着什么自然不必多说，但我强烈反对经验多就意味着头发少这种言论，虽然理论上是这样的，但也有例外不是。\n\n### 学历 And 经验\n\n[![总体学历与经验分布](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")](http://cdn.zizaixian.top/2019/10/t1606.jpg \"总体学历与经验分布\")\n\n　　上图展示的是不同学历下的经验要求分布，从中可以看出不管是何种学历，绝大多数岗位都要求3-5年或者1-3年的工作经验，也可以这么说，学历不行可以靠经验来补充，经验不足最好靠学历来补充，学历与经验都不足，需要在缝隙中生存。\n\n\n### 哪个领域最需要人才\n\n　　不同的企业都有自己专属的领域，比如有的企业搞社交，有的企业搞金融，有的企业搞医疗，而有的企业涉足多个领域，比如乐视公司，咱也不知道贾跃亭老板回国了没有。\n\n[![各领域需求工作岗位数量分布](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")](http://cdn.zizaixian.top/2019/10/t2135.jpg \"各领域需求工作岗位数量分布\")\n\n　　上图展示的是不同领域需要的人才数量分布，移动互联网一马当先，这与我国移动互联网的普及程度是密不可分的。\n　　[![](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)](http://cdn.zizaixian.top/2019/10/截图_2019-10-06_23-37-04.png)\n>2019年8月30日，中国互联网络信息中心(CNNIC)第44次中国互联发展状况统计报告指出：截止到2019年6月，中国网民规模达8.54亿，用户月均使用移动流量达7.2GB。其中45.5%的网民为30岁以下的年轻群体，本科以下学历（不含本科）网民占比为90.4%\n\n　　比较热门的领域还有企业服务、数据服务、金融、电商、游戏、文娱、教育等等。如果是给人打工的话自然是不用考虑企业所属领域的，如果创业的话那就要好好考虑考虑了。\n\n### 企业融资情况\n\n下图展示了共计7257个公司的融资情况：\n\n[![企业融资情况](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")](http://cdn.zizaixian.top/2019/10/t1722.jpg \"企业融资情况\")\n\n　　其中：上市公司859个，占比11.83%；不需要融资的公司2311个，占比31.85%；未融资的公司1698个，占比23.4%；A轮融资公司884个，占比12.18%；B轮融资公司561个，占比7.73%；C轮融资公司250个，占比3.44%；D轮及以上融资公司186个，占比2.56%；天使轮融资公司508个，占比7%\n\n>科普：[融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎](https://www.zhihu.com/question/28498812/answer/290736672 \"融资 A 轮、B 轮 和 C 轮 有什么区别？ - 苏老湿的回答 - 知乎\")\n\n### 总体薪资分布\n\n　　下图以饼图的形式展示了总体上薪资的分布，从1K到30K以2K为一个区间段，30K往后以5K为一个区间段，饼图的每个扇区代表落在该薪资区间的比例。\n\n[![总体薪资分布](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")](http://cdn.zizaixian.top/2019/10/t1424.jpg \"总体薪资分布\")\n\n　　总体的薪资分布并无实际参考意义，因为影响的薪资的因素是很多的，不同职位、学历、工作经验、公司融资情况、地区都会影响到薪资，下面就将展示不同因素影响下的薪资分布情况。\n\n### 不同因素影响下的薪资分布情况\n\n**提示：前方核能多图预警。**\n　　**本节采用饼图的形式展示不同因素对薪资分布的影响，这里需要强调的是“分布”二字，我们可以从图上看出哪些薪资区间占比较大，哪些薪资区间占比较小，但是不能够从图上看出某一因素对薪资的直接影响，现实中还要基于我们自身的考量。**\n\n#### 地区因素\n\n下面展示了最吸引人才的六大城市的平均薪资分布：\n\n[![北京地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505北京.jpg \"北京地区薪资分布\")\n[![深圳地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深圳.jpg \"深圳地区薪资分布\")\n[![上海地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上海.jpg \"上海地区薪资分布\")\n[![广州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505广州.jpg \"广州地区薪资分布\")\n[![杭州地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505杭州.jpg \"杭州地区薪资分布\")\n[![成都地区薪资分布](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505成都.jpg \"成都地区薪资分布\")\n\n　　通过对比可以看出，北京的平均薪资还是较其它几个城市高的，在11K-13K、15K-17K、19K-21K、21K-23K、29-31K都有较大的分布，上海的薪资分布与北京无太大差异，而成都明显是低薪资区间占比大，如果去国家统计局查一下各个城市的物价的话，这几张图到是十分合理的。\n\n#### 学历因素\n\n下面展示了不同学历的平均薪资分布：\n\n[![学历不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505学历不限.jpg \"学历不限薪资分布\")\n[![大专及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505大专及以上.jpg \"大专及以上薪资分布\")\n大专及以上学历一万元薪资以下占据一半以上比例。\n\n[![本科及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505本科及以上.jpg \"本科及以上薪资分布\")\n本科及以上学历的薪资分布是比较均匀的，从整体上来看一万元至两万元的薪资大概占据50%。\n\n[![硕士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505硕士及以上.jpg \"硕士及以上薪资分布\")\n很明显，相比本科学历高出一个层级后，硕士学历的低薪资区间占比明显缩小，高薪资区间占比明显增加，其中21K-23K、29K-30K、35K-40K占比较大，从整体上看一万五千元至三万五千元的薪资占据约50%。\n\n[![博士及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505博士及以上.jpg \"博士及以上薪资分布\")\n这个就很变态了，一万元薪资以下占比为零，一万元至两万元薪资占比很小，三万元以上薪资占比超75%，五万元薪资以上占比更是逼近25%。\n\n　　学历因素对薪资分布的影响给予我们最直观的启示就是：拥有什么样的学历有可能会决定今后的上升空间，学历低不意味着没有机会。\n\n#### 经验因素\n\n下面展示了不同工作经验的平均薪资分布：\n\n[![经验不限薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验不限.jpg \"经验不限薪资分布\")\n[![经验应届毕业生薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验应届毕业生.jpg \"经验应届毕业生薪资分布\")\n[![经验1年以下薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1年以下.jpg \"经验1年以下薪资分布\")\n[![经验1-3年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验1-3年.jpg \"经验1-3年薪资分布\")\n[![经验3-5年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验3-5年.jpg \"经验3-5年薪资分布\")\n[![经验5-10年薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验5-10年.jpg \"经验5-10年薪资分布\")\n[![经验10年以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505经验10年以上.jpg \"经验10年以上薪资分布\")\n\n　　从上面七张图我们可以看出随着工作经验的增加，低薪资区间占比越来越小，高薪资区间占比越来越大，这与学历增加后平均薪资的走势是一样的。\n\n　　经验少则薪资低，经验多则薪资高，这是谁都知道的道理。但是值得我们思考的一个问题是：学历与经验哪个因素对薪资的影响更大一些呢？我还没有找出一个合理的算法或公式来下一个结论，凭借着对图的直观感觉我认为这两个因素对薪资的影响都挺大的（听起来像是句废话）。\n\n#### 职位因素\n\n不同职位的薪资分布是有所差异的，但这仅仅代表着分布的差异，不能够抛开学历、经验等因素说某个职位比另一个职位好，这是没有任何意义的。下面分别展示了前端开发、后端开发、移动开发、运维、高端职位、人工智能这六种职位的薪资分布情况：\n\n[![前端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505前端开发.jpg \"前端开发薪资分布\")\n[![后端开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505后端开发.jpg \"后端开发薪资分布\")\n[![移动开发薪资分布](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505移动开发.jpg \"移动开发薪资分布\")\n[![运维薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维.jpg \"运维薪资分布\")\n[![高端职位薪资分布](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505高端职位.jpg \"高端职位薪资分布\")\n[![人工智能薪资分布](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505人工智能.jpg \"人工智能薪资分布\")\n\n　　尽管我们不能直接比较哪个职位更好一些，但是从不同职位的资分布情况来看，我们仍然能够看出有些职位的薪资上升空间是比较小的，而像人工智能这种对学历要求极高的职位薪资上升空间就相对大一些。\n\n\n#### 技术因素\n\n　　技术是最容易引起人们争论的话题，而且大多数是无意义的争论。整天考虑该选择什么样的技术来实现自己的想法是一种避重就轻的行为，就像每个月都发布的  [TIOBE编程语言排行榜](https://www.tiobe.com/tiobe-index/ \"TIOBE编程语言排行榜\")一样，它只能反映编程语言的热门程度 ，但是就是有很多自媒体或培训机构喜欢拿它来说事，下一些类似“某种编程语言好”、“某种编程语言有前途”这种愚蠢的结论。\n\n计算机行业技术门类过于繁多，下面仅仅列举了比较热门的技术，仅当参考：\n\n[![C薪资分布](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C.jpg \"C薪资分布\")\n[![C++薪资分布](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C-1.jpg \"C-1薪资分布\")\n[![Java薪资分布](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Java.jpg \"Java薪资分布\")\n[![JavaScript薪资分布](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505JavaScript.jpg \"JavaScript薪资分布\")\n[![Node.js薪资分布](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Node.js.jpg \"Node.js薪资分布\")\n[![PHP薪资分布](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505PHP.jpg \"PHP薪资分布\")\n[![Android薪资分布](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Android.jpg \"Android薪资分布\")\n[![Python薪资分布](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505Python.jpg \"Python薪资分布\")\n[![web前端薪资分布](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505web前端.jpg \"web前端薪资分布\")\t\n[![深度学习薪资分布](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505深度学习.jpg \"深度学习薪资分布\")\n[![区块链薪资分布](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505区块链.jpg \"区块链薪资分布\")\n[![算法工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505算法工程师.jpg \"算法工程师薪资分布\")\n[![图像识别薪资分布](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505图像识别.jpg \"图像识别薪资分布\")\n[![运维工程师薪资分布](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505运维工程师.jpg \"运维工程师薪资分布\")\n\n#### 企业融资因素\n\n下面展示了不同融资情况的企业的薪资分布情况：\n\n[![不需要融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505不需要融资.jpg \"不需要融资薪资分布\")\n[![未融资薪资分布](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505未融资.jpg \"未融资薪资分布\")\n[![天使轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505天使轮.jpg \"天使轮薪资分布\")\n[![A轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505A轮.jpg \"A轮薪资分布\")\n[![B轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505B轮.jpg \"B轮薪资分布\")\n[![C轮薪资分布](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505C轮.jpg \"C轮薪资分布\")\n[![D轮及以上薪资分布](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505D轮及以上.jpg \"D轮及以上薪资分布\")\n[![上市公司薪资分布](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")](http://cdn.zizaixian.top/2019/10/t1505上市公司.jpg \"上市公司薪资分布\")\n\n\n### 职位诱惑\n\n　　几乎每个企业都会在招聘公告上写一些自己公司的“优势”，也叫职位诱惑，下面用词云的形式展示了职位诱惑中出现频率最高的50个词汇：\n\n[![职位诱惑词频统计](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")](http://cdn.zizaixian.top/2019/10/t1655.jpg \"职位诱惑词频统计\")\n\n*注：分词器把“五险一金”分成了“五险”和“一金”两个词，实际上这是一个词。*\n> 科普：五险一金，指中国用人单位给予劳动者的几种保障性待遇的合称。“五险”指五种社会保险，包括养老保险、医疗保险、失业保险、工伤保险、生育保险，“一金”是指住房公积金。--- 摘自维基百科\n\n### 技能要求\n\n每个企业都会在招聘公告上明确的指出求职者应该具备哪些技能，不同职位的技能要求侧重点是不同的，但是也有一些普遍的要求。下面仍然采用词云的形式展示了几个热门职位或技术的技能要求高频词汇：\n\n[![后端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008后端开发.jpg \"后端开发技能要求词汇统计\")\n[![前端开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008前端开发.jpg \"前端开发技能要求词汇统计\")\n[![全栈工程师技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008全栈工程师.jpg \"全栈工程师技能要求词汇统计\")\n[![移动开发技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008移动开发.jpg \"移动开发技能要求词汇统计\")\n[![运维技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008运维.jpg \"运维技能要求词汇统计\")\n[![C++技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008C.jpg \"C++技能要求词汇统计\")\n[![Java技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Java.jpg \"Java技能要求词汇统计\")\n[![PHP技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008PHP.jpg \"PHP技能要求词汇统计\")\n[![Python技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008Python.jpg \"Python技能要求词汇统计\")\n[![人工智能技能要求词汇统计](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")](http://cdn.zizaixian.top/2019/10/t2008人工智能.jpg \"人工智能技能要求词汇统计\")\n\n【注】统计高频词汇的过程中已经过滤掉了无意义的词，例如“熟悉”、“精通”、“具备”、“掌握”、“扎实”等词汇，保留“经验”一词旨在说明企业十分看中求职者对某一特定技术的使用经验。\n\n### 写在最后\n\n　　首先要感谢您能读到这里，感谢您在百忙之中读完我的这篇不严谨且存在诸多纰漏的文章。我从没有系统的学习过数据分析，只是凭借着兴趣做了这件事情，如果您能对文中的数据分析提出任何异议或者建设性意见的话，不胜感激。\n\n　　未来的路还很长，也许有些人在刚走出校门时会遇到一些困难，而有的人可能会走的相对顺利一些。每个人的都有属于自己的目标与理想，没必要攀比些什么，做好眼前的每一件小事，向往着一个不会比今天更糟的明天，一切都会有个好的结果。\n\n　　最后，一首冯唐的诗，送给自己以及即将迈出校门的年轻人：\n　　**尚未佩妥剑，转眼便江湖。**\n　　**愿历尽千帆，归来仍少年。**\n","categories":["其它"]},{"title":"绕过校园网Web认证","url":"/archives/8/","content":"\n>该文章最初于2017年11月08日发布在[博客园](https://www.cnblogs.com/nkqlhqc/p/7805837.html)\n当初我还在上大一，掌握的计算机知识非常少，只是为了好玩，实现了自己的某个小想法。如今两年过去了，这篇文章已经有三万多人次的阅读量，我也很欣慰。现将该篇文章同步到我的个人博客中，以勉励自己，时刻保持一个好奇心。\n\n相信很多高校学生都有用WEB认证方式接入校园网的经历。\n\n　　拿我所在的大学为例，我们大学的校园网由联通公司承建，当我连上寝室的无线路由器后，浏览器会自动弹出一个由卓智公司开发的认证界面，如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-01.png\" alt=\"\" /></a>\n\n　　如果买了联通公司的流量，会取得一个账号和密码，输入账号密码登陆后就能享用无线了，当然啦，对于爱折腾的人来说，总要想点方法绕过这个认证，不为别的，只为实现内心的一个想法。所以我就在各大技术论坛查询了一些绕过web认证的方法。网上有很多人给出了方法，这些方法大同小异，基本原理都一样，但是呢，难免有疏漏和难懂的地方。所以，接下来，我就对这个问题做一次系统的介绍。\n\n### 原理解释\n\n　　当我们连上校园网的无线路由器后，虽然上不了网，但是我们的计算机却分配到了IP地址（那么为什么要给我们分配IP呢？很好回答啦，不分配IP地址web认证就实现不了呀！）此时若我们进行一些上网的操作，例如访问百度主页，那么计算机的数据包将从TCP443端口上发出，校园网网关就会拦截从这个端口上发出的数据包。同理从其它端口上发出的数据包也会遭到拦截。\n\n　　**但是有一个神奇的端口，从这个端口发出的数据包不会遭到网关拦截，它就是UDP53端口。对计算机网络稍微了解的朋友应该知道在UDP53端口上运行的协议是DNS协议（域名解析协议），也就是说我们现在可以正常查询网站域名对应的IP地址。**\n\n例如用Windows自带的nslookup命令查询百度的IP地址时会返回一个正确的结果：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-02.png\" alt=\"\" /></a>\n\n　　<strong>既然UDP53端口的数据包可以通过网关，那么我们可以在本地运行一个程序将其它端口的数据包伪装组成UDP53端口的数据包，然后发送到本地域名服务器，那么网关就不会进行拦截了，数据包就顺利的通过了网关，可是发送出去的数据报如何返回呢？这就需要我们做进一步的设置。</strong>\n\n　　接下来我们需要一个VPS（云服务器）和一个域名，我了便于叙述，我给这个云服务器起名为V，域名起名为Y。我们伪装的DNS数据包要查询的域名就是Y，本地域名服务器接收到这个伪装后的数据包后，由于它无法解析这个域名Y，便将数据包进行转发，让能够解析Y的域名服务器进行解析，接下来我们将Y设置一个NS记录，用来指定Y由哪个域名服务器来进行解析，我们指定的域名服务器就是前面提到的V，所以接下来数据包会被发送到V中。此时我们在V中运行一个程序，对伪装的数据包进行还原，还原后的数据包再发送出去，这样当V接收到响应数据包后，V上运行的程序会再次对其进行伪装，伪装成一个DNS响应数据包，这个DNS响应数据包会沿着上述相反的路径发送回我们的计算机，我们的计算机再次对这个DNS响应数据包进行还原，到现在，我们真正想要得到的数据包已经到手了。也许上面的叙述有点绕，我放一张图大家就能明白了：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-03.png\" alt=\"\" /></a>\n\n好了，要是看了图没明白也没有关系，只要按照下面的步骤做就可以了。\n\n　　Windows上与Linux上实现方法不同，就伪装数据包的程序而言，在windows平台上推荐使用dns2tcp这个软件，而在linux平台上推荐使用iodine这个软件，关于iodine的使用，我会再写一篇文章，所以下面主要讲一下dns2tcp的使用，也就是在windows上实现绕过WEB认证，linux系统用户请移步我的另一篇文章\n\n### 安装软件\n\n　　在本地计算机上安装dns2tcp这个软件，它的作用是对数据包进行伪装与还原。\n\n　　附Windows版下载地址：[https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw](https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw \"https://pan.baidu.com/s/1y1OSPjCyLZ97P0B58Bukzw\")   提取码：w198\n\n### 配置虚拟主机\n\n　　申请一个VPS，国内VPS服务商众多，什么阿里云啦，腾讯云啦，百度云啦。在这里我给大家推荐由世纪互联运营的微软Azure云服务器，1元体验一个月，申请与部署方式很简单，而且服务器配置与带宽很高，可惜的是就能使用一个月，其实学服务器开发的大学朋友们也可以申请一个练练手，毕竟这是一次难得的实践机会嘛！\n\n附微软Azure云服务器申请地址：[https://www.azure.cn/pricing/1rmb-trial-full/](https://www.azure.cn/pricing/1rmb-trial-full/ \"https://www.azure.cn/pricing/1rmb-trial-full/\")\n\n　　有关申请与部署服务器的细节，我就不再赘述了，按照流程走就行。有不懂的地方可以参看微软给的文档和视频教程。\n\n　　下面这个操作尤为重要，部署成功服务器后，务必参照微软的文档为服务器添加入站与出站规则，也就是哪些类型的数据包可以进出你的服务器，那些类型的数据包会被防火墙拦截，这个步骤决定着伪装的数据包是否能够进入到我们的VBS\n\n将TCP80，TCP443，UDP53端口的数据设置为允许入站与出站，如下图所示：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-13.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-14.png\" alt=\"\" /></a>\n\n申请成功后，微软会给你一个公网IP，这个公网IP一定要牢记，接下来需要用到,现在假定你得到的公网IP为140.205.32.13\n\n### 配置域名\n\n　　申请一个域名，推荐到阿里云申请，因为便宜，我申请的.top国际顶级域名第一年才1块钱。\n　　附申请地址：[https://wanwang.aliyun.com/domain/yumingheji](https://wanwang.aliyun.com/domain/yumingheji \"https://wanwang.aliyun.com/domain/yumingheji\")\n\n　　申请过程请严格按照人家的流程，不过要提醒一点的是务必要用真实信息，否则人家会封掉你的域名。\n\n　　现在假定你申请到了一个域名，假如你申请到的域名为aliyun.top,你需要进入阿里云的域名控制台，为其添加两条记录。\n\n　　第一条为NS记录，主机记录填一个自己喜欢的名称，记录值为解析该域名的域名，记录值要牢记，下面用的到。\n\n　　假设你添加的NS记录名称为fq, 记录值为dns.aliyun.top。\n\n　　再为申请到的域名添加一个A记录，A记录的主机记录是NS记录的记录值，A记录的记录值是你所申请到的VPS的公网IP，如下表：\n\n| 记录类型 | 主机记录 | 记录值 |\n| ------------ | ------------ | ------------ |\n| NS |  fq | dns.alibaba.top |\n|  A  | dns | 140.205.32.13 |\n\n\n　　当本地域名服务器无法解析我们伪装的数据包后，便将数据包发送给NS记录指定的服务器dns.aliyun.top, 而dns.aliyun.top的IP地址已经在A记录中给出了，所以刚才原理没看懂的朋友朋友们现在应该知道为什么本地域名服务器会将数据包发送到我们的VPS中了吧\n\n### 启动代理\n\n　　windows系统用户在计算机上安装一个名为xshell的软件，它用来连接我们的VPS。\n　　附下载地址：[http://www.downxia.com/downinfo/150560.html?fromm](http://www.downxia.com/downinfo/150560.html?fromm \"http://www.downxia.com/downinfo/150560.html?fromm\")\n\n　　下载后安装，安装时选择“家庭/学校 ”版，商业版要钱，家庭版其实就能满足我们的需求了。\n\n　　安装成功后，依次点击点击\"文件\"->\"新建\"。名称随意，协议选择SSH，主机名填你的VBS公网IP，端口号填22，添完后点击连接；\n\n　　等一会弹出一个输入用户名的窗口，输入你部署服务器时设置的用户名，输入完成后点击记住用户名，点击确定。在弹出的新窗口中输入你部署服务器时设置的密码，输入完成后点击确定，不出意外，你将会连接到你的VBS,如下图：\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-04.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-05.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-06.png\" alt=\"\" /></a>\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-08.png\" alt=\"\" /></a>\n\n接下来在Xshell中输入sudo apt-get install dns2tcp，敲回车，这条命令用来安装dns2tcp这个软件，很快就会安装完毕。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-07.png\" alt=\"\" /></a>\n\n【注】没用过Linux的用户可能看不懂这些Linux命令，但是不懂没关系，跟着我做就行了。\n\n#### 配置dns2tcp：\n\n再次敲入命令：`sudo vim /etc/dns2tcpd.conf` ，用vim编辑器将其中的内容替换为以下内容：\n\n>listen = 10.0.0.4     #这里写你的云服务器的内网IP\n>port = 53\n>user = nobody\n>chroot = /tmp\n>domain = dns.aliyun.top         #这里写你设置的NS记录值\n>resources = ssh:127.0.0.1:22,socks:127.0.0.1:1082,http:127.0.0.1:3128\n\n下面创建后台进程，运行dns2tcp，依次键入并执行如下命令：\n`screen -S dns2tcpd`　　　　　　　　　  #创建后台会话\n`dns2tcpd -f /etc/dns2tcpd.conf -F -d 2`　  #启动dns2tcp\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-09.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，说明dns2tcp启动成功了，此时按下Ctrl + a+d键，让dns2tcp进程后台执行，再关闭与服务器的连接就行了\n\n#### windows客户端配置：\n\n打开CMD，键入并执行如下命令 ： \n`dns2tcpc -r ssh -z dns.aliyun.top 140.205.32.13  -l 8888 -d 2`\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-10.png\" alt=\"\" /></a>\n\n当出现上图显示的内容时，代表会话已经建立了，此时最小化这个窗口，**记住千万不要关闭它！！！**\n\n>-r 后接服务名称<ssh/socks/http中的任意一个>\n>-z 后接你设置的NS记录,和你的VPS公网ip\n>-l 后接本地端口，随便一个常用端口就行\n>-d 开启 Debug\n\n现在假设你完全按照我给出的流程走的，离成功只有一步之遥了，下面用Xshell转换Socks4/5通用代理：\n　　在xshell中仿照上面新建会话：IP地址为127.0.0.1，端口为8888 ；然后点击隧道，类型选择socks4/5，端口填1080，输入完成后点击确定，若不出意外，此时CMD中会出现大量信息，这些信息代表通过dns2tcp的数据包，这就表明你的电脑已经在和服务器传输数据了。而xshell中又会提示你登录到你的服务器，仿照上文输入用户名和密码（最好选择记住用户名和密码，这样下次就不用那么麻烦了），点击确定并成功登录到你的服务器后，最小化xshell，**记住，此时千万不要关闭xshell！！！**\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-12.png\" alt=\"\" /></a>\n\n　打开Internet选项，依次选择\"连接\"->\"局域网设置\"->\"为LAN使用代理服务器\"->\"高级\"\n\n　在socks/套接字输入框中，要使用的代理服务器地址填127.0.0.1，端口填1080，然后点击确定。\n\n<a href=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\"><img src=\"https://blog.zizaixian.top/wp-content/uploads/2019/10/AR589-11.png\" alt=\"\" /></a>\n\n**到此，大功告成，打开你的浏览器试试吧！！！**\n\n### 附录\n\n#### screen命令的使用：\n\n*screen命令用来创建后台进程，进程运行时，便于我们能继续做其它工作。*\n\n|   操作 | 命令  |\n| ------------ | ------------ |\n| 创建screen会话  | screen -S dns2tcpd   |\n| 启动dns2tcp | sudo dns2tcpd -f /etc/dns2tcpd.conf -F -d 2   |\n| 暂时离开快捷键   | Ctrl + a + d |\n| 恢复screen会话  |  screen -r dns2tcpd  |\n| 列出当前的会话列表  |  screen -ls   |\n| 强行终止dns2tcp进程 | screen -S dns2tcpd -X quit |\n\n\n#### 常见DNS记录的含义：\n\n|  记录 | 说明  |\n| ------------ | ------------ |\n|A记录  |  用来指定主机名或域名对应的IP地址记录，通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 |\n| NS记录 | 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析,简单的说，NS记录是指定由哪个DNS服务器解析你的域名。 |\n| MX记录 | 邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。  |\n| CNAME记录 |别名记录，允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。|\n","tags":["兴趣"],"categories":["好玩的事"]},{"title":"那年夏夜","url":"/archives/6/","content":"\n　　我想写些东西已经很久了，以前不会写，不知该从何处下笔。不知道现在会不会写，但凡事都可以去试一试，于是我写下了这篇文章。\n\n　　十多年前，在我上小学的时候，那时的我还有一双明亮的眼睛，能清楚的看见天上数不清的星星。现在呢，患了近视的我再也无法看清那些星星了，也许真的是身体上的原因，又或许是有什么不干净的东西模糊了我的眼睛。\n\n　　那时的夏夜很是凉爽，每到傍晚时分，父亲便搬出桌子，摆在院子中央，我们一家人就在院子里吃晚饭。奶奶总是熬一锅西红柿粥给全家人喝，说实话我真的很爱喝，只不过再也喝不到了。我似乎记不起吃过完后家人们都去做什么了，除了我的爷爷。爷爷有两个老物件，一个是他的三轮车，那是一辆很破旧的三轮车，也是我第一个会驾驶的“交通工具”，爷爷每天用它来拉一些用来喂羊的树枝、青草。这另一个物件，就是爷爷非常喜爱的躺椅，每当吃过晚饭后，爷爷便躺在上面乘凉。老人家睡觉比较早，晚上八点钟左右爷爷便去屋子里睡觉了，可是我一个小孩子在八点钟是绝对不会睡觉的，但也没什么可供玩耍的，于是我便相中了爷爷的躺椅。\n\n　　爷爷去屋子里睡觉后，我便霸占了他的躺椅。躺在上面，放眼望去，映入眼帘的是一个璀璨的星空。离我最近的星星如镰刀一般，最亮也最引人注目，听说有一个漂亮的姐姐住在上面，那时的我已经知道了它叫月亮。离着月亮不远处有一颗非常亮的星星，除了月亮外它便是最耀眼的，那时我还不知它叫什么名字，后来有人告诉我它叫启明星，是指引人们前进的星星。 这些星星交织在一起，有的亮一些，有的暗一些，有的一直在闪烁，有的从来都不会闪烁，美丽极了。\n\n　　那时的夏夜很安静，除了能听到几只蛐蛐的叫声外，再也听不到其他声音了。小时候的我很喜欢那样安静的氛围，我在躺椅上躺一两个小时都不会觉的枯燥，我很想睡在上面，只不过母亲总是会把我赶到屋子中睡觉。\n\n　　这么多年过去了，一年四季中依旧不会少了夏季，白昼过后还是会迎来黑夜。只是，我再也没有机会去享受一个那样纯净的夏夜了。爷爷在我上初一时离开了我们，奶奶也终将离我们而去，姐姐即将出嫁，父亲与母亲苍老了许多。曾经的一家人永远的留在了那个夜晚。\n\n　　童年的记忆已经忘却的差不多了，以后我只会记得曾经有过一个个美好的夏夜，关于那些夏夜里发生了什么，就再也记不得了。也许生命本该是如此，美好的永远只属于过去，现在，包括将来，不会再遇到这样的美好。只能在心底里默默的发出一丝感伤：我曾经拥有过一份美好，无奈世间多沧桑，它总归要离我而去。\n\n　　那个夏夜，承载了我太多的回忆，如今这份回忆已经被我亲手埋葬，过去的我也永远的睡在了那张躺椅上。","tags":["生活"],"categories":["那年夏夜"]},{"title":"名言摘抄","url":"/archives/7/","content":"\n\n　　你知道他们不是坏人，他们只是没受过教育，不谙世故，没出过远门，不道德，不文明，外加愚蠢。– – 蒂姆 ･高特罗","tags":["思考"],"categories":["一个人"]},{"title":"bdtrans-一个命令行下的翻译工具","url":"/archives/5/","content":"\n　　现如今，机器翻译技术已经越来越成熟了，尽管从整体来看机器翻译的结果还不是特别如意，但是也足以应付一般的翻译需求了。近几年机器翻译平台层出不穷，国外比较出名的翻译平台有Google翻译、必应翻译等，国内比较出名的也有百度翻译、有道翻译等。\n\n　　中国的百度公司在人工智能层面做的还算是蛮不错的（虽然它的搜索一直以来为人所诟病），笔者经常在Linux下做一些工作，当有翻译需求时不得不打开浏览器，进入百度翻译官网去翻译一些句子，这样显然是有些麻烦，我想如果百度翻译肯提供一个API的话就好了，这样我就能做一个在终端下调用API的小工具。\n\n　　笔者尝试登录百度翻译的开发者平台，发现百度翻译果然提供了API，于是笔者便用Python脚本语言写了一个命令行下的调用百度翻译工具，将其命名为 **bdtrans**\n\n　　虽然笔者是在Linux下写的这个工具，但是其它平台也是支持的（前提是你的计算机上安装了一个python3的解释器），它所依赖的第三方包只有setuptools与prompt_toolkit.\n\n　　你可以将其当作一个pyhton包，在自己的脚本文件中导入并使用它，或者在python解释器中使用它，也可以将其完全当作一个命令行下的小工具，甚至启动交互式的翻译环境交互式翻译句子，它也支持从文件中读取翻译内容，并将翻译结果存储进文件中去，下面笔者简要介绍一下工具的使用。\n\n### 安装\n\n你可以使用Python包管理工具来安装它： **`pip install bdtrans`**\n\n你也可以下载源码包，解压后运行安装文件： **`python setup.py insatll`**\n\nGithub开源地址：[https://github.com/zsimline/bdtrans](https://github.com/zsimline/bdtrans)\n\n### 使用方式\n\n>　　首先，你应该去百度翻译的[官网](http://api.fanyi.baidu.com/)上注册一个账户，并按照官网上的指导并申请一个百度翻译API的AppID与秘钥。\n>　　当你首次尝试导入bdtrans包，或者在命令行工具下使用它时，它将会指引你输AppID、秘钥、默认的翻译规则等信息，并在输入完成后在你的用户目录下生成一个名为.bdtrans的配置文件，之后你就可以直接使用它而无需再次输入AppID等相关信息了。\n>　　需要注意的是，百度翻译限制调用API的频率为1s/次，所以请不要在1s内调用多次API\n\n\n### 模块函数\n\n**trans(words, source_lang=None, target_lang=None, reverse=False)**\n\n作用：翻译用户给定的句子，输出翻译结果\n\n|参数|含义|\n|:----|:----|\n|words|你想要翻译的句子|\n|source_lang|源语言代码（非必须）|\n|target_lang|目标语言代码（非必须）|\n|reverse|是否反转源语言与目标语言|\n\n```python\n>>> import bdtrans\n>>> bdtrans.trans('Hello, boy!','en','zh')\n>>> 你好，男孩！\n```\n\n\n**io_trans(input_file, output_file=None, quiet=False)**\n\n作用：从文件中读取翻译内容，如果指定了输出文件，翻译结果将被存储到输出文件中\n\n|参数|含义|\n|:----|:----|\n|input_file|输入的文件名|\n|output_file|输出的文件名|\n|quiet|是否关闭控制台输出|\n\n\n **set_lang(source_lang, target_lang)**\n\n作用：设置源语言代码与目标语言代码\n\n|参数|含义|\n|:----|:----|\n|source_lang|源语言代码|\n|target_lang|目标语言代码|\n\n\n **save(file_name)**\n\n作用：保存翻译结果到文件中\n\n|参数|含义|\n|:----|:----|\n|file_name|保存的文件名|\n\n\n**reverse_lang()**\n\n作用：反转源语言与目标语言\n\n\n**list_langs()**\n\n作用：打印目前支持的语言列表\n\n\n**display_rules**\n\n作用：显示当前的语言翻译规则\n\n\n**change_appid()**\n\n作用：按照向导改变配置文件中的AppID\n\n\n**change_lang()**\n\n作用：按照向导改变配置文件中的默认翻译规则\n\n\n**initialize_app()**\n\n作用：按照向导初始化APP\n\n\n### 命令行工具\n\n>可以直接在命令行下使用它，最重要的是你可以使用 \"bdtrans -S\" 进入交互式的翻译环境。\n\n**bdtrans [选项] 待翻译文本**\n\n#### 选项\n\n|选项|含义|\n|:----|:----|\n|-h, --help|显示帮助消息|\n|-v, --version|显示程序版本|\n|-l, --list|打印语言列表|\n|-S, --shell|启动交互式翻译环境|\n|-s code, --source code|指定源语言|\n|-t code, --target code|指定目标语言|\n|-i filename, --input filename|指定输入文件|\n|-o filename, --output filename|指定输出文件|\n|--init|按照向导初始化APP|\n|--changeinfo|改变配置文件中的AppID|\n|--changelang|改变配置文件中的翻译规则|\n\n#### 交互环境下的选项\n|选项|含义|\n|:----|:----|\n|/reve|反转源语言与目标语言|\n|/rule|显示当前的翻译规则|\n|/list|打印支持的语言列表|\n|/help|显示帮助信息|\n|/quit|退出交互环境|\n|/save filename|保存翻译结果|\n|/setlang source_lang target_lang|设置源语言与目标语言|\n```shell\nuser@host:$ bdtrans 德玛西亚万岁\nuser@host:$ Long live Demasia\nuser@host:$ bdtrans -t ara 德玛西亚万岁\nuser@host:$ فيفا دي مارسيا\nuser@host:$ bdtrans -s zh 德玛西亚万岁\nuser@host:$ 不可以只指定源语言！\n```\n\n>在交互环境下可以使用 =code 来临时的指定目标语言，此时源语言将自动的被指定为auto, 例如 \" =zh hello world \"\n```python\n>=th 你在地球嗑瓜子\nคุณใช้เมล็ดแตงโมบนโลก\n>=jp 我在月球吃西瓜\n月でスイカを食べます\n```\n\n\n### 支持的语言列表\n\n|语言代码|语言|\n|:----|:----|\n|zh|中文|\n|en|英语|\n|yue|粤语|\n|wyw|文言文|\n|jp|日语|\n|kor|韩语|\n|fra|法语|\n|spa|西班牙语|\n|th|泰语|\n|ara|阿拉伯语|\n|ru|俄语|\n|pt|葡萄牙语|\n|de|德语|\n|it|意大利语|\n|el|希腊语|\n|nl|荷兰语|\n|pl|波兰语|\n|bul|保加利亚语|\n|est|爱沙尼亚语|\n|dan|丹麦语|\n|fin|芬兰语|\n|cs|捷克语|\n|rom|罗马尼亚语|\n|slo|斯洛文尼亚语|\n|swe|瑞典语|\n|hu|匈牙利语|\n|cht|繁体中文|\n|vie|越南语|\n|auto|自动检测|\n","tags":["工具使用"],"categories":["工具使用"]},{"title":"flex布局中flex-grow与flex-shrink的计算方式","url":"/archives/4/","content":"\n　　CSS 中的 Flex(弹性布局) 可以很灵活的控制网页的布局，其中决定 Flex 布局内项目宽度/高度的是三个属性：\nflex-basis, flex-grow, flex-shrink. \n\n　　flex-basis 决定了项目占据的主轴空间，你可以为其指定一个具体的像素值，也可以指定其占据父元素的百分比\n\n\n```html\n  <style>\n    .parent {\n      width: 500px;\n      display: flex;\n      margin-bottom: 15px;\n      text-align: center;\n      background-color: #eeeeee;\n    }\n\n    /** 像素值*/\n    .parent:nth-child(1) .child1 {\n      flex-basis: 100px;\n      background-color: #356969\n    }\n    .parent:nth-child(1) .child2 {\n      flex-basis: 200px;\n      background-color: #369925;\n    }\n\n    /** 百分比 */\n    .parent:nth-child(2) .child1 {\n      flex-basis: 10%;\n      background-color: #356969\n    }\n    .parent:nth-child(2) .child2 {\n      flex-basis: 20%;\n      background-color: #369925;\n    }\n\n    /** 自动 */\n    .parent:nth-child(3) .child1 {\n      flex-basis: 30%;\n      background-color: #356969\n    }\n    .parent:nth-child(3) .child2 {\n      flex-basis: auto;\n      background-color: #369925;\n    }\n  </style>\n  <div class=\"parent\">\n    <div class=\"child1\">100px</div>\n    <div class=\"child2\">200px</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">10%</div>\n    <div class=\"child2\">20%</div>\n  </div>\n  <div class=\"parent\">\n    <div class=\"child1\">30%</div>\n    <div class=\"child2\">auto</div>\n  </div>\n```\n\n![flex-basis](/assets/images/map/4/ar4-1.png)\n\n","tags":["CSS"],"categories":["前端","CSS"]},{"title":"看懂了《让子弹飞》就理解了毛泽东和文革(转载)","url":"/archives/3/","content":"\n　　遍观姜文的作品，无论是如《鬼子来了》鞭辟入里的分析国民性格，还是反映“火红”年代所特有的青春期的骚动——《阳光灿烂的日子》，抑或是满篇充满政治隐喻的《太阳照常升起》，他的每部作品都与中国近现代史分不开。不论你持何种态度，不可否认对于20世纪的中国——影响最大的人物无疑是毛泽东了，姜文的作品显然也是绕不开毛泽东的，姜文曾多次说过他一生最崇拜以及最想演绎的角色就是毛泽东，“我演的毛泽东可能是通不过的。我觉得他可以把几万人带着迁徙，又没有补助费，像摩西出埃及一样。这种东西是精神上的，但他也很矛盾，很有悲剧性......我很幸运曾经跟他（毛）生活过一段。他是中国这几千年来能够冒出头儿来的这么三、五人中的其中一个。他跟旁边的人没法比，什么蒋介石，个儿太矬了......现在太多的恩怨，对他，会扭曲了他的精神。”\n\n　　找准了全片思想落脚点，如果对中国近代史稍有常识，就可读懂片中很多怪异场景的象征意义：鹅城：象征“五四”之前的中国，在片中多次出现的“鹅”显然象征着受精英阶层愚弄摆布数千年的劳苦百姓，它的身上有很多中国劳动人民的特质——自私、麻木、愚昧最主要的是一盘散沙...马拉火车：火车是工业时代动力的象征，马匹是农业社会动力的象征，此处显然暗讽某国的精英阶层外表上虽然接受了西方工业文明，但骨子里的价值观、政治形态还是封建农业社会的那一套...上海、浦东：“老上海”是上世纪二三十年代民国的缩影，也是权贵资本家的乐园，而“浦东”是邓爷爷改革开放下才有的产物，片尾张麻子的兄弟们坐着片头马邦德的“马拉火车”去了上海，尤其那句“浦东就是上海，上海就是浦东”露骨之极，其暗喻不言而喻...\n\n　　张麻子：一辈子致力于建立一个人人平等、社会公平的新世界的革命者（他来鹅城就为三件事“公平、公平还是他妈的的公平”）。推翻现有的反动阶层只是“万里长征的第一步”，对旧中国维护精英阶层的“道统观”的全面反叛以此建立一个没有剥削、没有压迫的新社会，才是张麻子的最大理想。在精英眼里一脸麻子的“张麻子”不但脸上没有麻子，而且浩然正气的他还有个非常“精英化”的名字——张牧之，牧之、润之，都是“泽披万民”之意，结合姜文演绎的张麻子的一生，显然张麻子就是姜文一直想演绎的毛泽东！\n\n　　张麻子的兄弟：和毛泽东打天下的兄弟们——很久以前和黄四郎一起为“辛亥革命”出过力，但革命成功后因为“惹不起”城里的官老爷们跟着毛上了山、当了匪（因为所代表阶层利益不同、国共分家），此后在毛的带领下经历千辛万苦推翻了“国民党反动派”，和毛一道准备建立一个没有剥削、没有压迫的公平社会，可惜在毛死后兄弟们却背叛了当初的誓言，坐着片头出现的马邦德的“马拉火车”去了“浦东”，从此中国又走了民国时代“权贵资本主义”的老路...\n\n　　六子：以毛岸英为代表的单纯的左派知识分子——众所周知，毛泽东的长子毛岸英在朝鲜战争中的阵亡是毛失去的第六位亲人（墓碑上“六”的手势也暗示这一点），而且在片中张麻子和六子私下以“父子”相称，但在公众面前又是“兄弟”，很符合现实中的角色的定位——当年毛泽东和毛岸英在人伦面前是父子，在志向方面又是同志！毛岸英和很多如陈独秀、瞿秋白之类的知识分子一样，在中国积淀了几千年的政治厚黑学面前幼稚的跟婴孩一般，所以片中的六子为了一份不起眼凉粉被反动势力轻而易举“玩死了”，而且死后完全得不到人民大众的尊重（毛岸英也是如此）！同时，剧中张麻子也对这个群体给予很大期望——让他出国留学学习西方先进的自然科学、感受西方如莫扎特音乐般的人文教育，远离中国几千年无比黑暗的政治。很多人暗传毛送其长子去朝鲜是为了“镀金”，回来好接班，谁知道为了一碗“蛋炒饭”送了命——其实这些人口中的“蛋炒饭”何尝不是六子肚子里那碗“凉粉”呢？！汤师爷的所谓“杀人诛心”就是如此吧！\n\n　　马邦徳及其夫人：一个为钱（葛优扮演的财迷心窍师爷）、一个为权（只要能做“县长夫人”不在乎县长是谁的妓女），他夫妻俩基本就是中国自古以来绝大多数知识分子的典型代表、现在活跃在各个领域善于忽悠大众的“专家”，利用掌握先进知识的优越性，长期和官僚阶层媾和，采取各种高超手段愚昧民众以便“合法化”的去搜刮“穷鬼”的钱财，片中的“假麻子”就是长期搜刮民财常用的道具之一...\n\n　　黄四郎：中国历来反动势力的代表，是集“王权、绅权、族权”为一身的封建势力，比如蒋——从片中可知：他出生豪门、去日本留过学，曾经为辛亥革命做出很大贡献，是千千万万“精英阶层”的代表者，推翻满清后黄四郎没有为广大人民的利益去继续革命，进城后迅速蜕变为骑在人民头上作威作福的“大老爷”（这些经历都与蒋极其相似），而且还是“铁打的老爷”，汤师爷之流仅仅是“流水的县长”，利用自身强大的武装政权和绝对的官僚权威经营着南中国全部的鸦片生意并且还贩卖人口去USA赚“dollar”，成了政治大老板刘都统“三条腿”中最粗的一条（“三条腿”暗指“三座大山”——封建主义、官僚主义、帝国主义）\n\n　　黄四郎的替身：暗指中国所特有“官僚主义权威”——无论是满清皇帝还是蒋政权，仅仅是官僚主义的替身罢了，近代的中国民众一次次的用“无量头颅无量血”换来的“共和”自以为是成功了，实质上却是赶下了一个旧的“官老爷”又迎来一个新的“官老爷”，民众的社会地位、政治地位仍没有实质改变，每次改朝换代死去的仅仅是“替身”罢了，“官僚主义”依然在社会现实以及传统文化中长期存在，这显然不仅仅是所谓西方先进政治体制就能完全解决的...\n\n　　有人说“最了解中国人的是鲁迅，最了解中国的是毛泽东”，张麻子可谓谙熟上层精英阶层和底层劳苦大众的活动心理，在底层人民眼里统治阶层永远都是那么强大、尤其黄府高耸铁门后的神秘感让人不寒而栗，但张麻子很清楚其实在团结起来的人民群众面前，再强大的反动阶层仅仅是“纸老虎”罢了，了解底层民众心里的张麻子用黄四郎“替身”的脑袋欺骗了人民大众，他表面上砍下的仅仅是一个替身的脑袋，但对民众来说却是摧毁了整个反动阶层的“官僚主义威权”，黄四郎让民众惧怕的不是杀人不眨眼的武举人、不是看似高耸的大铁门，而是劳苦大众长期以来对精英阶层顶礼膜拜的奴性罢了，鲁迅笔下反映的旧中国就道出了这一点，这就是中国实行科举制后长期存在于中国、并成为中国发展的社会毒瘤——“官僚主义权威”，可怜的黄四郎“替身”在群众的欢呼中被张麻子砍下了脑袋，同样也砍下了黄四郎平时鱼肉百姓、作威作福的“权威”，此时的鹅城百姓再无顾虑了，铁门后藏着的仅仅是一个纸老虎罢了！\n\n　　在攻下黄府前，张麻子在象征着反动势力权威的大门上打了一个大大的“感叹号”，其用意是表达一个旧时代将要结束了；而让自己兄弟打下了一个“问号”，显然张麻子对自己兄弟们在攻下黄府后会不会蜕变成下一个“黄四郎”是存在很大疑问的，片尾可以看出张麻子的这种疑问显然不是多余的……\n\n　　攻下黄府后，革命似乎成功了，民众拿回了属于自己的财富，而张麻子对财富、美色似乎没有什么兴趣，甚至连身后那把“交椅”也可以让于别人，但黄四郎显然没有张麻子的精神境界，他认为张麻子要么为了取得如他那般的权势地位、要么是为了他黄家五代人搜刮来的财富，而他却告诉黄四郎说：“你跟钱都不重要！没有你，对我很重要！”原来，张麻子是要消灭一切剥削人、压迫人的社会制度啊——这正是毛 建立新中国后所谓的“这仅仅是万里长征的第一步”的背后深意，他要摧毁的不是蒋介石的反动政权，他还要建立一个人人平等、社会公平的新世界，打破中国自古改朝换代、“打江山、坐江山”的历史周期律，这样远大的抱负显然是很多底层民众包括当是很多中共高层是无法理解的，这也是为什么很多民众尤其老帅们很自然的认为“三反五反”、“反右派”甚至“文革”等一系列打击整个“官僚精英阶层”的群众性政治运动，是毛泽东为了自身争权夺利的需要——其实这种推测根本不值一驳，叶剑英承认在长征以后，毛在党内的地位根本无人能撼动了，何况建国后刘、邓等资历差一大截的小辈！\n\n　　本片的结尾很好的呼应了片头，张麻子的兄弟们坐着马邦德的“马拉火车”和花姐就准备去权贵资本家的乐园——上海，寻找新的生活了，此时新的革命者又走了旧的统治者的老路！\n\n　　片尾，攻打黄府时，张麻子曾在黄家大门上打的“问号”成为了现实——\n　　张麻子问众人：“不跟我回山里了？”\n　　兄弟们道：“你腿脚都不利落了，还回山里啊。”\n　　张又问花姐：“你不是要跟我当麻匪到处发钱吗？”\n　　花姐：“今天不是把钱全发光了吗，还有比这更过瘾的？”\n　　张不甘心有问到：“和我在一起不高心吗？”\n　　众人道：“高兴，但不轻松、不轻松……”\n\n　　张麻子的兄弟们在革命成功后，准备和麻子分道扬镳了，建国后，毛 的“亲密”战友们也是感同身受吧：经历了红军反围剿、万里长征、抗日战争、解放战争，跟着毛 打江山、创造历史当然是很刺激很高兴的了……但好不容易打败了蒋介石坐了江山，这时候正应该论功行赏、大块吃肉的时候，打江山不就为了坐江山嘛，不然兄弟们这么多年血风腥雨的革命为了啥啊？！但大哥却让我们再回到清苦的山里当“麻匪”、劫富济贫——再时时刻刻把群众利益放在心里、把为人民服务放在第一位，甚至要和老百姓“同吃、同住、同劳动”保持艰苦朴素的本色，办事情还得看群众脸色、弄不好还要遭群众批斗……这活的也太不轻松了（毛时代的干部就是这样的），还是搭上改革开放的春风去了上海快活啊！\n\n　　到了六十年代毛敏锐的察觉到，有些曾经在战场上出生入死的老革命开始特权享受，放松自己、膨胀了私欲，置人民的利益而不顾，党内特权思想、官僚主义盛行——正如毛所说的“一部分party员不想继续革命了，有些人后退了，反对革命了，为什么呢？作了大官了，要保护大官们的利益。他们有了好房子，有汽车，薪水高，还有服务员，比资本家还厉害”……难道革命了几十年牺牲那么多战友这么短时间官僚主义就“复辟”了？可是此时身边出生入死的战友们没有人再愿意继续革命了，这时他又想到了他为之奋斗一生的人民，从旧中国走过来的中国人民的整体国民素质是令人堪忧的，毛泽东深知中国人在思想上受到宋明伪儒家思想的毒害之深，深知中国的底层民众对自己的要求一直依然是鲁迅笔下的那群事不关己高、高挂起的心态，他觉得只有人民的思想觉悟实质提高了、人民接受了先进的平等理念，只有这样才能有效防止“官僚阶层”走向人民对立面甚至骑在人民头上作威作福，所以毛泽东接见群众时不断强调“要少一点奴性，多一点主人翁的自尊心.”——不然空有所谓“民主”制度的印度为何至今还不能摆脱奴隶社会种姓制度的桎酷？！\n\n　　在这种背景下，晚年的毛泽东决定孤注一掷，发动一场全民性的、自下而上的，以革新文化思想以及打击整个官僚精英阶层为初衷的“文化大革命”，熟读史书的毛泽东显然知道得罪掌握话语权的官僚阶层尤其知识分子，将来会在历史上留下怎样的“恶名”（“我就在二十世纪六十年代当了共产党的钟馗了。事物总是要走向反面的，吹得越高，跌得越重，我是准备跌得粉碎的。”），但我们从毛的诗词中可以明显感觉到他首先是一位理想主义至上的英雄，对于身后名是完全不在乎的，晚年的他又开始了生命里的“第二次长征”——只是这一次，他蓦然回首，再也看不到那支曾经追随他、为了民族的自由和光明而一往无前、浩浩荡荡的革命队伍——夕阳西下、漫漫征途中陪伴他的只有自己孤独的身影……\n\n　　毛死后，理想主义的红旗落地了，没有人再去追求什么所谓的“社会公平”，一切向钱看了，正如他预言的那般“老百姓要吃二遍苦、遭二茬罪” 的。正如张麻子所说“死人有时比活人有用”，权贵们一边把毛泽东作为“无害神像”挂在城楼上、企图透支毛泽东所创造的丰功伟绩所带给他们的历史合法性，一边大搞黑毛和私有化运动、利用工农阶层的血汗来充实自己的腰包，“扛着红旗反红旗”不也是黄四郎的手段吗——\n\n　　在红军革命根据地时期，“朱毛”红军被蒋介石宣传成“共产共妻”、杀人不眨眼的“土匪”；在当下的“盛世中国”，毛泽东被权贵、精英们诅咒其为“暴君”、“屠夫”甚至是“20世纪人类的三大恶魔之一”。精英们恨不能对其挫骨扬灰，说明在受过毛时代不断的全民性政治运动启蒙后的中国人民面前，他们的内心是极度恐慌的，必定鲁迅笔下的中国人在渐渐减少！自古以来，黄四郎们都是先大肆诋毁真革命者为“麻匪”，然后把自己伤天害理的全部罪责推到“张麻子”身上，再以“剿匪”之名搜刮民脂民膏，这才是真正的“杀人诛心”、用心何其险恶！\n\n　　这个在精英眼里满脸麻子的毛润之到底给中国带来了什么“灾难”呢:\n　　在他执政的短短的二十七年间，无论是在朝鲜战争、对印自卫反击、还是苏俄在边境陈兵百万，毛泽东从未向这些强敌屈服\n过，中国通过一系列对外战争、卓有成效的外交行动重新获得了世界的尊重和认可，尤其是毛泽东以众横捭阖的高超战略、超人的胆识斡旋于美苏两强之间，为中国赢得了巨大的政治外交红利，至今受益。\n\n　　在短短的二十七年间，在辽阔的中国大地上，一举消灭了为害千年的匪患，肃清了黑社会帮派势力和一切扰乱社会、残害人民的黑恶势力，社会秩序空前安定。毛时代的犯罪率是中国历史最低的。\n\n　　在短短的二十七年间，在辽阔的中国大地上，彻底扫除了自清末以来全民吸食鸦片的恶习，铲除了危害国民身体、国民精神健康的“陋习”——如童养媳、裹脚、纳妾、男尊女卑等等，民族精神面貌也随之焕然一新；千百年来摧残和迫害妇女的卖淫、嫖娼的社会污泥浊水，被荡涤无存，妓女被改造为自食其力的劳动者，并且给予其应有人格尊严，中国只有在毛时代才真正算彻底消灭了“黄赌毒”。\n\n　　在短短的二十七年间，在辽阔的中国大地上，文化教育事业快速发展，扫除大量文盲，大力普及基础教育，从49年以前全国80%以上的文盲率，到70年代中国大地上新的一代青少年普遍都受过几乎免费的初等教育，中国人从没有把知识的学习如此“草根化”过。\n\n　　在短短的二十七年间，在辽阔的中国大地上，医疗卫生事业快速发展，消灭或基本消灭了多种存在于广大农村的传染病，如鼠疫、霍乱、天花等。在国家物质极其匮乏的年代，依靠合作医疗、赤脚医生、农村三级卫生保健网这“三大法宝”， 为中国数亿农民提供了最基本的医疗服务，并赢得世界赞誉。在27年内中国人口平均寿命从35岁提高到65岁。\n\n　　最为可贵的是，以刚建国时期一个长期积贫积弱、饱受战乱的极端落后的农业国，毛带领中国人民节衣缩食、自力更生在短短27年的时间里，建立成拥有完整轻重工业体系的世界第六大工业国，甚至还在航天核武电子等方面走在了世界前列，走完了西方主要老牌工业国100年才能完成的国家“工业化浪潮”，没有这些辉煌的成就奠基——“伟大”的总设计师用什么去改革开放呢？\n\n　　郁达夫曾说：“没有伟大人物出现的民族，是世界上最可怜的生物群体；有了伟大的人物，而不知拥护、爱戴、崇仰的国家，是没有希望的奴隶之邦。”\n\n　　就是这样一个彻底扭转中国几百年衰败国运、有“再造中华”之功并且享有世界普遍赞誉的伟人，在精英统治者眼中确实满脸麻子、奇丑无比，而且还是“悍匪”（如今暴君、屠夫纷至沓来），因为毛泽东彻底扯下了数千年来官僚阶层愚民术的最后一块遮羞布——群众在打到“官僚权威”、“学术权威”口号下，通过一系列政治运动让官僚和文人彻底丢尽了“脸面”，摧毁了官僚主义在人民群众中积攒了数千年的“权威”——正如毛所说的，“五帝三皇神圣事，骗了无涯过客”。\n\n　　张麻子为民做了主，民众下跪高呼“青天大老爷”，可张麻子鸣枪警醒大家：不能跪，早就没皇帝老子了，哪来的青天大老爷——毛设想的国人正如他诗中说道“春风杨柳万千条,六亿神州尽舜尧”，每个中国人都能有人格尊严、有独立精神的活着……\n\n　　毛泽东的晚年注定是孤独、凄凉的，正如剧中的结尾：昔日的战友尽数背叛了当初“上山”当“土匪”时的誓言，拥着花姐一路欢笑去了上海开始了“新”的生活；而暂时过上安逸生活的鹅城百姓又把“革命”高高挂了起来，并且又乐于“青天大老爷”为自己做主了；只有他仍不服输，和来鹅城前一样——骑着白马、一身戎装落寞的策马奔腾在夕阳中，他要永葆“山匪”的本色。\n\n　　正如尼克松评价道：“无论人们对毛有怎样的看法，谁也否认不了他是一位战斗到最后一息的战士。”，此时想必姜文也明白，唯有片尾李叔同的那首《送别》才能表达出毛泽东此时孤独落寞的心境：\n\n　　长亭外，古道边，芳草碧连天。晚风拂柳笛声残，夕阳山外山。天之涯，地之角，知交半零落。一壶浊酒尽余欢，今宵别梦寒……\n","tags":["思考"],"categories":["一个人"]},{"title":"解决Debina系统自动更新软件包的问题","url":"/archives/2/","content":"\n　　不知从何时开始，我的电脑每天开机连接上网络之后，不断的在下载数据，状态栏显示网速达到每秒1到2兆。开始我还不太在意，不过后来由于带宽全部被这种莫名其奥妙的下载占据了，我连网页都无否正常浏览了，所以我决定解决掉这个问题。下面记录一下解决这个问题的过程。\n\n　　首先我利用一款名为`nethogs`的实时网速监控程序查看是哪个进程在占据带宽，发现占据带宽的正是系统的APT包管理工具，我想肯定是系统在执行自动更新。杀掉这个进程后，我便去Google了一下如何关闭APT包管理工具的的自动更新。网上人们提供的解决方案大都一致：修改APT的配置文件。\n\nAPT关于自动更新的配置文件位于\"/etc/apt/apt.conf.d/20auto-upgrades\", 将其中的\n```shell\nAPT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n```\n更改为\n```shell\nAPT::Periodic::Update-Package-Lists \"0\";\nAPT::Periodic::Unattended-Upgrade \"0\";\n```\n其中\n- APT::Periodic::Update-Package-Lists; 每一天自动运行一次 apt-get update，1 表示启用，0 表示禁用。\n- APT::Periodic::Unattended-Upgrade; 每一天运行一次 unattended-upgrade 安全升级脚本，1 表示启用，0 表示禁用。\n  \n　　然而，并无卵用，第二天开机后APT又执行自动更新了，更奇怪的是杀掉APT进程不久之后它会再一次运行。这时我才意识到一件事情，APT是不会自动把自己调入内存运行的，一定是另有进程调用了它。打开进程管理器之后，查看 APT 进程的依赖关系，发现果然它有一个名为 `packagekit` 的父进程，我查了一下 `packagekit` 是一个旨在简化Linux发行版安装和更新软件的系统，它为不同的包管理工具提供了统一的前端，你可以在不同的Linux发行版中使用它来管理软件包。\n\n　　我的系统默认在开机时启动packgekit服务，查看 `packagekit` 的启动单元: \n`cat /lib/systemd/system/packagekit.service`\n```shell\n[Unit]\nDescription=PackageKit Daemon\n# PK does not know how to do anything on ostree-managed systems;\n# currently the design is to have dedicated daemons like\n# eos-updater and rpm-ostree, and gnome-software talks to those.\nConditionPathExists=!/run/ostree-booted\n\n[Service]\nType=dbus\nBusName=org.freedesktop.PackageKit\nUser=root\nExecStart=/usr/lib/packagekit/packagekitd\n```\n*系统每次开机时都会启动这个单元，执行 `/usr/lib/packagekit/packagekitd` 命令，而 `packagekit` 又将在运行期间调起APT下载需要更新的软件包。*\n\n　　知道了这些问题自然也就解决了，禁用此服务: `systemctl disable packagekit.service`.\n　　或者干脆删除 `/lib/systemd/system/` 目录下的 `packagekit.service` (当然你也可以把这个文件移动到别的地方去，以后用到时再放回来)\n\n　　在那之后，系统便再也没有执行过自动更新了。\n　　\n[附]\n>[nethohs](https://github.com/raboof/nethogs)是一个能按进程实时监控网络的命令行工具，它可以动态的展示某一时刻正在进行通信的进程的网络流量信息。\n\n在 Debian/Ubuntu 下，使用`apt-get install nethogs` 安装它。\n或编译安装:\n```shell\nwget -c https://github.com/raboof/nethogs/archive/v0.8.5.tar.gz\ntar xf v0.8.5.tar.gz \ncd ./nethogs-0.8.5/\nmake && make install\n```\n如果编译失败需要安装依赖库\n```\napt-get install libncurses5-dev libpcap-dev\n```\n\n使用\n\n```shell\nroot@zsimline$ nethogs\nNetHogs version 0.8.5-2+b1\nPID  USER    PROGRAM                   DEV  SENT      RECEIVED  \n2181 mxsyx  /usr/share/code/code       usb0 0.449   0.900 KB/sec\n1598 mxsyx  /usr/lib/chromium/chromium usb0 0.031   0.018 KB/sec\n?    root   unknown TCP                     0.000   0.000 KB/sec\n\n  TOTAL                                     0.480       0.917 KB/se\n```\n\n指定网卡\n```shell\nroot@zsimline$ nethogs wlan0 # 监听wlan0\nroot@zsimline$ nethogs -a    # 监听所有网卡\n```\n\n指定刷新频率 -d seconds (默认为1)\n```shell\nroot@zsimline$ nethogs -d 2\n```\n\n指定刷新次数 -c number (默认不限)\n```shell\nroot@zsimline$ nethogs -c 10\n```\n\n交互模式\n在进入 nethogs 之后，可以使用如下的交互命令:\n```shell\nq: 退出\ns: 按照发送流量排序\nr: 按照流量排序\nm: 修改网速单位 (KB, B, MB) and KB/s\n```","tags":["Linux"],"categories":["Linux"]},{"title":"C++ 标准线程库","url":"/archives/1/","content":"\n　　C++11 引入了对多线程语言级别的支持，<thread> 库是C++的标准线程库，它定义了与编写多线程程序相关的类。 相比于传统的POSIX线程标准，<thread> 库更符合C++的编程风格。\n\n　　<thread> 库是跨平台的，这意味着你可以在任意平台上不经修改直接编译同一段多线程代码（前提是你没有在这段代码中调用其它系统相关的API）\n\n### 创建一个线程\n\nstd::thread 类用来创建一个线程\n\n```cpp\n// dev01.cc\n#include <iostream>\n#include <thread>  // 引入线程库头文件\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n\n  // 等待线程 trd 结束\n  trd.join();\n\n  return 0;\n}\n```\n```shell\n编译dev01.cc （需要动态链接pthread库）\ng++ -o dev dev.cc -lpthread && ./dev\n输出：index 的值为 1\n```\n　　std::thread 的初始化构造函数原型为`template <class Fn, class... Args>`, 构造函数的第一个参数为线程要执行的函数，后面是要传递给线程函数的实参。**值得注意的是，线程在thread类实例化之后就开始执行了，不需要显式的调用任何启动线程的函数。**\n\n　　线程启动后，需要在主线程内调用线程对象的 join 函数。join 函数用于阻塞主线程的执行，当新创建的线程执行完成后，主线程继续执行。一个进程内的所有线程共享某些资源，若不调用线程对象的join 函数，一旦主线程执行结束，操作系统将回收这些资源，新创建的线程得不到这些应有的资源就会终止执行并抛出错误。\n\n【拷贝构造函数】\n std::thread 类不支持拷贝构造 `thread (const thread&) = delete;`\n\n【移动构造函数】\nstd::thread 类支持移动构造函数 `thread (thread&& x) noexcept;`\n```cpp\n// dev02.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"index 的值为!\" << index << std::endl;\n}\n\nint main() {\n  // 创建线程 trd, 传入参数 1\n  std::thread trd(Display, 1);\n  // 移动动构造一个线程对象\n  // 该操作不会以任何方式影响被移动线程的执行\n  std::thread trd1(std::move(trd));\n\n  // 此时trd对象不再代表任何执行线程\n  // trd.join();\n  trd1.join();\n\n  return 0;\n}\n```\n【赋值操作符】\n 可以使用赋值操作符移动赋值线程对象`thread& operator= (thread&& rhs) noexcept;`\n 不可以使赋值操作符拷贝赋值线程对象`thread& operator= (const thread&) = delete;`\n```cpp\n// dev03.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 创建线程对象数组\n  // 调用类的默认构造函数\n  std::thread trds[3];\n\n  // 使用赋值操作符移动赋值\n  // 该操作不会以任何方式影响被移动线程的执行\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  // 等待线程结束\n  for(int i = 0; i < 3; i++)\n    trds[i].join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n我是线程 2\n我是线程 3\n我是线程 1\n```\n可以看到，线程的执行顺序是不确定的，这取决于操作系统如何调度线程的执行。\n而且，输出也并不总是这样顺眼，比如下面的输出：\n```shell\n我是线程 我是线程 21我是线程 3\n```\nDisplay 函数中的输出语句是可中断的，当某个线程输出 “我是线程 ” 后，它完全有可能被操作系统挂起，等待一段时间后系统再次启动这个线程，输出剩余的内容。\n\n### 获取线程ID\n\n每个线程都有一个唯一标识，通过调用线程对象的 get_id 函数可以得到这个唯一标识。\n\n```cpp\n// dev04.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  std::thread trds[3];\n\n  for(int i = 0; i < 3; i++)\n    trds[i] = std::thread(Display, i + 1);\n\n  for(int i = 0; i < 3; i++) {\n    // 线程ID 的类型为 std::thread::id\n    std::thread::id tid = trds[i].get_id();\n    std::cout << \"线程\" << i + 1 << \" \" << tid << std::endl;\n    trds[i].join();\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程1 140121399854848\n线程2 140121391462144\n线程3 140121383069440\n```\n\n### 检测线程可连接性\n\n通过调用线程对象的 joinable 函数可以检测线程对象是否是可连接的。\n如果线程对象表示执行线程，则该对象是可连接的。\n在以下任何情况下，线程对象均不可连接：\n1.  线程对象是由默认构造函数生成的\n2. 线程对象已经被移动（通过移动构造函数或赋值操作符）\n3. 已经调用过线程对象的 join 或 detach 函数\n\n```cpp\n// dev05.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  //std::cout << \"我是线程 \" << index << std::endl;\n}\n\nint main() {\n  // 默认构造 trd1\n  std::thread trd1;\n  // 正常构造 trd2\n  std::thread trd2(Display, 1);\n  // 移动构造 trd3\n  std::thread trd3(std::move(trd2));\n\n  if(trd1.joinable()) {\n    std::cout << \"线程对象trd1可连接\" << std::endl;\n    trd1.join();\n  } else {\n    std::cout << \"线程对象trd1不可连接，它是默认构造的\" << std::endl;\n  }\n  \n  if(trd2.joinable()) {\n    std::cout << \"线程对象trd2可连接\" << std::endl;\n    trd2.join();\n  } else {\n    std::cout << \"线程对象trd2不可连接，它已经被移动了\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3不可连接\" << std::endl;\n  }\n\n  if(trd3.joinable()) {\n    std::cout << \"线程对象trd3可连接\" << std::endl;\n    trd3.join();\n  } else {\n    std::cout << \"线程对象trd3现在不可连接了\" << std::endl;\n  }\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n线程对象trd1不可连接，它是默认构造的\n线程对象trd2不可连接，它已经被移动了\n线程对象trd3可连接\n线程对象trd3现在不可连接了\n```\n\n### 分离线程\n\n调用线程对象的detach函数可以使新创建的线程与主线程分离，与join函数不同的是，detach函数不会阻塞主线程的执行，若主线程早于新线程执行完毕，新线程将终止执行，不会抛出任何错误。\n\n```cpp\n// dev06.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid DelayThread(int s) {\n  // sleep_for函数使线程睡眠s秒\n  std::this_thread::sleep_for(std::chrono::seconds(s));\n  std::cout << s << \"秒过去了\" << std::endl;\n}\n\nint main() {\n  std::thread trd1(DelayThread, 2);\n  std::thread trd2(DelayThread, 8);\n\n  // 分离线程\n  trd1.detach();\n  trd2.detach();\n\n  // 主线程睡眠5s\n  DelayThread(5);\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n2秒过去了\n5秒过去了\n```\n\n### 交换线程\n\n通过调用线程对象的swap函数可以交换两个线程\n\n```cpp\n// dev07.cc\n#include <iostream>\n#include <thread>\n\nvoid Display(int index) {\n  // ...\n}\n\nint main() {\n  std::thread trd1(Display, 2);\n  std::thread trd2(Display, 8);\n\n  std::cout << \"交换前：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  // 交换两个线程\n  trd1.swap(trd2);\n  // 同样可以调用非成员函数交换两个线程\n  // swap(trd1, trd2);\n\n  std::cout << \"交换后：\" << std::endl;\n  std::cout << \"trd1 ID: \" << trd1.get_id() << std::endl;\n  std::cout << \"trd2 ID: \" << trd2.get_id() << std::endl;\n\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\n交换前：\ntrd1 ID: 140593231992576\ntrd2 ID: 140593223599872\n交换后：\ntrd1 ID: 140593223599872\ntrd2 ID: 140593231992576\n```\n\n### 获取硬件并发数量\n\n有时我们想知道处理器支持的硬件并发数量，可以调用线程类的静态函数 hardware_concurrency 来获取这个值，该函数返回值是一个无符号整数。\n\n```cpp\n// dev08.cc\n#include <iostream>\n#include <thread>\n\nint main() {\n  std::cout << std::thread::hardware_concurrency();\n  return 0;\n}\n```\n```shell\n编译上面的程序输出（在我的四核心处理器上）\n4\n编译上面的程序输出（在我的单核心处理器上）\n1\n```\n值得注意的是：该函数的返回值不一定与系统中可用的处理器或内核的实际数量相匹配，系统可以为每个处理单元支持多个线程，或限制对程序的资源访问。\n\n### 访问当前线程\n\n　　std::this_thread 命名空间定义了几个访问当前线程的函数，你可以在线程函数中直接调用这些函数来实现一些功能。\n\n+ get_id\n`thread::id get_id() noexcept;`\n获取当先线程ID\n+ yield\n`void yield() noexcept;`\n阻塞当先线程的执行\n+ sleep_for\n`template <class Rep, class Period>`\n`void sleep_for (const chrono::duration<Rep,Period>& rel_time);`\n阻塞当前线程的执行一段时间\n\n```cpp\n// dev09.cc\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nbool ready = false;\n\nvoid SetReady() {\n  // 等待 5 秒钟后设置全局变量 ready 的值为 true\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  std::cout << \"Display 函数即将继续执行\" << std::endl;\n  ready = true;\n}\n\nvoid Display() {\n  // 阻塞当前线程的执行，直到SetReady 函数设置\n  // 全局变量 ready 的值为 true 的时候才继续执行\n  while (!ready) {\n    std::this_thread::yield();\n  }\n  std::cout << \"线程ID: \" << std::this_thread::get_id() << std::endl;\n}\n\n\nint main () {\n  std::thread trd1(SetReady);\n  std::thread trd2(Display);\n  trd1.join();\n  trd2.join();\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nDisplay 函数即将继续执行\n线程ID: 140362842375936\n```\n\n+ sleep_until\n`template <class Clock, class Duration>`\n`void sleep_until (const chrono::time_point<Clock,Duration>& abs_time);`\n阻塞当前线程的执行直到某个时间\n\n```cpp\n// dev10.cc\n// this_thread::sleep_for example\n\n#include <iostream>\n#include <iomanip>　　// std::put_time\n#include <thread>\n#include <chrono>\n#include <ctime>　// std::time_t, std::tm, std::localtime, std::mktime\n\nint main() {\n  using std::chrono::system_clock;\n  std::time_t tt = system_clock::to_time_t(system_clock::now());\n\n  struct std::tm * ptm = std::localtime(&tt);\n  std::cout << \"Current time: \" << std::put_time(ptm,\"%X\") << '\\n';\n\n  std::cout << \"Waiting for the next minute to begin...\\n\";\n  ++ptm->tm_min; ptm->tm_sec=0;\n  std::this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));\n\n  std::cout << std::put_time(ptm,\"%X\") << \" reached!\\n\";\n\n  return 0;\n}\n```\n```shell\n编译上面的程序输出：\nCurrent time: 22:08:36\nWaiting for the next minute to begin...\n22:09:00 reached!\n```\n上面是摘自CPP官网的一段程序，主函数内生成一个关于系统时间的结构体，输出当前时间后使结构体内的分钟数自增1，之后调动 sleep_until 函数阻塞当前线程的执行直到下一分钟的到来。\n\n\n以上是对C++标准线程库的简单介绍，此文章内的全部代码可在下面的链接中找到：[https://github.com/zsimline/sweetea/tree/master/code/archives-667](https://github.com/zsimline/sweetea/tree/master/code/archives-667)\n\n参考资料：\n[1] CPP官网 [http://www.cplusplus.com/reference/thread/](http://www.cplusplus.com/reference/thread/)\n","tags":["C++"],"categories":["编程语言"]}]